[{"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\index.js":"1","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\TLApp.js":"2","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\context\\DrawerContext.js":"3","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\context\\AuthContext.js":"4","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\admin.js":"5","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\login.js":"6","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\solicitud-critica.js":"7","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\inicio.js":"8","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\prep_critica.js":"9","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\solicitud-diseno.js":"10","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\prep_diseno.js":"11","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\prev_resultado.js":"12","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\customRouter\\publicRoute.js":"13","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\customRouter\\privateRoute.js":"14","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\drawer\\index.js":"15","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\firebase.js":"16","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\api.js":"17","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\helpers\\userStorage.js":"18","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\modal\\designDetail.js":"19","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\modal\\critiqueDetail.js":"20","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\footer\\footer.js":"21","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\data\\data.js":"22","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\hooks\\useStepObserver.js":"23","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\stories-carrousel\\carrousel.js":"24","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\home-panorama\\panorama.js":"25","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\forms\\step-manager\\step-manager.js":"26","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\navbar\\index.js":"27","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\request-card\\index.js":"28","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\dropdown-image\\index.js":"29","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\drawer\\drawer.js":"30","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\tabs\\index.js":"31","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\tag\\index.js":"32","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\forms\\forms-steps\\index.js":"33","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\loading-screen\\index.js":"34","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\helpers\\functions.js":"35","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\modal\\confirmationModal.js":"36","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\navbar\\navbar.js":"37","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\request-card\\card.js":"38","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\dropdown-image\\dropdown.js":"39","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\tabs\\tabs.js":"40","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\tag\\tag.js":"41","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\forms\\forms-steps\\form-steps.js":"42","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\avatar\\index.js":"43","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\loading-screen\\loading-screen.js":"44","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\story-card\\index.js":"45","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\hooks\\useOutsideListener.js":"46","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\avatar\\avatar.js":"47","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\story-card\\story_card.js":"48","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\customRouter\\anyRoute.js":"49","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\helmet\\index.js":"50","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\helmet\\helmet-metadata.js":"51","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\modal\\punctuation.js":"52","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\speech-bubble\\speech-bubble.js":"53","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\ins_evento.js":"54","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\helpers\\validators.js":"55","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\ins_evento_OBRA-PROFESIONAL-CCADENA-2.js":"56","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\perfil.js":"57","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\service-card\\index.js":"58","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\perfil_persona.js":"59","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\perfil_editorial.js":"60","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\ins_evento_APRENDE-SER-PAGADO-POR-ESCRIBIR-CRISTI-1.js":"61","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\tooltip\\index.js":"62","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\tooltip\\tooltip.js":"63","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\solicitud-correccion.js":"64","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\modal\\correctionDetail.js":"65","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\prep_correccion.js":"66","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\ins_evento_GRAN-TALLER-TECNICAS-NARRACION-LILI-1.js":"67","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\profile\\mini-profile.js":"68","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\result-preview-card\\index.js":"69","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\result-preview-card\\result-preview-card.js":"70","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\service-card\\service-card.js":"71","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\hooks\\useWindowSize.js":"72","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\modal\\detailRequestModal.js":"73","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\modal\\feedbackModal.js":"74","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\ins_evento_OBRA-PROFESIONAL-CCADENA-3.js":"75","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\hooks\\useScrollOffset.js":"76","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\context\\ThemeContext.js":"77"},{"size":577,"mtime":1622079956604,"results":"78","hashOfConfig":"79"},{"size":2228,"mtime":1622079948480,"results":"80","hashOfConfig":"79"},{"size":924,"mtime":1612329952620,"results":"81","hashOfConfig":"79"},{"size":1148,"mtime":1622080080491,"results":"82","hashOfConfig":"79"},{"size":13986,"mtime":1622079616714,"results":"83","hashOfConfig":"79"},{"size":3768,"mtime":1621889350457,"results":"84","hashOfConfig":"79"},{"size":22135,"mtime":1621887976726,"results":"85","hashOfConfig":"79"},{"size":5987,"mtime":1621887950667,"results":"86","hashOfConfig":"79"},{"size":10507,"mtime":1621309275654,"results":"87","hashOfConfig":"79"},{"size":25058,"mtime":1622063097077,"results":"88","hashOfConfig":"79"},{"size":9726,"mtime":1621977131199,"results":"89","hashOfConfig":"79"},{"size":13373,"mtime":1621809164775,"results":"90","hashOfConfig":"79"},{"size":689,"mtime":1617057602450,"results":"91","hashOfConfig":"79"},{"size":690,"mtime":1617057602448,"results":"92","hashOfConfig":"79"},{"size":35,"mtime":1611783381168,"results":"93","hashOfConfig":"79"},{"size":659,"mtime":1612134803982,"results":"94","hashOfConfig":"79"},{"size":8914,"mtime":1622079961196,"results":"95","hashOfConfig":"79"},{"size":1401,"mtime":1622079329288,"results":"96","hashOfConfig":"79"},{"size":10554,"mtime":1621898928811,"results":"97","hashOfConfig":"79"},{"size":9685,"mtime":1621898943497,"results":"98","hashOfConfig":"79"},{"size":1689,"mtime":1611974876703,"results":"99","hashOfConfig":"79"},{"size":4747,"mtime":1621889665123,"results":"100","hashOfConfig":"79"},{"size":651,"mtime":1611963889219,"results":"101","hashOfConfig":"79"},{"size":3948,"mtime":1621309275558,"results":"102","hashOfConfig":"79"},{"size":3628,"mtime":1621888429669,"results":"103","hashOfConfig":"79"},{"size":230,"mtime":1611891779839,"results":"104","hashOfConfig":"79"},{"size":35,"mtime":1610169602941,"results":"105","hashOfConfig":"79"},{"size":33,"mtime":1612493180152,"results":"106","hashOfConfig":"79"},{"size":37,"mtime":1611812649805,"results":"107","hashOfConfig":"79"},{"size":2755,"mtime":1621903111197,"results":"108","hashOfConfig":"79"},{"size":32,"mtime":1615182318143,"results":"109","hashOfConfig":"79"},{"size":32,"mtime":1610813286511,"results":"110","hashOfConfig":"79"},{"size":39,"mtime":1611877771633,"results":"111","hashOfConfig":"79"},{"size":43,"mtime":1612489867120,"results":"112","hashOfConfig":"79"},{"size":6186,"mtime":1621309275571,"results":"113","hashOfConfig":"79"},{"size":2558,"mtime":1621902133010,"results":"114","hashOfConfig":"79"},{"size":5688,"mtime":1621903103230,"results":"115","hashOfConfig":"79"},{"size":5778,"mtime":1621309275546,"results":"116","hashOfConfig":"79"},{"size":2729,"mtime":1622064150592,"results":"117","hashOfConfig":"79"},{"size":5826,"mtime":1622069956753,"results":"118","hashOfConfig":"79"},{"size":251,"mtime":1610819468986,"results":"119","hashOfConfig":"79"},{"size":850,"mtime":1621309275518,"results":"120","hashOfConfig":"79"},{"size":35,"mtime":1612494927695,"results":"121","hashOfConfig":"79"},{"size":847,"mtime":1621309275523,"results":"122","hashOfConfig":"79"},{"size":39,"mtime":1610293845546,"results":"123","hashOfConfig":"79"},{"size":913,"mtime":1615182318153,"results":"124","hashOfConfig":"79"},{"size":1412,"mtime":1621309275509,"results":"125","hashOfConfig":"79"},{"size":736,"mtime":1621309275561,"results":"126","hashOfConfig":"79"},{"size":453,"mtime":1615182318114,"results":"127","hashOfConfig":"79"},{"size":44,"mtime":1615182318124,"results":"128","hashOfConfig":"79"},{"size":2063,"mtime":1617057602455,"results":"129","hashOfConfig":"79"},{"size":6949,"mtime":1621309275535,"results":"130","hashOfConfig":"79"},{"size":228,"mtime":1615598488470,"results":"131","hashOfConfig":"79"},{"size":1038,"mtime":1621309471520,"results":"132","hashOfConfig":"79"},{"size":3463,"mtime":1621309275572,"results":"133","hashOfConfig":"79"},{"size":21673,"mtime":1621310399634,"results":"134","hashOfConfig":"79"},{"size":3796,"mtime":1621309275648,"results":"135","hashOfConfig":"79"},{"size":41,"mtime":1621309275552,"results":"136","hashOfConfig":"79"},{"size":15633,"mtime":1622067626968,"results":"137","hashOfConfig":"79"},{"size":4342,"mtime":1621309275649,"results":"138","hashOfConfig":"79"},{"size":18519,"mtime":1621310653364,"results":"139","hashOfConfig":"79"},{"size":36,"mtime":1621309275566,"results":"140","hashOfConfig":"79"},{"size":284,"mtime":1621309275568,"results":"141","hashOfConfig":"79"},{"size":21581,"mtime":1621887971617,"results":"142","hashOfConfig":"79"},{"size":9548,"mtime":1621898949517,"results":"143","hashOfConfig":"79"},{"size":8227,"mtime":1621309275652,"results":"144","hashOfConfig":"79"},{"size":18157,"mtime":1621309275643,"results":"145","hashOfConfig":"79"},{"size":3772,"mtime":1621309275542,"results":"146","hashOfConfig":"79"},{"size":48,"mtime":1621309275547,"results":"147","hashOfConfig":"79"},{"size":2237,"mtime":1621974150105,"results":"148","hashOfConfig":"79"},{"size":816,"mtime":1621309275554,"results":"149","hashOfConfig":"79"},{"size":1086,"mtime":1621309275573,"results":"150","hashOfConfig":"79"},{"size":2687,"mtime":1621901409393,"results":"151","hashOfConfig":"79"},{"size":1934,"mtime":1621309275531,"results":"152","hashOfConfig":"79"},{"size":18644,"mtime":1621397733659,"results":"153","hashOfConfig":"79"},{"size":1379,"mtime":1621808006309,"results":"154","hashOfConfig":"79"},{"size":1100,"mtime":1622085475826,"results":"155","hashOfConfig":"79"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},"1arx63t",{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"158"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"158"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"158"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"158"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"158"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"158"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"158"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"158"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"158"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"158"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"158"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"158"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"158"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"158"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"158"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"158"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"158"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"158"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"158"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"158"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"158"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"158"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"158"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290","usedDeprecatedRules":"158"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293","usedDeprecatedRules":"158"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"296","usedDeprecatedRules":"158"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301","usedDeprecatedRules":"158"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304","usedDeprecatedRules":"158"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307","usedDeprecatedRules":"158"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"314","usedDeprecatedRules":"158"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"317","usedDeprecatedRules":"158"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320","usedDeprecatedRules":"158"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"323","usedDeprecatedRules":"158"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"326","usedDeprecatedRules":"158"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"331","usedDeprecatedRules":"158"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"338","usedDeprecatedRules":"158"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"343","usedDeprecatedRules":"158"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"346","usedDeprecatedRules":"158"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\index.js",[],["349","350"],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\TLApp.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\context\\DrawerContext.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\context\\AuthContext.js",["351"],"import React, { useContext, createContext, useState, useEffect } from 'react';\r\nimport firebase from '../firebase';\r\nimport { setProfileStorage, setAdminRequestType, setAdminMainTabIndex } from '../helpers/userStorage';\r\nimport { ThemeContext } from '../context/ThemeContext';\r\n\r\nconst auth = firebase.auth();\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [logged, setLogged] = useState(false);\r\n    const [loading, setLoading] = useState(true);\r\n    const { updateTheme } = useContext(ThemeContext);\r\n\r\n    useEffect(() => {\r\n        return auth.onAuthStateChanged(function (user) {\r\n            if (user) {\r\n                setLogged(user);\r\n            } else {\r\n                setLogged(null);\r\n                setProfileStorage(null);\r\n                setAdminRequestType(null);\r\n                setAdminMainTabIndex(0);\r\n                updateTheme('default');\r\n            }\r\n            setLoading(false);\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ logged, loading }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    )\r\n}\r\n","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\admin.js",["352","353","354","355","356","357","358","359","360","361","362","363","364","365","366"],"import React, { useContext, useState, useEffect } from 'react';\r\nimport DropdownImage from '../componentes/dropdown-image';\r\nimport Navbar from '../componentes/navbar';\r\nimport DetailRequestModal from '../componentes/modal/detailRequestModal';\r\nimport FeedbackModal from '../componentes/modal/feedbackModal';\r\nimport RequestCard from '../componentes/request-card';\r\nimport Tabs from '../componentes/tabs';\r\nimport Footer from '../componentes/footer/footer';\r\nimport PuffLoader from \"react-spinners/PuffLoader\";\r\nimport queryString from 'query-string';\r\nimport { AuthContext } from '../context/AuthContext';\r\nimport { ThemeContext } from '../context/ThemeContext';\r\nimport { css } from \"@emotion/core\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCoffee, faMoon, faPlus, faSun } from '@fortawesome/free-solid-svg-icons';\r\nimport { requestStatuses, editorialServices } from '../data/data';\r\nimport { getStatistics, getRequests, getRequest, takeRequest, resignRequest, takeRest } from '../api';\r\nimport { setAdminRequestType, getAdminRequestType, setAdminMainTabIndex, getAdminMainTabIndex, getProfileStorage } from '../helpers/userStorage';\r\nimport { getServiceById } from '../helpers/functions';\r\n\r\nconst override = css`\r\n  display: block;\r\n  margin: 5rem auto;\r\n`;\r\n\r\nconst requestTypeList = editorialServices;\r\nconst limit = 3;\r\n\r\nconst Admin = ({ location }) => {\r\n\r\n    const [activeTabIndex, setActiveTabIndex] = useState(0);\r\n    const [requestType, setRequestType] = useState(requestTypeList[0]);\r\n    const [requestList, setRequestList] = useState([]);\r\n    const [isLast, setIsLast] = useState(false);\r\n    const [initialLoading, setInitialLoading] = useState(false);\r\n    const [loadingMore, setLoadingMore] = useState(false);\r\n    const [isOpenDetailModal, setDetailOpenModal] = useState(false);\r\n    const [isOpenFeedbackModal, setOpenFeedbackModal] = useState(false);\r\n    const [isOpenRestModal, setOpenRestModal] = useState(false);\r\n    const [isOpenFabOptions, setOpenFabOptions] = useState(false);\r\n    const [registry, setRegistry] = useState(null);\r\n    const [tabList, setTabList] = useState(requestStatuses);\r\n\r\n    const [takingRequest, setTakingRequest] = useState(false);\r\n    const [succesfulRequestTake, setSuccesfulRequestTake] = useState(false);\r\n    const [resigningRequest, setResigningRequest] = useState(false);\r\n    const [succesfulRequestResign, setSuccesfulRequestResign] = useState(false);\r\n    const [takingRest, setTakingRest] = useState(false);\r\n    const [succesfulRestTake, setSuccesfulRestTake] = useState(false);\r\n\r\n    const { logged } = useContext(AuthContext);\r\n    const { theme, toggleTheme } = useContext(ThemeContext);\r\n\r\n    const { services = [] } = getProfileStorage() || {};\r\n\r\n    const toggleFabOptions = () => {\r\n        setOpenFabOptions(!isOpenFabOptions);\r\n    }\r\n\r\n    const openRestModal = () => {\r\n        setOpenRestModal(true);\r\n    }\r\n\r\n    const closeRestModal = () => {\r\n        setOpenRestModal(false);\r\n    }\r\n\r\n    const openDetailModal = (request) => {\r\n        setRegistry(request);\r\n        setTakingRequest(false);\r\n        setSuccesfulRequestTake(false);\r\n        setDetailOpenModal(true);\r\n    }\r\n\r\n    const openFeedbackModal = (request) => {\r\n        setRegistry(request);\r\n        setOpenFeedbackModal(true);\r\n    }\r\n\r\n    const updRequestType = (val) => {\r\n        setAdminRequestType(val);\r\n        setRequestType(val);\r\n    }\r\n\r\n    const updActiveTabIndex = (val) => {\r\n        setAdminMainTabIndex(val);\r\n        setActiveTabIndex(val);\r\n    }\r\n\r\n    const takeARest = () => {\r\n        setTakingRest(true);\r\n        /*takeRest().then(({ error }) => {\r\n            if (!error) {\r\n                setTakingRest(false);\r\n\r\n            } else {\r\n                setTakingRest(false);\r\n\r\n            }\r\n        });*/\r\n    }\r\n\r\n    const getLastElement = (field) => {\r\n        return requestList[requestList.length - 1] ? requestList[requestList.length - 1][field] : undefined;\r\n    }\r\n\r\n    const getUidBasedOnRequestStatus = (reqStatus) => { // Las solicitudes marcadas como disponibles no necesitan filtro de id usuario\r\n        if (reqStatus == 'DISPONIBLE') {\r\n            return undefined;\r\n        } else {\r\n            return logged.uid;\r\n        }\r\n    }\r\n\r\n    const updateStatistics = (timeout = 0) => {\r\n        setTimeout(() => {\r\n            getStatistics([requestType.id, logged.uid + '-' + requestType.id])\r\n                .then(data => setTabList([\r\n                    !data[0].error ? { ...tabList[0], statistics: data[0].statistics.available } : { ...tabList[0], statistics: 0 },\r\n                    !data[1].error ? { ...tabList[1], statistics: data[1].statistics.taken } : { ...tabList[1], statistics: 0 },\r\n                    !data[1].error ? { ...tabList[2], statistics: data[1].statistics.done } : { ...tabList[1], statistics: 0 }\r\n                ]))\r\n        }, timeout);\r\n    }\r\n\r\n    const requestMoreData = () => {\r\n        if (!initialLoading && !loadingMore) {\r\n            setLoadingMore(true);\r\n            const requestStatus = tabList[activeTabIndex].id;\r\n            getRequests(getUidBasedOnRequestStatus(requestStatus), requestType.id, requestStatus, getLastElement('createdAt'), limit, requestStatus == 'TOMADO' || requestStatus == 'HECHO' ? 'desc' : 'asc')\r\n                .then(data => {\r\n                    setLoadingMore(false);\r\n                    setIsLast(data.isLast);\r\n                    setRequestList((state) => ([...state, ...data.list]));\r\n                })\r\n                .catch(error => {\r\n                    setLoadingMore(false);\r\n                    alert('Ha ocurrido un error. Vuelve a intentarlo más tarde (EC.RMD)');\r\n                });\r\n        }\r\n    }\r\n\r\n    const requestData = () => {\r\n        setInitialLoading(true);\r\n        const requestStatus = tabList[activeTabIndex].id;\r\n        getRequests(getUidBasedOnRequestStatus(requestStatus), requestType.id, requestStatus, undefined, limit, requestStatus == 'TOMADO' || requestStatus == 'HECHO' ? 'desc' : 'asc')\r\n            .then(data => {\r\n                updateStatistics();\r\n                setInitialLoading(false);\r\n                setIsLast(data.isLast);\r\n                setRequestList(data.list);\r\n            })\r\n            .catch(error => {\r\n                setInitialLoading(false);\r\n                alert('Ha ocurrido un error. Vuelve a intentarlo más tarde (EC.RD)');\r\n            });\r\n    }\r\n\r\n    const resignARequest = (requestId) => {\r\n        if (logged && logged.uid) {\r\n            setResigningRequest(true);\r\n            resignRequest(requestId)\r\n                .then(({ error }) => {\r\n                    if (!error) {\r\n                        getRequest(requestId).then(({ data, error }) => {\r\n                            setResigningRequest(false);\r\n                            if (!error) {\r\n                                updateStatistics(5000); // Actualizo las estadísticas\r\n                                setRegistry(data); // Establezco el nuevo registro actualizado\r\n                                setRequestList(requestList.filter(req => req.id !== data.id));// Elimino el registro de la lista actual\r\n                                setSuccesfulRequestResign(true);\r\n                            } else {\r\n                                setSuccesfulRequestResign(false);\r\n                                alert('Hubo un error al obtener el pedido. Recargue e intente otra vez');\r\n                            }\r\n                        })\r\n                    } else {\r\n                        alert('Hubo un error al renunciar a esta solicitud. Intenta otra vez');\r\n                        setResigningRequest(false);\r\n                        setSuccesfulRequestResign(false);\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n    const confirmRequest = (requestId) => {\r\n        if (logged && logged.uid) {\r\n            setTakingRequest(true);\r\n            takeRequest(requestId, requestType.id)\r\n                .then(({ error }) => {\r\n                    if (!error) {\r\n                        getRequest(requestId).then(({ data, error }) => {\r\n                            setTakingRequest(false);\r\n                            if (!error) {\r\n                                updateStatistics(5000); // Actualizo las estadísticas\r\n                                setRegistry(data); // Establezco el nuevo registro actualizado\r\n                                setRequestList(requestList.filter(req => req.id !== data.id));// Elimino el registro de la lista actual\r\n                                setSuccesfulRequestTake(true);\r\n                            } else {\r\n                                setSuccesfulRequestTake(false);\r\n                                alert('Hubo un error al obtener el pedido. Recargue e intente otra vez');\r\n                            }\r\n                        })\r\n                    } else {\r\n                        alert('Hubo un error al tomar esta solicitud. Intenta otra vez');\r\n                        setTakingRequest(false);\r\n                        setSuccesfulRequestTake(false);\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        const { viewFeedback } = queryString.parse(location.search);\r\n\r\n        if (viewFeedback) {\r\n            getRequest(viewFeedback).then(({ data, error }) => { // El segundo parámetro es para decidir si se solicitan detalles\r\n                if (!error) {\r\n                    openFeedbackModal(data);\r\n                    window.history.replaceState(null, '', '/admin');\r\n                } else {\r\n                    alert('No se encontró el archivo. Intente más tarde');\r\n                }\r\n            });\r\n        }\r\n\r\n    }, [location]);\r\n\r\n    useEffect(() => {\r\n        requestData();\r\n    }, [activeTabIndex, requestType.id]);\r\n\r\n    useEffect(() => {\r\n        setRequestType(getAdminRequestType(requestTypeList[0]));\r\n        setActiveTabIndex(getAdminMainTabIndex());\r\n        window.scrollTo(0, 0);\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <Navbar />\r\n\r\n            <DetailRequestModal\r\n                data={registry}\r\n                isOpen={isOpenDetailModal}\r\n                close={() => setDetailOpenModal(false)}\r\n                loading={takingRequest || resigningRequest}\r\n                success={succesfulRequestTake}\r\n                resignRequest={resignARequest}\r\n                takeRequest={confirmRequest} />\r\n\r\n            <FeedbackModal\r\n                isOpen={isOpenFeedbackModal}\r\n                close={() => setOpenFeedbackModal(false)}\r\n                title={registry?.title}\r\n                message={registry?.feedback?.message}\r\n                authorName={registry?.name.split(' ')[0]} />\r\n\r\n            {/*<RestConfirmationModal\r\n                isOpen={isOpenRestModal}\r\n                title='¿Deseas tomar un descanso?'\r\n                message='Hazlo si necesitas tomarte unos días sin atender pedidos. Al continuar, todos tus pedidos tomados se liberarán.'\r\n                confirm={takeARest}\r\n                close={closeRestModal} />*/}\r\n\r\n            <main className='main-body below-navbar main-body admin-color'>\r\n                <section className='container-xl section'>\r\n                    <div className='title-admin-container'>\r\n                        <h2 className='m-0'>¿Qué eliges para hoy?</h2>\r\n                        <div className='dropdown-container'>\r\n                            <DropdownImage\r\n                                stretch\r\n                                selectedItem={requestType}\r\n                                list={services.map(service => getServiceById(service))}\r\n                                select={updRequestType} />\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n                <section className='container-xl section'>\r\n                    <Tabs\r\n                        initialLoading={initialLoading}\r\n                        loadingMore={loadingMore}\r\n                        requestMoreData={requestMoreData}\r\n                        hasMore={!isLast}\r\n                        loader={<PuffLoader loading={true} css={override} size={100} />}\r\n                        activeIndex={activeTabIndex}\r\n                        select={updActiveTabIndex}\r\n                        tabs={tabList.map(tab => tab.name + ` (${tab.statistics ? tab.statistics : 0})`)}>\r\n                        <div>\r\n                            {\r\n                                requestList.map(request => (\r\n                                    <RequestCard\r\n                                        key={request.id}\r\n                                        showFeedback={openFeedbackModal}\r\n                                        select={openDetailModal}\r\n                                        data={request} />\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    </Tabs>\r\n                </section>\r\n            </main>\r\n            <div className='fab-button'>\r\n                <div className={`fab-button__menu-container ${isOpenFabOptions ? 'fab-button__menu-container-appear' : 'fab-button__menu-container-dissappear'}`}>\r\n                    <div onClick={toggleTheme} className='fab-button__menu-item'>\r\n                        <FontAwesomeIcon icon={theme == 'dark' ? faSun : faMoon} />\r\n                    </div>\r\n                    <div onClick={openRestModal} className='fab-button__menu-item'>\r\n                        <FontAwesomeIcon icon={faCoffee} />\r\n                    </div>\r\n                </div>\r\n                <div onClick={toggleFabOptions} className='fab-button__circle'>\r\n                    {' '}\r\n                    <FontAwesomeIcon icon={faPlus} className={isOpenFabOptions ? 'rotate-45' : ''} />\r\n                </div>\r\n            </div>\r\n            <Footer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Admin;","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\login.js",["367"],"import React, { useState, useEffect } from 'react'\r\nimport Navbar from '../componentes/navbar';\r\nimport Footer from '../componentes/footer/footer';\r\nimport ImgColumpio from '../img/swinging.svg';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { login } from '../api';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSignInAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { setProfileStorage } from '../helpers/userStorage';\r\n\r\nconst Login = () => {\r\n\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    let history = useHistory();\r\n\r\n    const updEmail = (e) => {\r\n        setEmail(e.target.value);\r\n    }\r\n\r\n    const updPassword = (e) => {\r\n        setPassword(e.target.value);\r\n    }\r\n\r\n    const loginUser = (e) => {\r\n        e.preventDefault();\r\n        if (!checkErrors()) {\r\n            login(email, password)\r\n                .then(({ user, profile, error }) => {\r\n                    if (user) {\r\n                        setProfileStorage(profile);\r\n                        history.push('/admin');\r\n                    } else {\r\n                        alert(error);\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n    const checkErrors = () => {\r\n        if (!(/^(?!\\s*$).{1,50}/.test(email))) {\r\n            alert('Tu correo debe tener de 1 a 50 caracteres');\r\n            return true;\r\n        }\r\n        else if (!(/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/).test(email)) {\r\n            alert('Introduce un correo válido');\r\n            return true;\r\n        }\r\n\r\n        if (!(/^(?!\\s*$).{1,50}/.test(password))) {\r\n            alert('Tu contraseña debe tener de 1 a 50 caracteres');\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <Navbar />\r\n            <main className='main-body below-navbar colored-background'>\r\n                <section className='container-xl mt-5'>\r\n                    <div className='login-container position-relative'>\r\n                        <img src={ImgColumpio} alt='img-fondo' className='img-fondo-login d-none d-md-block' />\r\n                        <form onSubmit={loginUser} className='floating-form'>\r\n                            <h2 className='m-0'>Ingresa a Temple Luna</h2>\r\n                            <p className='mb-3'>Si quieres pertenecer a nosotros, escríbenos por el grupo</p>\r\n                            <div className='form-group'>\r\n                                <label htmlFor=\"txtUsuario\">Correo</label>\r\n                                <input minLength=\"1\" maxLength=\"50\" type=\"email\" value={email} onChange={updEmail} id=\"txtUsuario\" placeholder=\"Ingresa tu correo\" />\r\n                            </div>\r\n                            <div className='form-group'>\r\n                                <label htmlFor=\"txtContrasena\">Contraseña</label>\r\n                                <input minLength=\"1\" maxLength=\"50\" type=\"password\" value={password} onChange={updPassword} id=\"txtContrasena\" placeholder=\"****************\" />\r\n                            </div>\r\n                            <button onClick={loginUser} className='button button-green stretch'>\r\n                                <span className='d-inline'>\r\n                                    Entrar\r\n                                    </span>\r\n                                {' '}\r\n                                <FontAwesomeIcon icon={faSignInAlt} size='xl' />\r\n                            </button>\r\n                        </form>\r\n                    </div>\r\n                </section>\r\n            </main>\r\n            <Footer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\solicitud-critica.js",["368","369","370","371","372","373"],"import React, { useState, useEffect } from 'react'\r\nimport Footer from '../componentes/footer/footer';\r\nimport Navbar from '../componentes/navbar';\r\nimport DropdownImage from '../componentes/dropdown-image';\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport Steps from '../componentes/forms/forms-steps';\r\nimport StepManager from '../componentes/forms/step-manager/step-manager';\r\nimport Fade from 'react-reveal/Fade';\r\nimport ImgTematica from '../img/cri-req.svg';\r\nimport HelmetMetaData from \"../componentes/helmet\";\r\nimport { Link } from 'react-router-dom';\r\nimport { extractLink, toName, toSentence } from '../helpers/functions';\r\nimport { isNameInvalid, isAgeInvalid, isPhoneInvalid, isEmailInvalid, isLinkInvalid, isTitleInvalid, isAboutInvalid, isIntentionInvalid } from '../helpers/validators';\r\nimport { saveRequest } from '../api';\r\nimport { useStepObserver } from '../hooks/useStepObserver';\r\nimport { css } from \"@emotion/core\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faAngleLeft, faAngleRight, faCheck, faCheckCircle, faHome, faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { contactTypes, critiquePoints } from '../data/data';\r\nimport { faWhatsapp } from '@fortawesome/free-brands-svg-icons';\r\n\r\nconst steps = ['¡Hola!', 'Contacto', 'Obra', 'Contenido'];\r\nconst chkPoints = critiquePoints;\r\n\r\nconst overrideSpinnerInline = css`\r\n  display: inline-block;\r\n  vertical-align: middle;\r\n`;\r\n\r\nconst Solicitud = () => {\r\n\r\n    const [activeIndex, setActiveIndex] = useState(0);\r\n    const [loading, setLoading] = useState(false); // Determina si se está enviando el form\r\n    const [success, setSuccess] = useState(true); // Determina si se envío el form sin errores\r\n    const { canGoBackwards, isLast } = useStepObserver(activeIndex, steps.length);\r\n\r\n    const [name, setName] = useState('');\r\n    const [age, setAge] = useState('');\r\n    const [phone, setPhone] = useState('');\r\n    const [messengerType, setMessengerType] = useState(contactTypes[0]);\r\n    const [email, setEmail] = useState('');\r\n    const [link, setLink] = useState('');\r\n    const [title, setTitle] = useState('');\r\n    const [about, setAbout] = useState('');\r\n    const [intention, setIntention] = useState('');\r\n    const [points, setPoints] = useState([chkPoints[0].id]);\r\n\r\n    const updName = (e) => {\r\n        setName(e.target.value);\r\n    }\r\n\r\n    const updAge = (e) => {\r\n        setAge(e.target.value);\r\n    }\r\n\r\n    const updPhone = (e) => {\r\n        setPhone(e.target.value);\r\n    }\r\n\r\n    const updMessengerType = (val) => {\r\n        setMessengerType(val);\r\n    }\r\n\r\n    const updEmail = (e) => {\r\n        setEmail(e.target.value);\r\n    }\r\n\r\n    const updLink = (e) => {\r\n        setLink(e.target.value);\r\n    }\r\n\r\n    const updTitle = (e) => {\r\n        setTitle(e.target.value);\r\n    }\r\n\r\n    const updAbout = (e) => {\r\n        setAbout(e.target.value);\r\n    }\r\n\r\n    const updIntention = (e) => {\r\n        setIntention(e.target.value);\r\n    }\r\n\r\n    const selectPoint = (id) => {\r\n        if (includesPoint(id)) {\r\n            if (id != 'INTENCION') {\r\n                setPoints(points.filter(p => p != id));\r\n            }\r\n        } else {\r\n            setPoints([...points, id]);\r\n        }\r\n    }\r\n\r\n    const previous = (e) => {\r\n        e.preventDefault();\r\n        navigateTo(activeIndex - 1);\r\n    }\r\n\r\n    const next = (e) => {\r\n        e.preventDefault();\r\n        navigateTo(activeIndex + 1);\r\n    }\r\n\r\n    const send = async (e) => {\r\n        e.preventDefault();\r\n        if (!checkErrors()) {\r\n            setLoading(true);\r\n            saveChanges();\r\n        }\r\n    }\r\n\r\n    const saveChanges = () => {\r\n        const data = {\r\n            name: toName(name.trim()),\r\n            age: parseInt(age),\r\n            phone: phone.trim(),\r\n            messengerType: messengerType.type,\r\n            email: email.trim(),\r\n            title: toSentence(title.trim()),\r\n            link: extractLink(link.trim()),\r\n            about: about.trim(),\r\n            intention: intention.trim(),\r\n            points,\r\n            type: 'CRITICA',\r\n            status: 'DISPONIBLE',\r\n            active: 1\r\n        };\r\n\r\n        saveRequest(data).then(() => {\r\n            window.scrollTo(0, 0);\r\n            setLoading(false);\r\n            setSuccess(true);\r\n        });\r\n    }\r\n\r\n    const checkErrors = () => {\r\n\r\n        let error = (isNameInvalid(name)\r\n            || isAgeInvalid(age)\r\n            || isPhoneInvalid(phone)\r\n            || isEmailInvalid(email)\r\n            || isLinkInvalid(link)\r\n            || isTitleInvalid(title)\r\n            || isAboutInvalid(about)\r\n            || isIntentionInvalid(intention));\r\n\r\n        if (error) {\r\n            alert(error);\r\n            return true;\r\n        };\r\n\r\n        return false;\r\n    }\r\n\r\n    const includesPoint = (pointId) => {\r\n        return points.find(p => p == pointId);\r\n    }\r\n\r\n    const navigateTo = (index) => {\r\n        setActiveIndex(index);\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n        setSuccess(false);\r\n    }, [activeIndex]);\r\n\r\n    return (\r\n        <div>\r\n            <HelmetMetaData title=\"Críticas - Temple Luna\" description=\"Estamos dispuestos a ayudarte con aquellas obra que tanto amas. ¡Es gratis!\" />\r\n            <Navbar />\r\n            <main className='main-body below-navbar colored-background'>\r\n                <section className='container-xl section position-relative z-3'>\r\n                    <h2 className='mb-0'>Pide una crítica</h2>\r\n                    <p className='txt-responsive-form'>Y te la enviaremos a tu correo en PDF</p>\r\n                </section>\r\n                <section className='container-xl mt-2 position-relative'>\r\n                    <img src={ImgTematica} alt='img-fondo' className='img-fondo-formulario' />\r\n                    <div className='floating-form'>\r\n                        {\r\n                            success\r\n                                ?\r\n                                <div className='form-container text-align-center'>\r\n                                    <Fade bottom>\r\n                                        <FontAwesomeIcon color={'#3DE58D'} icon={faCheckCircle} style={{ fontSize: '8rem' }} />\r\n                                        <h3 className='mt-1 mb-1'>Listo</h3>\r\n                                    </Fade>\r\n                                    <p className='txt-responsive-form m0-auto'>Cuando terminemos tu pedido, lo recibirás en tu correo</p>\r\n                                    <div className='form-buttons-container mt-3'>\r\n                                        <Link to={'inicio'} className='button button-green m0-auto'>\r\n                                            <FontAwesomeIcon icon={faHome} size='xl' />\r\n                                            {' '}\r\n                                            <span className='d-none d-md-inline'>\r\n                                                Regresar\r\n                                            </span>\r\n                                        </Link>\r\n                                    </div>\r\n                                </div>\r\n                                :\r\n                                <>\r\n                                    <Steps\r\n                                        activeIndex={activeIndex}\r\n                                        navigateTo={navigateTo}\r\n                                        steps={steps} />\r\n                                    <div className='form-container'>\r\n                                        <form>\r\n                                            <StepManager currentIndex={activeIndex}>\r\n                                                <div className='step-0'>\r\n                                                    <div className='form-group mb-0'>\r\n                                                        <p><b>Gracias</b> por elegir a <b>Temple Luna</b>. ¡Estamos seguros de que te va a encantar!<br /><br />\r\n                                                        Antes de continuar, te pedimos que leas algunas <b>preguntas frecuentes:</b><br /><br />\r\n\r\n                                                            <b>1- ¿Qué solicitamos?</b><br /><br />\r\n                                                            Solicitamos tus datos de contacto para poder <b>(1)</b> enviarte el trabajo final y <b>(2)</b> contactarte si es que necesitamos\r\n                                                            más información sobre tu pedido.<br /><br />\r\n\r\n                                                            <b>2- ¿Qué obtendré?</b><br /><br />\r\n                                                            Obtendrás un documento en <b>PDF</b> con el resultado de tu pedido. Ese documento será <b>enviado a tu correo</b>. Contendrá,\r\n                                                            además, un <b>código QR</b> de autenticidad y un <b>link</b> que podrás usar para compartirlo. Puedes ver un ejemplo\r\n                                                            <b> <a target='_blank' href='https://templeluna.app/prev_resultado?id=Ik52xvRTdBelcdRKQBKt&t=Remordimiento&test=true'>aquí</a></b>.<br /><br />\r\n\r\n                                                            <b>3- ¿Hay condiciones?</b><br /><br />\r\n                                                            - Tu escrito debe estar <b>completo</b> y no debe incluir algún <b>costo monetario</b> para poder leerlo <b>nosotros</b>. Caso contrario, el pedido será <b>anulado</b>.<br />\r\n                                                            - El link a tu obra quedará <b>público</b> en el perfil del voluntario. No envíes <b>obras inéditas</b> o <b>que aún no pienses publicar</b>.<br />\r\n                                                            - <b>Finalmente</b>, el artista podrá usar la crítica su <b>portafolio</b>.<br /><br />\r\n\r\n                                                            <b>4- ¿Cuál es el costo?</b><br /><br />\r\n                                                            Por el momento, este servicio es <b>gratuito</b>. Cuando no lo sea, <b>lo dejaremos claro</b>.<br /><br />\r\n\r\n                                                            <b>5- ¿Quienes atienden los pedidos?</b><br /><br />\r\n                                                            El equipo está conformado por <b>voluntarios</b>, los cuales han tenido que demostrar <b>experiencia en críticas</b>.<br /><br />\r\n\r\n                                                            <b>6- ¿Cómo puedo agradecer?</b><br /><br />\r\n                                                            <b>Comparte</b> nuestro trabajo en redes. Tendrás un <b>botón de \"Compartir\"</b> cuando recibas tu pedido. Eso nos ayudaría <b>mucho</b>.<br /><br />\r\n\r\n                                                            <b>7- ¿Cómo puedo ser voluntario?</b><br /><br />\r\n                                                            Escríbenos por el <b> <a target='_blank' href='https://www.facebook.com/groups/templeluna/'>grupo oficial</a></b> y podemos coordinar una <b>entrevista con el creador</b>.\r\n                                                        </p>\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <p>Presiona siguiente para continuar.</p>\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className='step-1'>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtNombres\">¿Cómo te llamas?</label>\r\n                                                        <input minLength=\"1\" maxLength=\"50\" type=\"text\" value={name} onChange={updName} id=\"txtNombres\" placeholder=\"Ingresa tus nombres\" />\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtEdad\">¿Qué edad tienes?</label>\r\n                                                        <input type=\"number\" min={10} max={99} value={age} onChange={updAge} id=\"txtEdad\" placeholder=\"Ingresa tu edad\" />\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtNumero\">Bríndanos un número para consultas (con código de país)</label>\r\n                                                        <div className='cbo-text'>\r\n                                                            <DropdownImage\r\n                                                                selectedItem={messengerType}\r\n                                                                list={contactTypes}\r\n                                                                select={updMessengerType} />\r\n                                                            <input type=\"text\" value={phone} onChange={updPhone} id=\"txtNumero\" placeholder=\"Ej: +51 999 999 999\" />\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtCorreo\">Bríndanos un correo para enviarte el trabajo</label>\r\n                                                        <input minLength=\"6\" maxLength=\"100\" type=\"email\" value={email} onChange={updEmail} id=\"txtCorreo\" placeholder=\"Ingresa tu correo\" />\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className='step-2'>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtTitulo\">Título de tu obra</label>\r\n                                                        <input minLength=\"1\" maxLength=\"100\" type=\"text\" value={title} onChange={updTitle} id=\"txtTitulo\" placeholder=\"Ejemplo: La gran infidelidad\" />\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtLink\">Link de tu obra</label>\r\n                                                        <input minLength=\"1\" maxLength=\"500\" type=\"text\" value={link} onChange={updLink} id=\"txtLink\" placeholder=\"Ingresa el link\" />\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className='step-3'>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtAcerca\">En general ¿De qué trata tu obra?</label>\r\n                                                        <textarea minLength=\"1\" maxLength=\"1000\" rows=\"4\" value={about} onChange={updAbout} id=\"txtAcerca\" placeholder=\"Ejemplo: Mi obra trata sobre las ocurrencias vividas con mi primer amor y el dolor causado por su posterior traición...\"></textarea>\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtIntencion\">¿Qué intención deseas transmitir?</label>\r\n                                                        <textarea minLength=\"1\" maxLength=\"1000\" rows=\"4\" value={intention} onChange={updIntention} id=\"txtIntencion\" placeholder=\"Ejemplo: Deseo transmitir miedo e incertidumbre, por medio de una historia ambientada en una pandemia mundial...\"></textarea>\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtLink\">¿Qué puntos tocamos en la crítica?</label>\r\n                                                        {\r\n                                                            chkPoints.map(point => {\r\n                                                                const included = includesPoint(point.id);\r\n                                                                return (\r\n                                                                    <div key={point.id} onClick={() => selectPoint(point.id)} className={`chkTag ${included ? 'active' : ''}`}>\r\n                                                                        {\r\n                                                                            included\r\n                                                                                ?\r\n                                                                                <FontAwesomeIcon color={'white'} icon={faCheck} style={{ fontSize: '1.6rem' }} />\r\n                                                                                :\r\n                                                                                <FontAwesomeIcon color={'#adadad'} icon={faPlus} style={{ fontSize: '1.6rem' }} />\r\n                                                                        }\r\n                                                                        {' '}\r\n                                                                        {point.name}\r\n                                                                    </div>\r\n                                                                )\r\n                                                            })\r\n                                                        }\r\n                                                    </div>\r\n                                                </div>\r\n                                            </StepManager>\r\n                                            <div className='form-buttons-container'>\r\n                                                {\r\n                                                    canGoBackwards && !loading\r\n                                                    &&\r\n                                                    <button onClick={previous} className='button button-green'>\r\n                                                        <FontAwesomeIcon icon={faAngleLeft} size='xl' />\r\n                                                        {' '}\r\n                                                        <span className='d-none d-md-inline'>\r\n                                                            Anterior\r\n                                                    </span>\r\n                                                    </button>\r\n                                                }\r\n                                                {\r\n                                                    loading\r\n                                                        ?\r\n                                                        <span className='button button-green justify-self-right'>\r\n                                                            Enviando\r\n                                                            {' '}\r\n                                                            <ClipLoader color={'#fff'} loading={true} css={overrideSpinnerInline} size={22} />\r\n                                                        </span>\r\n                                                        :\r\n                                                        isLast\r\n                                                            ?\r\n                                                            <button onClick={send} className='button button-green justify-self-right'>\r\n                                                                <span className='d-none d-md-inline'>\r\n                                                                    Enviar\r\n                                                    </span>\r\n                                                                {' '}\r\n                                                                <FontAwesomeIcon icon={faCheck} size='xl' />\r\n                                                            </button>\r\n                                                            :\r\n                                                            <button onClick={next} className='button button-green justify-self-right'>\r\n                                                                <span className='d-none d-md-inline'>\r\n                                                                    Siguiente\r\n                                                    </span>\r\n                                                                {' '}\r\n                                                                <FontAwesomeIcon icon={faAngleRight} size='xl' />\r\n                                                            </button>\r\n                                                }\r\n                                            </div>\r\n                                        </form>\r\n                                    </div>\r\n                                </>\r\n                        }\r\n                    </div>\r\n\r\n                </section>\r\n            </main>\r\n            <div className='fab-button'>\r\n                <a href={`https://web.whatsapp.com/send?phone=${process.env.REACT_APP_CONTACT_WSP}`} target='_blank' className='fab-button__circle fab-button__circle-wsp'>\r\n                    {' '}\r\n                    <FontAwesomeIcon icon={faWhatsapp} className='icon' />\r\n                </a>\r\n            </div>\r\n            <Footer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Solicitud;","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\inicio.js",["374"],"import React from 'react';\r\nimport Carrousel from '../componentes/stories-carrousel/carrousel';\r\nimport Tag from '../componentes/tag';\r\nimport Footer from '../componentes/footer/footer';\r\nimport Fade from 'react-reveal/Fade';\r\nimport { Panorama } from '../componentes/home-panorama/panorama';\r\nimport { Link } from \"react-router-dom\";\r\nimport { useScrollOffset } from '../hooks/useScrollOffset';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faAngleRight } from '@fortawesome/free-solid-svg-icons';\r\nimport Img1 from '../img/img-seccion-1.PNG';\r\nimport Img2 from '../img/img-seccion-2.PNG';\r\nimport Img3 from '../img/img-seccion-3.PNG';\r\nimport ImgLentes from '../img/lentes.svg';\r\nimport ImgPincel from '../img/pincel.svg';\r\nimport { faWhatsapp } from '@fortawesome/free-brands-svg-icons';\r\n\r\nconst Inicio = () => {\r\n\r\n    const { hasScrolledToTopOffset } = useScrollOffset(0, 600);\r\n\r\n    return (\r\n        <div>\r\n            <Panorama />\r\n            <main className='main-body' id='critique-block'>\r\n\r\n                <Fade bottom>\r\n                    <section className='container-xl section section-body'>\r\n                        <div className='main-section'>\r\n                            <div className='img-container img-container-lentes'>\r\n                                <img src={ImgLentes} className='img-lentes' alt='img-lentes' />\r\n                            </div>\r\n                            <h3>Críticas</h3>\r\n                            <p>Todos los críticos de historias ahora están en un mismo lugar.\r\n                                Solicita una crítica <Link to='/sol_critica'>aquí.</Link> ¡Es gratis!</p>\r\n                        </div>\r\n                        <div className='main-section'>\r\n                            <div className='img-container'>\r\n                                <img src={ImgPincel} className='img-pincel' alt='img-pincel' />\r\n                            </div>\r\n                            <h3>Diseños</h3>\r\n                            <p>Portadas, banners para posts y ahora ¡Cuentas regresivas!\r\n                                Pide tu diseño <Link to='/sol_diseno'>aquí.</Link></p>\r\n                        </div>\r\n                    </section>\r\n                </Fade>\r\n\r\n                <Fade bottom>\r\n                    <section className='container-xl section section-body'>\r\n                        <h2 className='text-align-center title-sub-section'>¿Cuál es nuestra propuesta?</h2>\r\n                    </section>\r\n                    <section className='container-xl section section-body'>\r\n                        <div className='text-section'>\r\n                            <h3>Críticas y diseños en un mismo lugar</h3>\r\n                            <p>¿Estás escribiendo una historia? Reunimos a todos los artistas que aman diseñar y hacer\r\n                                críticas constructivas para que tu obra destaque rápidamente entre los lectores.</p>\r\n                        </div>\r\n                        <div className='img-section'>\r\n                            <img src={Img3} className='img-colaboration' alt='img-colaboracion' />\r\n                        </div>\r\n                    </section>\r\n                </Fade>\r\n\r\n                <Fade bottom>\r\n                    <section className='container-xl section section-body'>\r\n                        <div className='text-section'>\r\n                            <h3>Disfrutarás encontrando los mejores relatos</h3>\r\n                            <p>Encontrar una historia será tan divertido como hacer un swipe con el dedo. Adios a los clichés.\r\n                            Te mostraremos lo que te gusta.\r\n                            </p>\r\n                            <Tag />\r\n                        </div>\r\n                        <div className='img-section order-1'>\r\n                            <img src={Img2} className='img-colaboration' alt='img-colaboracion' />\r\n                        </div>\r\n                    </section>\r\n                </Fade>\r\n\r\n                <Fade bottom>\r\n                    <section className='container-xl section section-body'>\r\n                        <div className='text-section'>\r\n                            <h3>Difusión al instante</h3>\r\n                            <p>Olvida las típicas páginas de lectura online. Promociona tus obras con un video, un meme o un estado.\r\n                                El límite será tu imaginación.</p>\r\n                            <Tag />\r\n                        </div>\r\n                        <div className='img-section'>\r\n                            <img src={Img1} className='img-colaboration' alt='img-colaboracion' />\r\n                        </div>\r\n                    </section>\r\n                </Fade>\r\n\r\n                <Fade bottom>\r\n                    <section className='container-xl section mb-5'>\r\n                        <h3 className='text-align-center title-sub-section'>¡Seremos millones compartiendo las mejores historias!</h3>\r\n                        <Carrousel />\r\n                    </section>\r\n                </Fade>\r\n\r\n            </main>\r\n\r\n            <div className='fab-button'>\r\n                <div className={`fab-button__pill fab-button__pill-color-wsp ${!hasScrolledToTopOffset ? 'fab-button__pill-dissappear' : 'fab-button__pill-appear'} `}>\r\n                    <span className='fab-button__caption'>\r\n                        {'¿Alguna consulta? '}\r\n                        <FontAwesomeIcon icon={faAngleRight} />\r\n                    </span>\r\n                </div>\r\n                <a href={`https://web.whatsapp.com/send?phone=${process.env.REACT_APP_CONTACT_WSP}`} target='_blank' className='fab-button__circle fab-button__circle-wsp'>\r\n                    {' '}\r\n                    <FontAwesomeIcon icon={faWhatsapp} className='icon' />\r\n                </a>\r\n            </div>\r\n\r\n            <Footer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Inicio;","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\prep_critica.js",["375"],"import React, { useState, useEffect } from 'react'\r\nimport Footer from '../componentes/footer/footer';\r\nimport Navbar from '../componentes/navbar';\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport Fade from 'react-reveal/Fade';\r\nimport { css } from \"@emotion/core\";\r\nimport { setRequestDone } from '../api';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowLeft, faPaperPlane, faCheckCircle, faHome, faEye } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst overrideSpinnerInline = css`\r\n  display: inline-block;\r\n  vertical-align: middle;\r\n`;\r\n\r\nconst Preparation = ({ location }) => {\r\n\r\n    const { id, title, about, link, type, points } = location.state.data;\r\n\r\n    const [success, setSuccess] = useState(false);\r\n    const [urlResult, setUrlResult] = useState('');\r\n    const [loading, setLoading] = useState(false); // Determina si se está enviando el form\r\n    const [intention, setIntention] = useState('');\r\n    const [hook, setHook] = useState('');\r\n    const [ortography, setOrtography] = useState('');\r\n    const [improvement, setImprovement] = useState('');\r\n\r\n    const history = useHistory();\r\n\r\n    const intentionRequested = points.includes('INTENCION');\r\n    const hookRequested = points.includes('ENGANCHE');\r\n    const ortographyRequested = points.includes('ORTOGRAFIA');\r\n\r\n\r\n    const updIntention = (e) => {\r\n        setIntention(e.target.value);\r\n    }\r\n\r\n    const updHook = (e) => {\r\n        setHook(e.target.value);\r\n    }\r\n\r\n    const updOrtography = (e) => {\r\n        setOrtography(e.target.value);\r\n    }\r\n\r\n    const updImprovement = (e) => {\r\n        setImprovement(e.target.value);\r\n    }\r\n\r\n    const goBackwards = () => {\r\n        history.push('/admin');\r\n    }\r\n\r\n    const send = async (e) => {\r\n        e.preventDefault();\r\n        if (!checkErrors()) {\r\n            setLoading(true);\r\n            saveChanges();\r\n        }\r\n    }\r\n\r\n    const saveChanges = () => {\r\n        const data = {\r\n            requestId: id,\r\n            title: title.trim(),\r\n            type: type.trim(),\r\n            intention: intention.trim(),\r\n            hook: hook.trim(),\r\n            ortography: ortography.trim(),\r\n            improvement: improvement.trim(),\r\n        };\r\n\r\n        setRequestDone(data).then(result => {\r\n            window.scrollTo(0, 0);\r\n            setLoading(false);\r\n            if (!result.error) {\r\n                setUrlResult(result.url);\r\n                setSuccess(true);\r\n            } else {\r\n                alert(result.error);\r\n                setSuccess(false);\r\n            }\r\n        });\r\n    }\r\n\r\n    const checkErrors = () => {\r\n\r\n        // Name\r\n        if (intentionRequested) {\r\n            if (!(/^(?!\\s*$).{1,5000}/.test(intention))) {\r\n                alert('La intención de la obra debe tener de 1 a 5000 caracteres');\r\n                return true;\r\n            }\r\n        }\r\n\r\n        // Hooks\r\n        if (hookRequested) {\r\n            if (!(/^(?!\\s*$).{1,5000}/.test(hook))) {\r\n                alert('En enganche de la obra debe tener de 1 a 5000 caracteres');\r\n                return true;\r\n            }\r\n        }\r\n\r\n        // Ortography\r\n        if (ortographyRequested) {\r\n            if (!(/^(?!\\s*$).{1,5000}/.test(ortography))) {\r\n                alert('La ortografía de la obra debe tener de 1 a 5000 caracteres');\r\n                return true;\r\n            }\r\n        }\r\n\r\n        // Improvement (optional)\r\n        if (improvement) {\r\n            if (!(/^(?!\\s*$).{1,5000}/.test(improvement))) {\r\n                alert('El consejo para el autor debe tener de 1 a 5000 caracteres');\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n        setSuccess(false);\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <Navbar />\r\n            <main className='main-body below-navbar colored-background'>\r\n                <section className='container-xl section prep-req-container'>\r\n                    <div className='flex-align-center mb-2'>\r\n                        <FontAwesomeIcon onClick={goBackwards} className='mr-1' icon={faArrowLeft} size='lg' />\r\n                        <h4 className='request-prep-title m-0 clamp clamp-2'>Crítica: {title}</h4>\r\n                    </div>\r\n                    {\r\n                        success\r\n                            ?\r\n                            <div className='form-container text-align-center'>\r\n                                <Fade bottom>\r\n                                    <FontAwesomeIcon color={'#3DE58D'} icon={faCheckCircle} style={{ fontSize: '8rem' }} />\r\n                                    <h3 className='mt-1 mb-1'>¡Crítica enviada!</h3>\r\n                                </Fade>\r\n                                <p className='txt-responsive-form m0-auto'>Tu experiencia ha aumentado :)</p>\r\n                                <div className='button-container mt-3'>\r\n                                    <button onClick={() => window.open(urlResult, '_blank')} className='button button-light-purple button-option-request ml-auto'>\r\n                                        <FontAwesomeIcon icon={faEye} size='1x' />\r\n                                        {' '}\r\n                                                Ver resultado\r\n                                        </button>\r\n                                    <button onClick={goBackwards} className='button button-blue button-option-request mr-auto'>\r\n                                        <FontAwesomeIcon icon={faHome} size='1x' />\r\n                                        {' '}\r\n                                                Regresar\r\n                                        </button>\r\n                                </div>\r\n                            </div>\r\n                            :\r\n                            <>\r\n                                <div className=''>\r\n                                    <p>{about}</p>\r\n                                    <h4>Link de la obra</h4>\r\n                                    {\r\n                                        link\r\n                                            ?\r\n                                            <a className='clamp clamp-1' target='_blank' href={link}>{link}</a>\r\n                                            :\r\n                                            <p>No existe link</p>\r\n                                    }\r\n                                    {\r\n                                        intentionRequested\r\n                                        &&\r\n                                        <div className='form-group'>\r\n                                            <h4>¿Se logró transmitir la idea?</h4>\r\n                                            <textarea minLength=\"1\" maxLength=\"5000\" rows=\"4\" value={intention} onChange={updIntention} id=\"txtIntencion\" placeholder=\"Ejemplo: Siento que la idea se transmite correctamente, porque genera en el lector una sensación de...\"></textarea>\r\n                                        </div>\r\n                                    }\r\n                                    {\r\n                                        hookRequested\r\n                                        &&\r\n                                        <div className='form-group'>\r\n                                            <h4>¿Qué tal fue el enganche de la obra?</h4>\r\n                                            <textarea minLength=\"1\" maxLength=\"5000\" rows=\"4\" value={hook} onChange={updHook} id=\"txtEnganche\" placeholder=\"Ejemplo: Considero que tiene un enganche bueno, pero no es suficiente. Debería enganchar mucho desde un inicio...\"></textarea>\r\n                                        </div>\r\n                                    }\r\n                                    {\r\n                                        ortographyRequested\r\n                                        &&\r\n                                        <div className='form-group'>\r\n                                            <h4>¿Qué tal fue la ortografía?</h4>\r\n                                            <textarea minLength=\"1\" maxLength=\"5000\" rows=\"4\" value={ortography} onChange={updOrtography} id=\"txtOrtografia\" placeholder=\"Ejemplo: La ortografía fue excelente. Haces un correcto uso de las comas, los puntos y las tildes...\"></textarea>\r\n                                        </div>\r\n                                    }\r\n                                    <div className='form-group'>\r\n                                        <h4>¿Algún consejo para que el autor pueda mejorar? (Opcional)</h4>\r\n                                        <textarea minLength=\"1\" maxLength=\"5000\" rows=\"4\" value={improvement} onChange={updImprovement} id=\"txtOrtografia\" placeholder=\"Ejemplo: La ortografía fue excelente. Haces un correcto uso de las comas, los puntos y las tildes...\"></textarea>\r\n                                    </div>\r\n                                </div>\r\n                                <div className='form-buttons-container mt-3'>\r\n                                    {\r\n                                        loading\r\n                                            ?\r\n                                            <span className='button button-green justify-self-right'>\r\n                                                Enviando\r\n                                {' '}\r\n                                                <ClipLoader color={'#fff'} loading={true} css={overrideSpinnerInline} size={22} />\r\n                                            </span>\r\n                                            :\r\n                                            <button onClick={send} className='button button-green justify-self-right'>\r\n                                                <FontAwesomeIcon icon={faPaperPlane} size='1x' />\r\n                                                {' '}\r\n                                                <span className='d-none d-md-inline'>\r\n                                                    Enviar\r\n                                                </span>\r\n                                            </button>\r\n                                    }\r\n                                </div>\r\n                            </>\r\n                    }\r\n                </section>\r\n            </main>\r\n            <Footer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Preparation;","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\solicitud-diseno.js",["376","377","378","379","380"],"import React, { useRef, useState, useEffect } from 'react'\r\nimport Footer from '../componentes/footer/footer';\r\nimport Navbar from '../componentes/navbar';\r\nimport DropdownImage from '../componentes/dropdown-image';\r\nimport ImgTematica from '../img/des-req.png';\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport Steps from '../componentes/forms/forms-steps';\r\nimport StepManager from '../componentes/forms/step-manager/step-manager';\r\nimport Fade from 'react-reveal/Fade';\r\nimport HelmetMetaData from \"../componentes/helmet\";\r\nimport { Link } from 'react-router-dom';\r\nimport { extractLink, toName, toSentence } from '../helpers/functions';\r\nimport { isNameInvalid, isAgeInvalid, isPhoneInvalid, isEmailInvalid, isLinkInvalid, isTitleInvalid, isAuthorInvalid, isIntentionInvalid } from '../helpers/validators';\r\nimport { uploadImage, saveRequest } from '../api';\r\nimport { useStepObserver } from '../hooks/useStepObserver';\r\nimport { css } from \"@emotion/core\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faAngleLeft, faAngleRight, faCheck, faCheckCircle, faHome } from '@fortawesome/free-solid-svg-icons';\r\nimport { designTypes, contactTypes } from '../data/data';\r\nimport { faWhatsapp } from '@fortawesome/free-brands-svg-icons';\r\n\r\nconst steps = ['¡Hola!', 'Contacto', 'Tipo', 'Trasfondo'];\r\nconst maxFileSize = 5242880;\r\n\r\nconst overrideSpinnerInline = css`\r\n  display: inline-block;\r\n  vertical-align: middle;\r\n`;\r\n\r\nconst Solicitud = () => {\r\n\r\n    const refBoceto = useRef(null);\r\n\r\n    const [activeIndex, setActiveIndex] = useState(0);\r\n    const [loading, setLoading] = useState(false); // Determina si se está enviando el form\r\n    const [success, setSuccess] = useState(true); // Determina si se envío el form sin errores\r\n    const { canGoBackwards, isLast } = useStepObserver(activeIndex, steps.length);\r\n\r\n    const [name, setName] = useState('');\r\n    const [age, setAge] = useState('');\r\n    const [phone, setPhone] = useState('');\r\n    const [messengerType, setMessengerType] = useState(contactTypes[0]);\r\n    const [email, setEmail] = useState('');\r\n    const [designType, setDesignType] = useState(designTypes[1]);\r\n    const [link, setLink] = useState('');\r\n    const [days, setDays] = useState(1);\r\n    const [title, setTitle] = useState('');\r\n    const [author, setAuthor] = useState('');\r\n    const [intention, setIntention] = useState('');\r\n    const [imgSample, setImgSample] = useState(null);\r\n\r\n    const updName = (e) => {\r\n        setName(e.target.value);\r\n    }\r\n\r\n    const updAge = (e) => {\r\n        setAge(e.target.value);\r\n    }\r\n\r\n    const updPhone = (e) => {\r\n        setPhone(e.target.value);\r\n    }\r\n\r\n    const updMessengerType = (val) => {\r\n        setMessengerType(val);\r\n    }\r\n\r\n    const updEmail = (e) => {\r\n        setEmail(e.target.value);\r\n    }\r\n\r\n    const updDesignType = (val) => {\r\n        setDesignType(val);\r\n    }\r\n\r\n    const updLink = (e) => {\r\n        setLink(e.target.value);\r\n    }\r\n\r\n    const updDays = (e) => {\r\n        setDays(e.target.value);\r\n    }\r\n\r\n    const updTitle = (e) => {\r\n        setTitle(e.target.value);\r\n    }\r\n\r\n    const updAuthor = (e) => {\r\n        setAuthor(e.target.value);\r\n    }\r\n\r\n    const updIntention = (e) => {\r\n        setIntention(e.target.value);\r\n    }\r\n\r\n    const startSelectSample = (e) => {\r\n        e.preventDefault();\r\n        refBoceto.current.click();\r\n    }\r\n\r\n    const selectSample = (e) => {\r\n        e.preventDefault();\r\n        const file = e.target.files[0];\r\n        if (file) {\r\n            if (file.size <= maxFileSize) {\r\n                setImgSample(file);\r\n            } else {\r\n                alert('La imagen debe ser menor a 5MB');\r\n            }\r\n        }\r\n    }\r\n\r\n    const deleteSample = (e) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        setImgSample(null);\r\n    }\r\n\r\n    const previous = (e) => {\r\n        e.preventDefault();\r\n        navigateTo(activeIndex - 1);\r\n    }\r\n\r\n    const next = (e) => {\r\n        e.preventDefault();\r\n        navigateTo(activeIndex + 1);\r\n    }\r\n\r\n    const send = async (e) => {\r\n        e.preventDefault();\r\n        if (!checkErrors()) {\r\n            setLoading(true);\r\n            if (imgSample) {\r\n                uploadImage('solicitud-diseno', imgSample)\r\n                    .then(url => {\r\n                        saveChanges(url);\r\n                    })\r\n                    .catch(error => {\r\n                        setLoading(false);\r\n                        setSuccess(false);\r\n                        alert('Error al subir la imagen. Reintente');\r\n                        console.log(error);\r\n                    });\r\n            } else {\r\n                saveChanges('');\r\n            }\r\n        }\r\n    }\r\n\r\n    const saveChanges = (urlImg) => {\r\n        const data = {\r\n            name: toName(name.trim()),\r\n            age: parseInt(age),\r\n            phone: phone.trim(),\r\n            messengerType: messengerType.type,\r\n            email: email.trim(),\r\n            designType: designType.type,\r\n            link: extractLink(link.trim()),\r\n            title: toSentence(title.trim()),\r\n            daysLeft: parseInt(days),\r\n            author: author.trim(),\r\n            intention: intention.trim(),\r\n            urlImg: urlImg.trim(),\r\n            type: 'DISENO',\r\n            status: 'DISPONIBLE',\r\n            active: 1\r\n        };\r\n\r\n        saveRequest(data).then(() => {\r\n            window.scrollTo(0, 0);\r\n            setLoading(false);\r\n            setSuccess(true);\r\n        });\r\n    }\r\n\r\n    const checkErrors = () => {\r\n\r\n        let error = (isNameInvalid(name)\r\n            || isAgeInvalid(age)\r\n            || isPhoneInvalid(phone)\r\n            || isEmailInvalid(email)\r\n            || isLinkInvalid(link)\r\n            || isTitleInvalid(title)\r\n            || isAuthorInvalid(author)\r\n            || isIntentionInvalid(intention));\r\n\r\n        // Custom errors\r\n        if (designType.type == 'CR') {\r\n            if (isNaN(days) || days < 0 || days > 10) {\r\n                error = 'Introduce días de lanzamiento válidos';\r\n            }\r\n        }\r\n\r\n        if (error) {\r\n            alert(error);\r\n            return true;\r\n        };\r\n\r\n        return false;\r\n    }\r\n\r\n    const navigateTo = (index) => {\r\n        setActiveIndex(index);\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n        setSuccess(false);\r\n    }, [activeIndex]);\r\n\r\n    return (\r\n        <div>\r\n            <Navbar />\r\n            <HelmetMetaData title=\"Diseños - Temple Luna\" description=\"Estamos dispuestos a ayudarte con aquellas obra que tanto amas. ¡Es gratis!\" />\r\n            <main className='main-body below-navbar colored-background'>\r\n                <section className='container-xl section position-relative z-3'>\r\n                    <h2 className='mb-0'>Pide un diseño</h2>\r\n                    <p className='txt-responsive-form'>Y te lo enviaremos a tu correo</p>\r\n                </section>\r\n                <section className='container-xl mt-2 position-relative'>\r\n                    <img src={ImgTematica} alt='img-fondo' className='img-fondo-formulario' />\r\n\r\n                    <div className='floating-form'>\r\n                        {\r\n                            success\r\n                                ?\r\n                                <div className='form-container text-align-center'>\r\n                                    <Fade bottom>\r\n                                        <FontAwesomeIcon color={'#3DE58D'} icon={faCheckCircle} style={{ fontSize: '8rem' }} />\r\n                                        <h3 className='mt-1 mb-1'>Listo</h3>\r\n                                    </Fade>\r\n                                    <p className='txt-responsive-form m0-auto'>Cuando terminemos tu pedido, lo recibirás en tu correo</p>\r\n                                    <div className='form-buttons-container mt-3'>\r\n                                        <Link to={'inicio'} className='button button-green m0-auto'>\r\n                                            <FontAwesomeIcon icon={faHome} size='xl' />\r\n                                            {' '}\r\n                                            <span className='d-none d-md-inline'>\r\n                                                Regresar\r\n                                            </span>\r\n                                        </Link>\r\n                                    </div>\r\n                                </div>\r\n                                :\r\n                                <>\r\n                                    <Steps\r\n                                        activeIndex={activeIndex}\r\n                                        navigateTo={navigateTo}\r\n                                        steps={steps} />\r\n                                    <div className='form-container'>\r\n                                        <form>\r\n                                            <StepManager currentIndex={activeIndex}>\r\n                                                <div className='step-0'>\r\n                                                    <div className='form-group mb-0'>\r\n                                                        <p><b>Gracias</b> por elegir a <b>Temple Luna</b>. ¡Estamos seguros de que te va a encantar!<br /><br />\r\n                                                        Antes de continuar, te pedimos que leas algunas <b>preguntas frecuentes:</b><br /><br />\r\n\r\n                                                            <b>1- ¿Qué solicitamos?</b><br /><br />\r\n                                                            Solicitamos tus datos de contacto para poder <b>(1)</b> enviarte el trabajo final y <b>(2)</b> contactarte si es que necesitamos\r\n                                                            más información sobre tu pedido.<br /><br />\r\n\r\n                                                            <b>2- ¿Qué obtendré?</b><br /><br />\r\n                                                            Obtendrás una <b>imagen en alta calidad</b> con el resultado de tu pedido. Ese archivo será <b>enviado a tu correo</b>. Contendrá,\r\n                                                            además, un <b>link</b> que podrás usar para compartirlo. Puedes ver un ejemplo\r\n                                                            <b> <a target='_blank' href='https://templeluna.app/prev_resultado?id=qsTf8adrnZTEYercSfWY&t=Cuando%20el%20destino%20es%20imprevisible%20cualquier%20camino%20es%20v%C3%A1lido&test=true'>aquí</a></b>.<br /><br />\r\n\r\n                                                            <b>3- ¿Hay condiciones?</b><br /><br />\r\n                                                            - Debes darle <b>crédito</b> al diseñador en tu obra. <b>Ejemplo:</b> Portada hecha por @Alyoh_Mascarita.<br />\r\n                                                            - Tu escrito debe estar <b>completo</b> y no debe incluir algún <b>costo monetario</b> para poder leerlo <b>nosotros</b>. Caso contrario, el pedido será <b>anulado</b>.<br />\r\n                                                            - El link a tu obra quedará <b>público</b> en el perfil del voluntario. No envíes <b>obras inéditas</b> o <b>que aún no pienses publicar</b>.<br />\r\n                                                            - <b>Finalmente,</b> el artista podrá usar el diseño en su <b>portafolio</b>.<br /><br />\r\n\r\n                                                            <b>4- ¿Cuál es el costo?</b><br /><br />\r\n                                                            Por el momento, este servicio es <b>gratuito</b>. Cuando no lo sea, <b>lo dejaremos claro</b>.<br /><br />\r\n\r\n                                                            <b>5- ¿Quienes atienden los pedidos?</b><br /><br />\r\n                                                            El equipo está conformado por <b>voluntarios</b>, los cuales han tenido que demostrar <b>experiencia en diseños</b>.<br /><br />\r\n\r\n                                                            <b>6- ¿Cómo puedo agradecer?</b><br /><br />\r\n                                                            <b>Comparte</b> nuestro trabajo en redes. Tendrás un <b>botón de \"Compartir\"</b> cuando recibas tu pedido. Eso nos ayudaría <b>mucho</b>.<br /><br />\r\n\r\n                                                            <b>7- ¿Cómo puedo ser voluntario?</b><br /><br />\r\n                                                            Escríbenos por el <b> <a target='_blank' href='https://www.facebook.com/groups/templeluna/'>grupo oficial</a></b> y podemos coordinar una <b>entrevista con el creador</b>.\r\n                                                        </p>\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <p>Presiona siguiente para continuar.</p>\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className='step-1'>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtNombres\">¿Cómo te llamas?</label>\r\n                                                        <input minLength=\"1\" maxLength=\"50\" type=\"text\" value={name} onChange={updName} id=\"txtNombres\" placeholder=\"Ingresa tus nombres\" />\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtEdad\">¿Qué edad tienes?</label>\r\n                                                        <input type=\"number\" min={10} max={99} value={age} onChange={updAge} id=\"txtEdad\" placeholder=\"Ingresa tu edad\" />\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtNumero\">Bríndanos un número para consultas (con código de país)</label>\r\n                                                        <div className='cbo-text'>\r\n                                                            <DropdownImage\r\n                                                                selectedItem={messengerType}\r\n                                                                list={contactTypes}\r\n                                                                select={updMessengerType} />\r\n                                                            <input type=\"text\" value={phone} onChange={updPhone} id=\"txtNumero\" placeholder=\"Ej: +51 999 999 999\" />\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtCorreo\">Bríndanos un correo para enviarte el trabajo</label>\r\n                                                        <input minLength=\"6\" maxLength=\"100\" type=\"email\" value={email} onChange={updEmail} id=\"txtCorreo\" placeholder=\"Ingresa tu correo\" />\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className='step-2'>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtLink\">Tipo de diseño</label>\r\n                                                        <DropdownImage\r\n                                                            stretch\r\n                                                            selectedItem={designType}\r\n                                                            list={designTypes}\r\n                                                            select={updDesignType} />\r\n                                                    </div>\r\n                                                    {\r\n                                                        designType.type == 'CR'\r\n                                                        &&\r\n                                                        <div className='form-group'>\r\n                                                            <label htmlFor=\"txtDaysLeft\">¿En cuántos días lanzarás tu obra?</label>\r\n                                                            <input min=\"0\" max=\"10\" type=\"number\" value={days} onChange={updDays} id=\"txtDaysLeft\" placeholder=\"Máximo 10\" />\r\n                                                        </div>\r\n                                                    }\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtLink\">Link de tu obra</label>\r\n                                                        <input minLength=\"1\" maxLength=\"500\" type=\"text\" value={link} onChange={updLink} id=\"txtLink\" placeholder=\"Ingresa el link\" />\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className='step-3'>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtTitulo\">Elige un frase principal</label>\r\n                                                        <input minLength=\"1\" maxLength=\"100\" type=\"text\" value={title} onChange={updTitle} id=\"txtTitulo\" placeholder=\"Ejemplo: El amor todo lo puede\" />\r\n\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtPseudonimo\">¿Cuál es tu pseudónimo?</label>\r\n                                                        <input minLength=\"1\" maxLength=\"100\" type=\"text\" value={author} onChange={updAuthor} id=\"txtPseudonimo\" placeholder=\"Ejemplo: Atenas\" />\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtIntencion\">Describe lo que quieres ver en tu diseño</label>\r\n                                                        <textarea minLength=\"1\" maxLength=\"1000\" rows=\"5\" value={intention} onChange={updIntention} id=\"txtIntencion\" placeholder=\"Ejemplo: Quiero que aparezcan dos mujeres besándose en frente de una multitud, en representación a la lucha LGTB. Quiero un cielo rojizo...\"></textarea>\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"flBoceto\">¿Tienes algún boceto en mente? Súbelo</label>\r\n                                                        {\r\n                                                            imgSample\r\n                                                                ?\r\n                                                                <button onClick={startSelectSample} className={`d-flex justify-content-between align-items-center button button-purple button-thin stretch ${imgSample ? 'd-flex' : ''}`}>\r\n                                                                    <span className='clamp clamp-1'>\r\n                                                                        {imgSample.name}\r\n                                                                    </span>\r\n                                                                    <span onClick={deleteSample} className='fa fa-times' style={{ color: 'white' }}></span>\r\n                                                                </button>\r\n                                                                :\r\n                                                                <button onClick={startSelectSample} className={`button button-purple button-thin stretch ${imgSample ? 'd-flex' : ''}`}>\r\n                                                                    <span>\r\n                                                                        Subir imagen\r\n                                                                    </span>\r\n                                                                </button>\r\n                                                        }\r\n                                                        <input type=\"file\" onChange={selectSample} accept=\"image/*\" ref={refBoceto} className='d-none' id=\"flBoceto\" />\r\n                                                    </div>\r\n                                                </div>\r\n                                            </StepManager>\r\n                                            <div className='form-buttons-container'>\r\n                                                {\r\n                                                    canGoBackwards && !loading\r\n                                                    &&\r\n                                                    <button onClick={previous} className='button button-green'>\r\n                                                        <FontAwesomeIcon icon={faAngleLeft} size='xl' />\r\n                                                        {' '}\r\n                                                        <span className='d-none d-md-inline'>\r\n                                                            Anterior\r\n                                                    </span>\r\n                                                    </button>\r\n                                                }\r\n                                                {\r\n                                                    loading\r\n                                                        ?\r\n                                                        <span className='button button-green justify-self-right'>\r\n                                                            Enviando\r\n                                                            {' '}\r\n                                                            <ClipLoader color={'#fff'} loading={true} css={overrideSpinnerInline} size={22} />\r\n                                                        </span>\r\n                                                        :\r\n                                                        isLast\r\n                                                            ?\r\n                                                            <button onClick={send} className='button button-green justify-self-right'>\r\n                                                                <span className='d-none d-md-inline'>\r\n                                                                    Enviar\r\n                                                                </span>\r\n                                                                {' '}\r\n                                                                <FontAwesomeIcon icon={faCheck} size='xl' />\r\n                                                            </button>\r\n                                                            :\r\n                                                            <button onClick={next} className='button button-green justify-self-right'>\r\n                                                                <span className='d-none d-md-inline'>\r\n                                                                    Siguiente\r\n                                                                </span>\r\n                                                                {' '}\r\n                                                                <FontAwesomeIcon icon={faAngleRight} size='xl' />\r\n                                                            </button>\r\n                                                }\r\n                                            </div>\r\n                                        </form>\r\n                                    </div>\r\n                                </>\r\n                        }\r\n                    </div>\r\n\r\n                </section>\r\n            </main>\r\n            <div className='fab-button'>\r\n                <a href={`https://web.whatsapp.com/send?phone=${process.env.REACT_APP_CONTACT_WSP}`} target='_blank' className='fab-button__circle fab-button__circle-wsp'>\r\n                    {' '}\r\n                    <FontAwesomeIcon icon={faWhatsapp} className='icon' />\r\n                </a>\r\n            </div>\r\n            <Footer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Solicitud;","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\prep_diseno.js",["381"],"import React, { useRef, useState, useEffect } from 'react'\r\nimport Footer from '../componentes/footer/footer';\r\nimport Navbar from '../componentes/navbar';\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport Fade from 'react-reveal/Fade';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { css } from \"@emotion/core\";\r\nimport { uploadImage, setRequestDone } from '../api';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowLeft, faPaperPlane, faCheckCircle, faHome, faEye } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst overrideSpinnerInline = css`\r\n  display: inline-block;\r\n  vertical-align: middle;\r\n`;\r\n\r\nconst maxFileSize = 5242880;\r\n\r\nconst Preparation = ({ location }) => {\r\n\r\n    const { title, id, type, link } = location.state.data;\r\n\r\n    const refDesign = useRef(null);\r\n\r\n    const [success, setSuccess] = useState(false);\r\n    const [urlResult, setUrlResult] = useState('');\r\n    const [loading, setLoading] = useState(false); // Determina si se está enviando el form\r\n    const [comment, setComment] = useState('');\r\n    const [design, setDesign] = useState(null);\r\n\r\n    const history = useHistory();\r\n\r\n    const updComment = (e) => {\r\n        setComment(e.target.value);\r\n    }\r\n\r\n    const goBackwards = () => {\r\n        history.push('/admin');\r\n    }\r\n\r\n    const startSelectDesign = (e) => {\r\n        e.preventDefault();\r\n        refDesign.current.click();\r\n    }\r\n\r\n    const selectDesign = (e) => {\r\n        e.preventDefault();\r\n        const file = e.target.files[0];\r\n        if (file) {\r\n            if (file.size <= maxFileSize) {\r\n                setDesign(file);\r\n            } else {\r\n                alert('La imagen debe ser menor a 5MB')\r\n            }\r\n        }\r\n    }\r\n\r\n    const deleteDesign = (e) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        setDesign(null);\r\n    }\r\n\r\n    const send = async (e) => {\r\n        e.preventDefault();\r\n        if (!checkErrors()) {\r\n            setLoading(true);\r\n            saveChanges();\r\n        }\r\n    }\r\n\r\n    const saveChanges = () => {\r\n        const data = {\r\n            requestId: id,\r\n            type: type.trim(),\r\n            comment: comment.trim()\r\n        };\r\n\r\n        uploadImage('solicitud-diseno', design)\r\n            .then(url => {\r\n                setRequestDone({ ...data, urlResult: url }).then(result => {\r\n                    window.scrollTo(0, 0);\r\n                    setLoading(false);\r\n                    if (!result.error) {\r\n                        setUrlResult(result.url);\r\n                        setSuccess(true);\r\n                    } else {\r\n                        alert(result.error);\r\n                        setSuccess(false);\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                setLoading(false);\r\n                setSuccess(false);\r\n                alert('Error al subir la imagen. Reintente');\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    const checkErrors = () => {\r\n\r\n        // Comment\r\n        if (comment) {\r\n            if (!(/^(?!\\s*$).{1,1000}/.test(comment))) {\r\n                alert('Tu comentario debe debe tener de 1 a 1000 caracteres');\r\n                return true;\r\n            }\r\n        }\r\n\r\n        // File\r\n        if (!design) {\r\n            alert('Debes subir tu diseño final');\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n        setSuccess(false);\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <Navbar />\r\n            <main className='main-body below-navbar colored-background'>\r\n                <section className='container-xl section prep-req-container'>\r\n                    <div className='flex-align-center mb-2'>\r\n                        <FontAwesomeIcon onClick={goBackwards} className='mr-1' icon={faArrowLeft} size='lg' />\r\n                        <h4 className='request-prep-title m-0 clamp clamp-2'>Diseño: {title}</h4>\r\n                    </div>\r\n                    {\r\n                        success\r\n                            ?\r\n                            <div className='form-container text-align-center'>\r\n                                <Fade bottom>\r\n                                    <FontAwesomeIcon color={'#3DE58D'} icon={faCheckCircle} style={{ fontSize: '8rem' }} />\r\n                                    <h3 className='mt-1 mb-1'>¡Diseño enviado!</h3>\r\n                                </Fade>\r\n                                <p className='txt-responsive-form m0-auto'>Tu experiencia ha aumentado :)</p>\r\n                                <div className='button-container mt-3'>\r\n                                    <button onClick={() => window.open(urlResult, '_blank')} className='button button-purple button-option-request ml-auto'>\r\n                                        <FontAwesomeIcon icon={faEye} size='1x' />\r\n                                        {' '}\r\n                                                Ver resultado\r\n                                        </button>\r\n                                    <button onClick={goBackwards} className='button button-blue button-option-request mr-auto'>\r\n                                        <FontAwesomeIcon icon={faHome} size='1x' />\r\n                                        {' '}\r\n                                                Regresar\r\n                                        </button>\r\n                                </div>\r\n                            </div>\r\n                            :\r\n                            <>\r\n                                <div className=''>\r\n                                    <h4>Link de la obra</h4>\r\n                                    {\r\n                                        link\r\n                                            ?\r\n                                            <a className='clamp clamp-1' target='_blank' href={link}>{link}</a>\r\n                                            :\r\n                                            <p>No existe link</p>\r\n                                    }\r\n                                    <div className='form-group'>\r\n                                        <h4>Diseño terminado</h4>\r\n                                        {\r\n                                            design\r\n                                                ?\r\n                                                <button onClick={startSelectDesign} className={`d-flex justify-content-between align-items-center button button-purple button-thin stretch ${design ? 'd-flex' : ''}`}>\r\n                                                    <span className='clamp clamp-1'>\r\n                                                        {design.name}\r\n                                                    </span>\r\n                                                    <span onClick={deleteDesign} className='fa fa-times' style={{ color: 'white' }}></span>\r\n                                                </button>\r\n                                                :\r\n                                                <button onClick={startSelectDesign} className={`button button-purple button-thin stretch ${design ? 'd-flex' : ''}`}>\r\n                                                    <span>\r\n                                                        Subir diseño\r\n                                        </span>\r\n                                                </button>\r\n                                        }\r\n                                        <input type=\"file\" onChange={selectDesign} accept=\"image/*\" ref={refDesign} className='d-none' id=\"flDiseno\" />\r\n                                    </div>\r\n                                    <div className='form-group'>\r\n                                        <h4>¿Algún comentario o recomendación? (Opcional)</h4>\r\n                                        <textarea minLength=\"1\" maxLength=\"1000\" rows=\"4\" value={comment} onChange={updComment} placeholder=\"Ejemplo: Considero que tiene un enganche bueno, pero no es suficiente. Debería enganchar mucho desde un inicio...\"></textarea>\r\n                                    </div>\r\n                                </div>\r\n                                <div className='form-buttons-container mt-3'>\r\n                                    {\r\n                                        loading\r\n                                            ?\r\n                                            <span className='button button-green justify-self-right'>\r\n                                                Enviando\r\n                                                {' '}\r\n                                                <ClipLoader color={'#fff'} loading={true} css={overrideSpinnerInline} size={22} />\r\n                                            </span>\r\n                                            :\r\n                                            <button onClick={send} className='button button-green justify-self-right'>\r\n                                                <FontAwesomeIcon icon={faPaperPlane} size='1x' />\r\n                                                {' '}\r\n                                                <span className='d-none d-md-inline'>\r\n                                                    Enviar\r\n                                                </span>\r\n                                            </button>\r\n                                    }\r\n                                </div>\r\n                            </>\r\n                    }\r\n                </section>\r\n            </main>\r\n            <Footer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Preparation;","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\prev_resultado.js",["382","383","384","385","386","387","388","389","390","391","392","393","394","395"],"import React, { useState, useEffect } from 'react'\r\nimport Navbar from '../componentes/navbar';\r\nimport LoadingScreen from '../componentes/loading-screen';\r\nimport PunctuationModal from '../componentes/modal/punctuation';\r\nimport queryString from 'query-string';\r\nimport HelmetMetaData from \"../componentes/helmet\";\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport Fade from 'react-reveal/Fade';\r\nimport MiniProfile from '../componentes/profile/mini-profile';\r\nimport SpeechBubble from '../componentes/speech-bubble/speech-bubble';\r\nimport { useScrollOffset } from '../hooks/useScrollOffset';\r\nimport { extractLink } from '../helpers/functions';\r\nimport { getRequest, likeRequestResult, addAnalitics } from '../api';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faBook, faDownload, faHeart } from '@fortawesome/free-solid-svg-icons';\r\nimport { faFacebook } from '@fortawesome/free-brands-svg-icons';\r\nimport { css } from \"@emotion/core\";\r\nimport { Document, Page } from 'react-pdf/dist/esm/entry.webpack';\r\nimport { FacebookShareButton } from \"react-share\";\r\nimport 'react-pdf/dist/esm/Page/AnnotationLayer.css';\r\n\r\nconst overrideSpinnerInline = css`\r\n  display: inline-block;\r\n  vertical-align: middle;\r\n`;\r\n\r\nconst Previsualizacion = ({ location }) => {\r\n\r\n    const [isOpenPunctuationModal, setIsOpenPunctuationModal] = useState(false);\r\n    const [punctuationType, setPunctuationType] = useState('LIKE');\r\n\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [success, setSuccess] = useState(false);\r\n    const [isLoadTimeout, setLoadTimeout] = useState(false);\r\n    const [loadingMsg, setLoadingMsg] = useState('Obteniendo tu archivo...');\r\n    const [link, setLink] = useState('');\r\n    const [type, setType] = useState('');\r\n    const [resultUrl, setResultUrl] = useState('');\r\n    const [id, setId] = useState('');\r\n    const [title, setTitle] = useState(queryString.parse(location.search).t || 'Tu obra');\r\n    const [author, setAuthor] = useState('');\r\n    const [likes, setLikes] = useState(0);\r\n    const [artist, setArtist] = useState({ networks: [], services: [], roles: [] });\r\n    const [addingLove, setAddingLove] = useState(false);\r\n\r\n    // From query parameters\r\n    const [isTemplated, setIsTemplated] = useState(false);\r\n    const [isTest, setIsTest] = useState(false);\r\n    const [origin, setOrigin] = useState('OTHER');\r\n\r\n    const [numPages, setNumPages] = useState(0);\r\n    const { hasScrolledToBottomOffset } = useScrollOffset(800);\r\n\r\n    useEffect(() => {\r\n\r\n        const { id, test, origin, fbclid, templated } = queryString.parse(location.search);\r\n\r\n        if (test) {\r\n            setIsTest(true);\r\n        }\r\n\r\n        if (templated) {\r\n            setOrigin('MAIL');\r\n        }\r\n\r\n        if (origin == 'tl') {\r\n            setOrigin('TL');\r\n        }\r\n\r\n        if (fbclid) {\r\n            setOrigin('FB');\r\n        }\r\n\r\n        if (id) {\r\n            getRequest(id).then(({ data, error }) => { // El segundo parámetro es para decidir si se solicitan detalles\r\n                if (!error) {\r\n                    const { type, resultUrl, title, name, link, likes, artist } = data;\r\n                    setLoadingMsg('Obtenido: ' + title);\r\n                    setId(id);\r\n                    setLink(link);\r\n                    setType(type);\r\n                    setResultUrl(resultUrl);\r\n                    setTitle(title);\r\n                    setAuthor(name);\r\n                    setLikes(likes);\r\n                    setArtist(artist);\r\n                    if (templated) {\r\n                        setIsTemplated(true);\r\n                    }\r\n                    // Una vez obtenidos los datos, inicia la cuenta para el timeout de carga del documento\r\n                } else {\r\n                    alert('No se encontró el archivo. Intente más tarde');\r\n                    setIsLoading(false);\r\n                }\r\n            });\r\n        }\r\n\r\n    }, [location]);\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n    }, []);\r\n\r\n    // Timeout para la carga del documento EN PANTALLA\r\n    useEffect(() => {\r\n        if (id) {\r\n            let timeout = setTimeout(() => {\r\n                if (!success) {\r\n                    setLoadTimeout(true);\r\n                }\r\n            }, 10000);\r\n            return () => clearTimeout(timeout);\r\n        }\r\n    }, [id, success]);\r\n\r\n    const onDocumentLoadSuccess = ({ numPages = 0 }) => {\r\n        setIsLoading(false);\r\n        setSuccess(true);\r\n        setNumPages(numPages);\r\n    }\r\n\r\n    const onDocumentError = () => {\r\n        setIsLoading(false);\r\n        setSuccess(false);\r\n    }\r\n\r\n    const like = () => {\r\n        if (!likes) {\r\n            setAddingLove(true);\r\n            likeRequestResult(id, 1).then(({ data, error }) => {\r\n                if (!error) {\r\n                    setAddingLove(false);\r\n                    setLikes(1);\r\n                    setPunctuationType('LIKE');\r\n                    togglePunctuationModal();\r\n                } else {\r\n                    setAddingLove(false);\r\n                    alert('No se pudo agregar el like');\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    const onReadButtonClicked = () => {\r\n        window.open(extractLink(link));\r\n        if (!isTest) {\r\n            const analObject = {\r\n                requestId: id,\r\n                origin,\r\n                readIntention: true\r\n            };\r\n\r\n            addAnalitics(id, analObject).then(() => {\r\n                console.log('Analítica actualizada!');\r\n            });\r\n        } else {\r\n            console.log('Test mode');\r\n        }\r\n    }\r\n\r\n    const onFinishedSharedIntention = () => {\r\n        if (!isTest) {\r\n            const analObject = {\r\n                requestId: id,\r\n                templated: isTemplated,\r\n                origin,\r\n                shareIntention: true\r\n            };\r\n\r\n            addAnalitics(id, analObject).then(() => {\r\n                console.log('Analítica actualizada!');\r\n            });\r\n        } else {\r\n            console.log('Test mode');\r\n        }\r\n        setIsOpenPunctuationModal(false);\r\n    }\r\n\r\n    const togglePunctuationModal = () => {\r\n        setIsOpenPunctuationModal(!isOpenPunctuationModal);\r\n    }\r\n\r\n    let shareQuote;\r\n\r\n    if (isTemplated) {\r\n        shareQuote = `Hola amigos, les quiero compartir ${type == 'CRITICA' ? 'la crítica' : type == 'DISENO' ? 'el diseño' : 'el trabajo'} que me hicieron en Temple Luna. Los invito a pedir uno(a) en su página oficial :)`;\r\n    } else {\r\n        shareQuote = `Hola amigos, les quiero compartir ${type == 'CRITICA' ? 'esta interesante crítica' : type == 'DISENO' ? 'este gran diseño' : 'este gran trabajo'} que encontré en Temple Luna. Los invito a pedir uno(a) en su página oficial :)`\r\n    }\r\n\r\n    const url = process.env.REACT_APP_WEBSITE + window.location.pathname + '?id=' + id;\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                isLoading && !isLoadTimeout && <LoadingScreen text={loadingMsg} />\r\n            }\r\n            <HelmetMetaData url={url} title={`${type == 'DISENO' ? '[Diseño]' : type == 'CRITICA' ? '[Crítica]' : ''} ${title} - Temple Luna`} image={type == 'DISENO' ? resultUrl : 'https://drive.google.com/uc?id=1b7NnnYFWl4cW746wfDGw5LRdZ_uwCv44'} />\r\n            <Navbar position='absolute' />\r\n            <PunctuationModal\r\n                requestId={id}\r\n                url={url}\r\n                shareQuote={shareQuote}\r\n                onFinishedSharedIntention={onFinishedSharedIntention}\r\n                requestType={type}\r\n                punctuationType={punctuationType}\r\n                isOpen={isOpenPunctuationModal}\r\n                close={() => setIsOpenPunctuationModal(false)} />\r\n            <main className='main-body below-navbar overflow-unset'>\r\n                <div className='mini-profile-container'>\r\n                    <div className='container-xl'>\r\n                        {\r\n                            artist\r\n                            &&\r\n                            <MiniProfile\r\n                                id={artist.id}\r\n                                editorial={artist.editorial}\r\n                                networks={artist.networks}\r\n                                title={artist.fName + ' ' + artist.lName}\r\n                                img={artist.imgUrl} />\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <section className='container-pdf-preview position-relative'>\r\n                    {\r\n                        isLoadTimeout\r\n                            ?\r\n                            <div className='container-xl form-group'>\r\n                                <h3>¡Vaya! Tu documento ha demorado en mostrarse</h3>\r\n                                <p className=\"m-0\">Descárgalo directamente desde <b><a target='_blank' href={resultUrl}>aquí</a></b> o con el botón de la barra inferior.</p>\r\n                            </div>\r\n                            :\r\n                            resultUrl && (type == 'CRITICA' || type == 'CORRECCION')\r\n                                ?\r\n                                <Document\r\n                                    file={resultUrl}\r\n                                    onLoadSuccess={onDocumentLoadSuccess}\r\n                                    onLoadError={onDocumentError}\r\n                                    externalLinkTarget={'_blank'}>\r\n                                    {\r\n                                        Array.from(new Array(numPages), (_, index) => (\r\n                                            <Page\r\n                                                key={`page_${index + 1}`}\r\n                                                pageNumber={index + 1}\r\n                                            />\r\n                                        ))\r\n                                    }\r\n                                </Document>\r\n                                :\r\n                                resultUrl && type == 'DISENO'\r\n                                    ?\r\n                                    <div className='container-xl form-group'>\r\n                                        <img onLoad={onDocumentLoadSuccess} onError={onDocumentError} src={resultUrl} />\r\n                                    </div>\r\n                                    :\r\n                                    null\r\n                    }\r\n                </section>\r\n            </main>\r\n            <div className='bottom-prev-navbar'>\r\n                <div className='speech-container'>\r\n                    <Fade when={hasScrolledToBottomOffset}>\r\n                        <SpeechBubble text={'Comparte aquí el trabajo de este artista'} />\r\n                    </Fade>\r\n                </div>\r\n\r\n                <nav className='container-xl'>\r\n                    <button className='button-purple' onClick={onReadButtonClicked}>\r\n                        <FontAwesomeIcon color={'#fbffba'} icon={faBook} className='icon' />\r\n                        {' '}\r\n                        Ver obra\r\n                    </button>\r\n                    {\r\n                        isTemplated\r\n                            ?\r\n                            addingLove\r\n                                ?\r\n                                <button className='button-purple' onClick={like}>\r\n                                    <ClipLoader color={'#fff'} loading={true} css={overrideSpinnerInline} size={22} />\r\n                                </button>\r\n                                :\r\n                                likes > 0\r\n                                    ?\r\n                                    <button className='button-purple button-liked' onClick={() => { }}>\r\n                                        <FontAwesomeIcon color={'#fbffba'} icon={faHeart} className='icon' />\r\n                                    </button>\r\n                                    :\r\n                                    <button className='button-purple' onClick={like}>\r\n                                        <FontAwesomeIcon color={'#fbffba'} icon={faHeart} className='icon' />\r\n                                    </button>\r\n                            :\r\n                            null\r\n                    }\r\n                    <button className='button-purple position-relative p-0'>\r\n                        <FacebookShareButton\r\n                            onShareWindowClose={onFinishedSharedIntention}\r\n                            url={url.toString().replace(/templated=true/g, \"\")}\r\n                            quote={shareQuote}\r\n                            className='py-08'\r\n                            hashtag='#templeluna'\r\n                            style={{ width: '100%', height: '100%' }}>\r\n                            <FontAwesomeIcon color={'#fbffba'} icon={faFacebook} className='icon' />\r\n                            {' '}\r\n                        Compartir\r\n                    </FacebookShareButton>\r\n                    </button>\r\n                    <button className='button-purple' onClick={() => window.open(resultUrl)}>\r\n                        <FontAwesomeIcon color={'#fbffba'} icon={faDownload} className='icon' />\r\n                    </button>\r\n                </nav>\r\n            </div>\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default Previsualizacion;","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\customRouter\\publicRoute.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\customRouter\\privateRoute.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\drawer\\index.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\firebase.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\api.js",["396","397"],"//import 'babel-polyfill';\r\nimport firebase from './firebase';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst firestore = firebase.firestore();\r\nconst auth = firebase.auth();\r\nconst storage = firebase.storage();\r\n\r\n// Eventos\r\nexport const saveEvent = async (object) => {\r\n    return firestore.collection('inscripciones').doc().set({ ...object, createdAt: firebase.firestore.FieldValue.serverTimestamp() }, { merge: true });\r\n}\r\n\r\n// Solicitudes\r\n\r\nexport const takeRequest = async (requestId) => {\r\n    return request('takeRequest', { requestId }, 'POST', true);\r\n}\r\n\r\nexport const resignRequest = async (requestId) => {\r\n    return request('resignRequest', { requestId }, 'POST', true);\r\n}\r\n\r\nexport const saveRequest = async (object) => {\r\n    return firestore.collection('solicitudes').doc().set({ ...object, createdAt: firebase.firestore.FieldValue.serverTimestamp() }, { merge: true });\r\n}\r\n\r\nexport const setRequestDone = async (data) => {\r\n    return request('generateResultRequest', data, 'POST', true);\r\n}\r\n\r\nexport const getRequest = async (requestId) => {\r\n    return firestore.collection('solicitudes').doc(requestId).get()\r\n        .then(async doc => {\r\n            if (doc.exists) {\r\n                const takenBy = doc.data().takenBy;\r\n                if (takenBy) {\r\n                    const artist = await request('getArtistDataById', { id: takenBy }, 'POST'); // TO BE FIXED, DENORMALIZE!!\r\n                    if (!artist.error) {\r\n                        return { data: { ...doc.data(), id: doc.id, artist } }\r\n                    } else {\r\n                        return { error: 'No existe el artista' }\r\n                    }\r\n                } else {\r\n                    return { data: { ...doc.data(), id: doc.id } }\r\n                }\r\n            } else {\r\n                return { error: 'No existe una solicitud con ese id' }\r\n            }\r\n        })\r\n        .catch(error => {\r\n            return { error }\r\n        })\r\n}\r\n\r\nexport const getRequests = async (workerId, type, status, startAfter, limit = 10, order = 'asc') => {\r\n\r\n    let request = firestore.collection('solicitudes').where('type', '==', type).where('status', '==', status).orderBy('createdAt', order);\r\n\r\n    if (startAfter) {\r\n        request = request.startAfter(startAfter);\r\n    }\r\n\r\n    if (workerId) {\r\n        request = request.where('takenBy', '==', workerId);\r\n    }\r\n\r\n    return request.limit(limit + 1).get()\r\n        .then(qsn => {\r\n            let list = [];\r\n            qsn.forEach(doc => list.push({ ...doc.data(), id: doc.id }));\r\n            const isLast = list.length < limit + 1;\r\n            if (!isLast) list.pop();\r\n            return { list, isLast };\r\n        })\r\n        .catch(error => {\r\n            return { list: [] };\r\n        });;\r\n}\r\n\r\nexport const likeRequestResult = async (id, direction) => {\r\n    return request('addLove', { id, direction }, 'POST');\r\n}\r\n\r\nexport const addCommentRequestResult = async (id, alias, message) => {\r\n    return request('addComment', { id, alias, message }, 'POST');\r\n}\r\n\r\n/*export const listenRequests = (workerId, type, status, limit = 10, callback) => {\r\n    let request = firestore.collection('solicitudes').where('type', '==', type).where('status', '==', status).orderBy('createdAt', 'desc');\r\n    if (workerId) {\r\n        request.where('takenBy', workerId);\r\n    }\r\n    return request.limit(limit).onSnapshot(qsn => {\r\n        let list = [];\r\n        qsn.forEach(doc => list.push({ ...doc.data(), id: doc.id }));\r\n        callback(list);\r\n    });\r\n}*/\r\n\r\n// Analíticas\r\nexport const addAnalitics = async (id, object) => {\r\n    return firestore.collection('analiticas').doc(id).set({ ...object, createdAt: firebase.firestore.FieldValue.serverTimestamp() }, { merge: true });\r\n}\r\n\r\n// Estadísticas\r\n\r\nexport const getStatistics = async keys => {\r\n    let promises = keys.map(key => {\r\n        return firestore.collection('estadisticas').doc(key).get()\r\n            .then(doc => {\r\n                if (doc.exists) {\r\n                    return { statistics: { ...doc.data() } }\r\n                } else {\r\n                    return { error: 'No se pudo obtener la estadística ' + key }\r\n                }\r\n            })\r\n            .catch(error => {\r\n                return { error }\r\n            })\r\n    });\r\n    return Promise.all(promises);\r\n}\r\n\r\n// Perfil\r\n\r\nexport const getProfile = async (uid) => {\r\n    return firestore.collection('perfiles').doc(uid).get()\r\n        .then(doc => {\r\n            if (doc.exists) {\r\n                return { profile: { ...doc.data(), id: doc.id } }\r\n            } else {\r\n                return { error: 'No existe un usuario con ese id', errCode: 'NOT FOUND' }\r\n            }\r\n        })\r\n        .catch(error => {\r\n            return { error }\r\n        })\r\n}\r\n\r\nexport const getProfileByQueryFollowName = async (followName) => {\r\n    return firestore.collection('perfiles').where('qFollowName', '==', followName).limit(1).get()\r\n        .then(qsn => {\r\n            let list = [];\r\n            qsn.forEach(doc => list.push({ ...doc.data(), id: doc.id }));\r\n            return { profile: list[0] };\r\n        })\r\n        .catch(error => {\r\n            return { error }\r\n        })\r\n}\r\n\r\nexport const takeRest = async () => {\r\n    //return request('takeRest', null, 'POST', true);\r\n}\r\n\r\n// Sesión\r\n\r\nexport const login = async (email, password) => {\r\n    return auth.signInWithEmailAndPassword(email, password)\r\n        .then(user => {\r\n            return getProfile(user.user.uid).then(({ profile, error }) => {\r\n                if (!error) {\r\n                    return { user, profile };\r\n                } else {\r\n                    logout();\r\n                    return { error: 'No se pudo obtener el perfil' };\r\n                }\r\n            })\r\n        })\r\n        .catch(error => {\r\n            let errMessage;\r\n            switch (error.code) {\r\n                case 'auth/invalid-email':\r\n                    errMessage = 'El usuario es inválido';\r\n                    break;\r\n                case 'auth/user-disabled':\r\n                    errMessage = 'El usuario ha sido deshabilitado';\r\n                    break;\r\n                case 'auth/user-not-found':\r\n                    errMessage = 'El usuario no ha sido encontrado';\r\n                    break;\r\n                case 'auth/wrong-password':\r\n                    errMessage = 'El usuario es inválido';\r\n                    break;\r\n                case 'auth/too-many-requests':\r\n                    errMessage = 'Ha habido muchos intentos de login. Inténtalo en unos minutos.';\r\n                    break;\r\n                default:\r\n                    //errMessage = 'Error code: ' + error.message\r\n                    errMessage = 'Ha ocurrido un error con el servicio de autenticación';\r\n            }\r\n            return { error: errMessage };\r\n        });\r\n}\r\n\r\nexport const logout = async () => {\r\n    return auth.signOut().then(() => true).catch(function (error) {\r\n        console.log(error.message);\r\n    });\r\n}\r\n\r\n// Archivos\r\nexport const uploadImage = async (ruta, archivo) => {\r\n    return new Promise((resolve, reject) => {\r\n        let storageRef = storage.ref();\r\n        let imgRef = storageRef.child(`${ruta}/${uuidv4()}`);\r\n        const task = imgRef.put(archivo);\r\n        task.on('state_changed', function (snapshot) {\r\n            var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n            console.log('Upload is ' + progress + '% done');\r\n            switch (snapshot.state) {\r\n                case firebase.storage.TaskState.PAUSED: // or 'paused'\r\n                    console.log('Upload is paused');\r\n                    break;\r\n                case firebase.storage.TaskState.RUNNING: // or 'running'\r\n                    console.log('Upload is running');\r\n                    break;\r\n            }\r\n        }, function (error) {\r\n            reject(error);\r\n        }, function () {\r\n            task.snapshot.ref.getDownloadURL().then(function (downloadURL) {\r\n                resolve(downloadURL);\r\n            });\r\n        });\r\n    })\r\n}\r\n\r\n// Funciones firestore\r\nexport const getGeneratedId = async (collection) => {\r\n    return firestore.collection(collection).doc().id;\r\n}\r\n\r\n// Api fetch\r\nexport const request = async (path, data, method, authorized) => {\r\n    try {\r\n        const result = await fetch(process.env.REACT_APP_ENDPOINT + path, {\r\n            method: method,\r\n            body: data ? JSON.stringify(data) : null,\r\n            headers: {\r\n                Authorization: authorized ? 'Bearer ' + await auth.currentUser.getIdToken() : null\r\n            }\r\n        });\r\n        if (result.status == '200') {\r\n            return await result.json(); // Esto se debe arreglar\r\n        } else {\r\n            return { error: result.statusText || 'No se encontró el endpoint' };\r\n        }\r\n    } catch (error) {\r\n        return { error };\r\n    }\r\n}","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\helpers\\userStorage.js",["398"],"export const getProfileStorage = () => {\r\n    try {\r\n        return JSON.parse(localStorage.getItem('profile'));\r\n    } catch (error) {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport const setProfileStorage = (profile) => {\r\n    return localStorage.setItem('profile', JSON.stringify(profile));\r\n}\r\n\r\n// Esto guarda los tipos de solicitudes elegidos en la pantalla de admin\r\nexport const getAdminRequestType = (defaultType) => {\r\n    try {\r\n        const type = JSON.parse(localStorage.getItem('adminRequestType'));\r\n        if (Object.keys(type).length == 0) {\r\n            return defaultType;\r\n        }\r\n        return type;\r\n    } catch (error) {\r\n        return defaultType;\r\n    }\r\n}\r\n\r\nexport const setAdminRequestType = (reqType) => {\r\n    return localStorage.setItem('adminRequestType', JSON.stringify(reqType));\r\n}\r\n\r\n// Esto guarda la pestana seleccionada en la pantalla de admin\r\nexport const getAdminMainTabIndex = () => {\r\n    return parseInt(localStorage.getItem('adminMainTabIndex')) || 0;\r\n\r\n}\r\n\r\nexport const setAdminMainTabIndex = (index) => {\r\n    return localStorage.setItem('adminMainTabIndex', index);\r\n}\r\n\r\n// Temas\r\nexport const getTheme = () => {\r\n    try {\r\n        return JSON.parse(localStorage.getItem('theme'));\r\n    } catch (error) {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport const saveTheme = (theme) => {\r\n    return localStorage.setItem('theme', JSON.stringify(theme));\r\n}","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\modal\\designDetail.js",["399","400","401","402","403","404","405","406","407","408","409","410","411"],"import React, { useContext } from 'react';\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport Avatar from '../avatar';\r\nimport Zoom from 'react-reveal/Zoom';\r\nimport { getDateText, getExpDateText, getMessengerTypeName, getDesignType, getFormattedPhone, extractLink } from '../../helpers/functions';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { AuthContext } from '../../context/AuthContext';\r\nimport { css } from \"@emotion/core\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faAngleDown, faExchangeAlt, faEye, faHandPaper, faPaintBrush, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { faWhatsapp } from '@fortawesome/free-brands-svg-icons';\r\nimport './modals.css';\r\n\r\nconst overrideSpinnerInline = css`\r\n  display: inline-block;\r\n  margin-left: .6rem;\r\n  vertical-align: middle;\r\n`;\r\n\r\nconst Modal = ({ isOpen, data, loading, openConfirmationModal, close }) => {\r\n\r\n    const history = useHistory();\r\n\r\n    const { logged } = useContext(AuthContext);\r\n    const { icon, name } = getDesignType(data?.designType);\r\n    const isTakenByMe = data?.takenBy == logged.uid;\r\n    const messengerType = data?.messengerType;\r\n    const formattedPhone = getFormattedPhone(data?.phone);\r\n    const formattedLink = extractLink(data?.link);\r\n\r\n    let styles = '';\r\n    if (isOpen) {\r\n        styles = 'open';\r\n    } else {\r\n        styles = 'close';\r\n    }\r\n\r\n    if (isTakenByMe) {\r\n        getExpDateText(data?.takenAt, data?.expDate)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={'overlay overlay-modal ' + styles} onClick={close} />\r\n            <Zoom bottom collapse when={isOpen}>\r\n                <div className={'modal ' + styles}>\r\n                    <div className='modal-container'>\r\n                        <div className='header-container position-relative'>\r\n                            <Avatar clases='modal-avatar img-avatar-container' />\r\n                            <div className='title-container'>\r\n                                <h3 className='clamp clamp-2'>{data?.title}</h3>\r\n                                <p>{\r\n                                    data?.status == 'DISPONIBLE' || isTakenByMe && data?.status == 'HECHO'\r\n                                        ?\r\n                                        getDateText(data?.createdAt.seconds * 1000)\r\n                                        :\r\n                                        isTakenByMe && data?.status == 'TOMADO'\r\n                                            ?\r\n                                            getExpDateText(data?.expDate.seconds * 1000)\r\n                                            :\r\n                                            null\r\n                                }</p>\r\n                            </div>\r\n                            <FontAwesomeIcon icon={faAngleDown} onClick={close} className='close-icon' />\r\n                        </div>\r\n                        <div className='description-container'>\r\n                            <h4>Tipo de diseño</h4>\r\n                            <p>\r\n                                <span className={icon + ' mr-1'}>{data?.icon}</span>\r\n                                {name}\r\n                            </p>\r\n                            {\r\n                                data?.designType == 'CR'\r\n                                &&\r\n                                <>\r\n                                    <h4>Días para el lanzamiento</h4>\r\n                                    <p>{data?.daysLeft}</p>\r\n                                </>\r\n                            }\r\n                            <h4>¿Qué me gustaría ver?</h4>\r\n                            <p>{data?.intention || 'No hay especificaciones'}</p>\r\n                            <h4>Boceto de referencia</h4>\r\n                            {\r\n                                data?.urlImg\r\n                                    ?\r\n                                    <div>\r\n                                        <a target='_blank' href={data?.urlImg}>\r\n                                            <img src={data?.urlImg} alt='img-boceto' className='sample-design-detail' />\r\n                                        </a>\r\n                                    </div>\r\n                                    :\r\n                                    <p>No hay boceto de referencia</p>\r\n                            }\r\n                            <h4>Link de la obra</h4>\r\n                            {\r\n                                formattedLink\r\n                                    ?\r\n                                    <a target='_blank' className='clamp clamp-1' href={formattedLink}>{formattedLink}</a>\r\n                                    :\r\n                                    <p>No existe link</p>\r\n                            }\r\n                            <h4>Pseudónimo del autor</h4>\r\n                            <p>{data?.author || 'Sin nombre'}</p>\r\n                            {\r\n                                isTakenByMe\r\n                                &&\r\n                                <>\r\n                                    <h4>Datos de contacto</h4>\r\n                                    <p className=\"m-0\"><b>Nombre:</b> {data?.name}</p>\r\n                                    <p className=\"m-0\"><b>Contacto:</b> {data?.phone} ({getMessengerTypeName(messengerType)})</p>\r\n                                    {\r\n                                        messengerType == 'WSP' && formattedPhone\r\n                                        &&\r\n                                        <button onClick={() => window.open('https://web.whatsapp.com/send?phone=' + formattedPhone)} className='button button-whatsapp button-blue button-option-request my-1'>\r\n                                            <FontAwesomeIcon color={'#fff'} icon={faWhatsapp} className='icon' />\r\n                                                Contactar\r\n                                        </button>\r\n                                    }\r\n                                    <p className=\"m-0 mb-2\"><b>Correo:</b> {data?.email}</p>\r\n                                </>\r\n                            }\r\n                        </div>\r\n                        <div className=\"footer-card-container\">\r\n                            <div className='button-container'>\r\n                                {\r\n                                    loading\r\n                                        ?\r\n                                        <button onClick={() => { }} className='button button-blue button-option-request'>\r\n                                            Cargando\r\n                                                {' '}\r\n                                            <ClipLoader color={'#fff'} loading={true} css={overrideSpinnerInline} size={22} />\r\n                                        </button>\r\n                                        :\r\n                                        <>\r\n                                            <>\r\n                                                {\r\n                                                    data?.status == 'DISPONIBLE'\r\n                                                        ?\r\n                                                        <button onClick={() => openConfirmationModal(true, 'TAKE_REQUEST')} className='button button-blue button-option-request'>\r\n                                                            <FontAwesomeIcon color={'#fff'} icon={faHandPaper} className='icon' />\r\n                                                            Tomar pedido\r\n                                                        </button>\r\n                                                        :\r\n                                                        data?.status == 'TOMADO' && isTakenByMe\r\n                                                            ?\r\n                                                            <>\r\n                                                                <button onClick={() => history.push('prep_diseno', { data })} className='button button-green button-option-request'>\r\n                                                                    <FontAwesomeIcon color={'#fff'} icon={faPaintBrush} className='icon' />\r\n                                                                    Iniciar diseño\r\n                                                                </button>\r\n                                                                <button onClick={() => openConfirmationModal(true, 'RESIGN_REQUEST')} className='button button-dark-purple button-option-request'>\r\n                                                                    <FontAwesomeIcon color={'#fff'} icon={faExchangeAlt} className='icon' />\r\n                                                                    Devolver pedido\r\n                                                                </button>\r\n                                                            </>\r\n                                                            :\r\n                                                            null\r\n                                                }\r\n                                            </>\r\n                                            {\r\n                                                data?.status == 'HECHO' && isTakenByMe\r\n                                                && (\r\n                                                    <button onClick={() => history.push(`prev_resultado?id=${data.id}&origin=tl`)} className='button button-green button-option-request'>\r\n                                                        <FontAwesomeIcon color={'#fff'} icon={faEye} className='icon' />\r\n                                                        Ir a resultado\r\n                                                    </button>\r\n                                                )\r\n                                            }\r\n                                            <button onClick={close} className='button button-red button-option-request'>\r\n                                                <FontAwesomeIcon color={'#fff'} icon={faTimes} className='icon' />\r\n                                                Cerrar\r\n                                            </button>\r\n                                        </>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Zoom>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Modal;","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\modal\\critiqueDetail.js",["412","413","414","415","416","417","418","419","420","421","422"],"import React, { useContext } from 'react';\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport Avatar from '../avatar';\r\nimport Zoom from 'react-reveal/Zoom';\r\nimport { getDateText, getExpDateText, getMessengerTypeName, getFormattedPhone, getAbrevPointName, extractLink } from '../../helpers/functions';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { AuthContext } from '../../context/AuthContext';\r\nimport { css } from \"@emotion/core\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faAngleDown, faExchangeAlt, faEye, faHandPaper, faTasks, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { faWhatsapp } from '@fortawesome/free-brands-svg-icons';\r\nimport './modals.css';\r\n\r\nconst overrideSpinnerInline = css`\r\n  display: inline-block;\r\n  margin-left: .6rem;\r\n  vertical-align: middle;\r\n`;\r\n\r\nconst Modal = ({ isOpen, data, loading, openConfirmationModal, close }) => {\r\n\r\n    const history = useHistory();\r\n\r\n    const { logged } = useContext(AuthContext);\r\n    const isTakenByMe = data?.takenBy == logged.uid;\r\n    const messengerType = data?.messengerType;\r\n    const formattedPhone = getFormattedPhone(data?.phone);\r\n    const formattedLink = extractLink(data?.link);\r\n\r\n    let styles = '';\r\n    if (isOpen) {\r\n        styles = 'open';\r\n    } else {\r\n        styles = 'close';\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={'overlay overlay-modal ' + styles} onClick={close} />\r\n            <Zoom bottom collapse when={isOpen}>\r\n                <div className={'modal ' + styles}>\r\n                    <div className='modal-container'>\r\n                        <div className='header-container position-relative'>\r\n                            <Avatar clases='modal-avatar img-avatar-container' />\r\n                            <div className='title-container'>\r\n                                <h3 className='clamp clamp-2'>{data?.title}</h3>\r\n                                <p>{\r\n                                    data?.status == 'DISPONIBLE' || isTakenByMe && data?.status == 'HECHO'\r\n                                        ?\r\n                                        getDateText(data?.createdAt.seconds * 1000)\r\n                                        :\r\n                                        isTakenByMe && data?.status == 'TOMADO'\r\n                                            ?\r\n                                            getExpDateText(data?.expDate.seconds * 1000)\r\n                                            :\r\n                                            null\r\n                                }</p>\r\n                            </div>\r\n                            <FontAwesomeIcon icon={faAngleDown} onClick={close} className='close-icon' />\r\n                        </div>\r\n                        <div className='description-container'>\r\n                            <p>{data?.about || 'No hay descripción'}</p>\r\n                            <h4>Link de la obra</h4>\r\n                            {\r\n                                formattedLink ?\r\n                                    <a target='_blank' className='clamp clamp-1' href={formattedLink}>{formattedLink}</a>\r\n                                    :\r\n                                    <p>No existe link</p>\r\n                            }\r\n                            <h4>¿Qué quiero transmitir?</h4>\r\n                            <p>{data?.intention || 'No hay intención'}</p>\r\n                            <h4>Puntos a criticar</h4>\r\n                            <ul>\r\n                                {\r\n                                    data?.points?.map(point => (\r\n                                        <li key={point}>{getAbrevPointName(point)}</li>\r\n                                    ))\r\n                                }\r\n                            </ul>\r\n                            {\r\n                                (!data?.points || data?.points?.length < 1)\r\n                                &&\r\n                                <p>No se han especificado puntos</p>\r\n                            }\r\n                            {\r\n                                isTakenByMe\r\n                                &&\r\n                                <>\r\n                                    <h4>Datos de contacto</h4>\r\n                                    <p className=\"m-0\"><b>Nombre:</b> {data?.name}</p>\r\n                                    <p className=\"m-0\"><b>Contacto:</b> {data?.phone} ({getMessengerTypeName(messengerType)})</p>\r\n                                    {\r\n                                        messengerType == 'WSP' && formattedPhone\r\n                                        &&\r\n                                        <button onClick={() => window.open('https://web.whatsapp.com/send?phone=' + formattedPhone)} className='button button-whatsapp button-blue button-option-request my-1'>\r\n                                            <FontAwesomeIcon color={'#fff'} icon={faWhatsapp} className='icon' />\r\n                                                Contactar\r\n                                        </button>\r\n                                    }\r\n                                    <p className=\"m-0 mb-2\"><b>Correo:</b> {data?.email}</p>\r\n                                </>\r\n                            }\r\n                        </div>\r\n                        <div className=\"footer-card-container\">\r\n                            <div className='button-container'>\r\n                                {\r\n                                    loading\r\n                                        ?\r\n                                        <button onClick={() => { }} className='button button-blue button-option-request'>\r\n                                            Cargando\r\n                                                {' '}\r\n                                            <ClipLoader color={'#fff'} loading={true} css={overrideSpinnerInline} size={22} />\r\n                                        </button>\r\n                                        :\r\n                                        <>\r\n                                            <>\r\n                                                {\r\n                                                    data?.status == 'DISPONIBLE'\r\n                                                        ?\r\n                                                        <button onClick={() => openConfirmationModal(true, 'TAKE_REQUEST')} className='button button-blue button-option-request'>\r\n                                                            <FontAwesomeIcon color={'#fff'} icon={faHandPaper} className='icon' />\r\n                                                            Tomar pedido\r\n                                                        </button>\r\n                                                        :\r\n                                                        data?.status == 'TOMADO' && isTakenByMe\r\n                                                            ?\r\n                                                            <>\r\n                                                                <button onClick={() => history.push('prep_critica', { data })} className='button button-green button-option-request'>\r\n                                                                    <FontAwesomeIcon color={'#fff'} icon={faTasks} className='icon' />\r\n                                                                    Iniciar crítica\r\n                                                                </button>\r\n                                                                <button onClick={() => openConfirmationModal(true, 'RESIGN_REQUEST')} className='button button-dark-purple button-option-request'>\r\n                                                                    <FontAwesomeIcon color={'#fff'} icon={faExchangeAlt} className='icon' />\r\n                                                                    Devolver pedido\r\n                                                                </button>\r\n                                                            </>\r\n                                                            :\r\n                                                            null\r\n                                                }\r\n                                            </>\r\n                                            {\r\n                                                data?.status == 'HECHO' && isTakenByMe\r\n                                                && (\r\n                                                    <button onClick={() => history.push(`prev_resultado?id=${data.id}&origin=tl`)} className='button button-green button-option-request'>\r\n                                                        <FontAwesomeIcon color={'#fff'} icon={faEye} className='icon' />\r\n                                                        Ir a resultado\r\n                                                    </button>\r\n                                                )\r\n                                            }\r\n                                            <button onClick={close} className='button button-red button-option-request'>\r\n                                                <FontAwesomeIcon color={'#fff'} icon={faTimes} className='icon' />\r\n                                                Cerrar\r\n                                            </button>\r\n                                        </>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </Zoom>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Modal;","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\footer\\footer.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\data\\data.js",["423","424"],"import ImgColaboracion from '../img/colaboracion.svg';\r\nimport ImgFoco from '../img/bulb.png';\r\nimport ImgLibro from '../img/books.svg';\r\nimport ImgMaquinaDeEscribir from '../img/typewriter.svg';\r\nimport ImgServCritica from '../img/ser-critica.svg';\r\nimport ImgServDiseno from '../img/ser-diseno.svg';\r\nimport ImgServCoreccion from '../img/ser-correccion.svg';\r\nimport ImgServBooktrailer from '../img/ser-bookt.svg';\r\nimport ImgServEntrevista from '../img/ser-entrev.svg';\r\nimport ImgServPromo from '../img/ser-promo.svg';\r\nimport ImgPrevCritica from '../img/pre-critica.png';\r\nimport ImgPrevDiseno from '../img/pre-diseno.png';\r\nimport ImgPrevCorreccion from '../img/pre-correccion.png';\r\nimport ImgPrevServicio from '../img/pre-servicio.png';\r\n\r\nexport const carrouselData = [\r\n    { text: 'La editorial comunitaria que siempre habías esperado', buttonText: 'Únete al grupo', href: 'https://www.facebook.com/groups/1004324056570387', bg: 'radial-gradient(farthest-corner at 0px 100%, rgb(82 70 198) 10%, rgba(139, 129, 236, 1) 50%)', img: ImgColaboracion },\r\n    { text: 'Gran curso de guión, texto y novela: Crea historias de calidad superior', buttonText: '¡Me interesa!', pushTo: 'ins_evento/OBRA-PROFESIONAL-CCADENA-2', bg: 'linear-gradient(to right, #000000, #434343)', img: ImgLibro, style: { bottom: '-50px', right: '-100px' } }\r\n]\r\n\r\nexport const critiquePoints = [{ id: 'INTENCION', name: 'Transmisión de mi intención', abrev: '¿Se entiende lo que quiero transmitir?' }, { id: 'ENGANCHE', name: 'Enganche de mi obra', abrev: '¿Qué tanto engancha mi obra?' }, { id: 'ORTOGRAFIA', name: 'Ortografía', abrev: '¿Qué tal fue mi ortografía?' }];\r\n\r\nexport const correctionPoints = [{ id: 'ORTOGRAFIA', name: 'Ortografía', abrev: 'Ortografía' }];\r\n\r\nexport const designTypes = [{ type: 'CR', icon: 'fas fa-burn', name: 'Cuenta regresiva', tag: 'Nuevo', displayInDropdown: false }, { type: 'POR', icon: 'fas fa-book', name: 'Portada de libro' }, { type: 'BAN-WSP', icon: 'fab fa-whatsapp', name: 'Estado de Whatsapp', tag: 'Nuevo' }, { type: 'BAN-FB', icon: 'fab fa-facebook', name: 'Banner para Facebook' }, { type: 'BAN-INS', icon: 'fab fa-instagram', name: 'Banner para Instagram' }, { type: 'BAN-WTT', icon: 'fas fa-book-open', name: 'Banner para Wattpad' }, { type: 'BAN', icon: 'far fa-window-restore', name: 'Banner para post', displayInDropdown: false }];\r\n\r\nexport const contactTypes = [{ type: 'WSP', icon: 'fab fa-whatsapp', name: 'Whatsapp' }, { type: 'TLG', icon: 'fab fa-telegram', name: 'Telegram' }];\r\n\r\nexport const requestStatuses = [{ id: 'DISPONIBLE', name: 'Nuevos', statistics: 0 }, { id: 'TOMADO', name: 'Tomados', statistics: 0 }, { id: 'HECHO', name: 'Listos', statistics: 0 }];\r\n\r\nexport const contributors = ['@Gricardov', '@OsitaLectora1', '@CaroDePearolMorales', '@Marylundhautor', '@LuzCespedesMartinez', '@Irisadk94', '@JackDreamer', '@PiccolaScrittrice', '@SayraBaylon', '@Alkaiid', '@TristeMancebo', '@Gianna04G02DL', '@Soytatyautor'];\r\n\r\n// Para los roles de las dinámicas\r\nexport const inscriptionTypes = [{ type: 'AUD', icon: 'fas fa-users', name: 'Audiencia' }, { type: 'AUT', icon: 'fas fa-pencil-alt', name: 'Autor', displayInDropdown: false }];\r\n\r\n// Para los servicios que pueden brindar las personas y editoriales\r\nexport const editorialServices = [{ id: 'CRITICA', name: 'Críticas', editorialImg: ImgServCritica, prevImg: ImgPrevCritica, color: '#F8FFD5', icon: 'far fa-lightbulb' }, { id: 'DISENO', name: 'Diseños', editorialImg: ImgServDiseno, prevImg: ImgPrevDiseno, color: '#FFF0D5', icon: 'fas fa-magic', }, { id: 'CORRECCION', name: 'Correcciones', editorialImg: ImgServCoreccion, prevImg: ImgPrevCorreccion, color: '#D5F8FF', icon: 'fas fa-tasks', }, { id: 'ENTREVISTA', name: 'Entrevistas', editorialImg: ImgServEntrevista, prevImg: ImgPrevServicio, color: '#C7D7FF' }, { id: 'BOOKTRAILER', name: 'Booktrailers', editorialImg: ImgServBooktrailer, prevImg: ImgPrevServicio, color: '#E1DEFF' }, { id: 'DIFUSION', name: 'Difusión', editorialImg: ImgServPromo, prevImg: ImgPrevServicio, color: '#CFFFE2' }];\r\n\r\n// Para las pestañas de las pestañas de editoriales\r\nexport const editorialTabs = [{ id: 'SERV', name: 'Servicios' }, { id: 'MIEM', name: 'Miembros' }, { id: 'ACER', name: 'Acerca de' }];\r\n\r\n// Para los roles que pueden desempeñar los usuarios\r\nexport const userRoles = [{ id: 'FOUN-E', name: 'Fundador(a) de su editorial' }, { id: 'COLAB', name: 'Colaborador(a) de editorial' }, { id: 'CREA-TL', name: 'Creador de Temple Luna' }, { id: 'MOD-TL', name: 'Moderador de Temple Luna' }, { id: 'SUP-CRITICA', name: 'Supervisor(a) de críticas' }, { id: 'SUP-CORRECCION', name: 'Supervisor(a) de correcciones' }, { id: 'SUP-DISENO', name: 'Supervisor(a) de diseños' }];","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\hooks\\useStepObserver.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\stories-carrousel\\carrousel.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\home-panorama\\panorama.js",["425","426","427"],"import React, { useState, useEffect } from 'react'\r\nimport Navbar from '../navbar'\r\nimport Fade from 'react-reveal/Fade';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faAngleRight } from '@fortawesome/free-solid-svg-icons';\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport { carrouselData } from '../../data/data';\r\nimport './panorama.css'\r\n\r\nlet interval;\r\n\r\nexport const Panorama = () => {\r\n    const [index, setIndex] = useState(0);\r\n    const [autoScroll, setAutoScroll] = useState(true);\r\n\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if (autoScroll) {\r\n            interval = setInterval(() => {\r\n                if (index < carrouselData.length - 1) {\r\n                    setIndex(index + 1);\r\n                } else {\r\n                    setIndex(0);\r\n                }\r\n            }, 5000)\r\n            return () => {\r\n                clearInterval(interval)\r\n            }\r\n        } else {\r\n            return () => {\r\n                clearInterval(interval)\r\n            }\r\n        }\r\n    }, [index]);\r\n\r\n    const showSlide = (selectedIndex) => {\r\n        setAutoScroll(false);\r\n        setIndex(selectedIndex);\r\n    }\r\n\r\n    const goTo = ({ href, scrollTo, pushTo }) => {\r\n        if (href) {\r\n            window.open(href);\r\n        } else if (pushTo) {\r\n            history.push(pushTo);\r\n        } else if (scrollTo) {\r\n            const element = document.getElementById(scrollTo);\r\n            element.scrollIntoView();\r\n        }\r\n    }\r\n\r\n    const slide = carrouselData[index];\r\n\r\n    return (\r\n        <div className='panorama'>\r\n            <Navbar startTransparent={true} />\r\n            <TransitionGroup className='panorama-slide-container'>\r\n\r\n                <CSSTransition\r\n                    classNames={`panorama-slide-reverse`}\r\n                    timeout={{ enter: 1000, exit: 1000 }}\r\n                    key={index}>\r\n\r\n                    <div className={`slide ${slide.orientation}`} style={{ background: slide.bg }}>\r\n                        <div className='slide-content'>\r\n                            <div className='container-controls-header'>\r\n                                <Fade left>\r\n                                    <h1>{slide.text}</h1>\r\n                                </Fade>\r\n                                <Fade left>\r\n                                    {\r\n                                        <a target='_blank' rel=\"noreferrer\" onClick={() => goTo(slide)} style={slide.buttonStyles} className='button button-green'>\r\n                                            {slide.buttonText}\r\n                                            {' '}\r\n                                            <FontAwesomeIcon icon={faAngleRight} size='lg' />\r\n                                        </a>\r\n                                    }\r\n\r\n                                </Fade>\r\n                            </div>\r\n                            <div className='img-container' style={slide.style}>\r\n                                <img src={slide.img} className='img-colaboration' alt='img-colaboracion' />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </CSSTransition>\r\n\r\n            </TransitionGroup>\r\n            <div className='dots-panorama'>\r\n                {\r\n                    carrouselData.map((_, i) => <div key={i + 1} onClick={() => showSlide(i)} className={`dot ${i == index ? 'selected' : ''}`} />)\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\forms\\step-manager\\step-manager.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\navbar\\index.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\request-card\\index.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\dropdown-image\\index.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\drawer\\drawer.js",["428","429","430"],"import React, { useEffect, useContext } from 'react';\r\nimport { DrawerContext } from '../../context/DrawerContext';\r\nimport { AuthContext } from '../../context/AuthContext';\r\nimport { getProfileStorage } from '../../helpers/userStorage';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { logout } from '../../api';\r\nimport './drawer.css';\r\n\r\nconst Drawer = () => {\r\n\r\n    const { logged } = useContext(AuthContext);\r\n    const { isOpen, close } = useContext(DrawerContext);\r\n\r\n    let history = useHistory();\r\n\r\n    const logoutUser = (e) => {\r\n        e.preventDefault();\r\n        logout()\r\n            .then(res => {\r\n                if (res) {\r\n                    navigateTo('/login');\r\n                }\r\n            })\r\n    }\r\n\r\n    const navigateTo = (route) => {\r\n        history.push(route);\r\n        close();\r\n    }\r\n\r\n    const { qFollowName } = getProfileStorage() || {};\r\n\r\n    useEffect(() => {\r\n        if (isOpen) {\r\n            document.body.style.overflow = 'hidden';\r\n        } else {\r\n            document.body.style.overflow = 'unset';\r\n        }\r\n    }, [isOpen]);\r\n\r\n    let styles = '';\r\n    if (isOpen) {\r\n        styles = 'open';\r\n    } else {\r\n        styles = 'close';\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={'overlay ' + styles} onClick={close}>\r\n            </div>\r\n            <div className={'drawer ' + styles}>\r\n                {\r\n                    logged\r\n                        ?\r\n                        <>\r\n                            <a onClick={() => navigateTo('/admin')} className='btn-drawer'>\r\n                                Pedidos\r\n                            </a>\r\n                            <a onClick={() => navigateTo('/perfil/' + qFollowName)} className='btn-drawer'>\r\n                                Mi perfil\r\n                            </a>\r\n                            <a onClick={logoutUser} className='btn-drawer'>\r\n                                Salir\r\n                        </a>\r\n                        </>\r\n                        :\r\n                        <>\r\n                            <Link to='/sol_critica' onClick={close} className='btn-drawer'>\r\n                                Pide tu crítica\r\n                            </Link>\r\n                            <Link to='/sol_diseno' onClick={close} className='btn-drawer'>\r\n                                Pide tu diseño\r\n                            </Link>\r\n                            <Link to='/login' onClick={close} className='btn-drawer'>\r\n                                Login de creativos\r\n                            </Link>\r\n                        </>\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Drawer;","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\tabs\\index.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\tag\\index.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\forms\\forms-steps\\index.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\loading-screen\\index.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\helpers\\functions.js",["431","432","433","434","435","436","437"],"import moment from 'moment';\r\nimport { designTypes, contactTypes, critiquePoints, contributors, editorialServices, userRoles } from '../data/data';\r\nimport WattpadIcon from '../img/wattpad.svg';\r\nimport FacebookIcon from '../img/facebook.svg';\r\nimport TwitterIcon from '../img/twitter.svg';\r\nimport InstaIcon from '../img/instagram.svg';\r\nimport BuenovelaIcon from '../img/buenovela.png';\r\nimport InkspiredIcon from '../img/inkspired.png';\r\nimport YoutubeIcon from '../img/youtube.svg';\r\nimport LinkIcon from '../img/link.svg';\r\n\r\nimport \"moment/locale/es\";\r\n\r\nexport const getPointNameFromKey = (key) => {\r\n    return '';\r\n}\r\n\r\nexport const getDateText = (dateMs) => {\r\n    let dayPortion = '';\r\n    const momentObj = moment(dateMs);\r\n    if (momentObj.isSame(moment(), 'day')) {\r\n        dayPortion = momentObj.format('[Hoy, a las] hh:mma');\r\n    }\r\n    else if (momentObj.isSame(moment().subtract(1, 'days'), 'day')) {\r\n        dayPortion = momentObj.format('[Ayer, a las] hh:mma');\r\n    }\r\n    else {\r\n        dayPortion = momentObj.format('dddd DD/MM/YY hh:mma');\r\n    }\r\n    return toSentence(dayPortion);\r\n}\r\n\r\nexport const getExpDateText = (expDateMs) => {\r\n    let result = 'Vence en ';\r\n    let totalMinutes = moment(expDateMs).diff(moment(), 'minutes', true);\r\n    if (totalMinutes < 0) {\r\n        result = 'Venció hace ';\r\n        totalMinutes *= -1;\r\n    }\r\n\r\n    const totalDays = totalMinutes / 1440;\r\n    const wholeDays = Math.trunc(totalDays);\r\n    const totalHours = (totalDays % 1) * 24;\r\n    const wholeHours = Math.trunc(totalHours);\r\n    const wholeMinutes = Math.trunc((totalHours % 1) * 60);\r\n\r\n    if (wholeDays >= 1) {\r\n        result += wholeDays + ` dia${wholeDays > 1 ? 's' : ''}`;\r\n    }\r\n\r\n    if (wholeHours >= 1) {\r\n        result += ', ' + wholeHours + ` hora${wholeHours > 1 ? 's' : ''}`;\r\n    }\r\n\r\n    if (wholeMinutes >= 1 && wholeDays < 1) {\r\n        result += ', ' + wholeMinutes + ` minuto${wholeMinutes > 1 ? 's' : ''}`;\r\n    }\r\n    return result;\r\n}\r\n\r\nexport const toSentence = (text, limit) => {\r\n    limit = !limit ? text.length : limit;\r\n    if (text && text.length > 0) {\r\n        return (text.substring(0, 1).toUpperCase() + text.substring(1, limit).toLowerCase()).trim();\r\n    } else {\r\n        return '';\r\n    }\r\n}\r\n\r\nexport const toName = (rawName) => {\r\n    let nameArray = rawName.replace(/'.'/g, '').trim().split(' ');\r\n    nameArray = nameArray.filter(name => name != '').map(name => name && toSentence(name.trim()));\r\n    return nameArray.join(' ');\r\n}\r\n\r\nexport const getMessengerTypeName = (type) => {\r\n    const messengerType = contactTypes.find(c => c.type == type);\r\n    if (messengerType) {\r\n        return messengerType.name;\r\n    }\r\n    return '';\r\n}\r\n\r\nexport const getDesignType = (type) => {\r\n    const obj = designTypes.find(e => e.type == type);\r\n    if (obj) {\r\n        return obj;\r\n    }\r\n    return {};\r\n}\r\n\r\nexport const getAbrevPointName = (id) => {\r\n    const obj = critiquePoints.find(e => e.id == id);\r\n    if (obj) {\r\n        return obj.abrev;\r\n    }\r\n    return '';\r\n}\r\n\r\nexport const getFormattedPhone = (rawPhone) => {\r\n    let result = '';\r\n    if (rawPhone) {\r\n        result = rawPhone.trim().replace(/' '/g, '');\r\n        if (result[0] != '+') {\r\n            result = '+' + result;\r\n        }\r\n        return result;\r\n    }\r\n    return null;\r\n}\r\n\r\nexport const extractLink = (rawLink) => {\r\n    if (rawLink) {\r\n        const matchedArray = rawLink.match(/(?:(?:https?|ftp):\\/\\/)?[\\w/\\-?=%.]+\\.[\\w/\\-&?=%.]+/g);\r\n        if (matchedArray) {\r\n            return matchedArray[0];\r\n        }\r\n    }\r\n    return '';\r\n}\r\n\r\nexport const getRandomContributorName = () => {\r\n    const min = Math.ceil(0);\r\n    const max = Math.floor(contributors.length - 1);\r\n    const number = Math.floor(Math.random() * (max - min + 1)) + min;\r\n    return contributors[number];\r\n}\r\n\r\nexport const hexToRgb = (hex) => {\r\n    hex = hex.substring(1);\r\n    var bigint = parseInt(hex, 16);\r\n    var r = (bigint >> 16) & 255;\r\n    var g = (bigint >> 8) & 255;\r\n    var b = bigint & 255;\r\n\r\n    return r + \",\" + g + \",\" + b;\r\n}\r\n\r\n// Verifica si una cadena contiene alguno de los términos del arreglo\r\nexport const stringContainsAnyOf = (mainString, coincidences) => {\r\n    return coincidences.some(c => mainString.includes(c));\r\n}\r\n\r\n// Obtiene el servicio según id\r\nexport const getServiceById = (id) => {\r\n    return editorialServices.find(service => service.id == id);\r\n}\r\n\r\n// Obtiene el rol de usuario según id\r\nexport const getUserRoleById = (id) => {\r\n    return userRoles.find(role => role.id == id);\r\n}\r\n\r\n// Obtiene el ícono del perfil editorial, según red social\r\nexport const getSnIconByUrl = (url) => {\r\n    if (extractLink(url)) {\r\n        if (stringContainsAnyOf(url, ['my.w.tt', 'wattpad.'])) {\r\n            return {\r\n                className: 'sn-wattpad',\r\n                imgSrc: WattpadIcon\r\n            }\r\n        } else if (stringContainsAnyOf(url, ['fb.', 'facebook.'])) {\r\n            return {\r\n                className: 'sn-facebook',\r\n                imgSrc: FacebookIcon\r\n            }\r\n        } else if (stringContainsAnyOf(url, ['twitter.'])) {\r\n            return {\r\n                className: 'sn-twitter',\r\n                imgSrc: TwitterIcon\r\n            }\r\n        } else if (stringContainsAnyOf(url, ['instagram.'])) {\r\n            return {\r\n                className: 'sn-instagram',\r\n                imgSrc: InstaIcon\r\n            }\r\n        } else if (stringContainsAnyOf(url, ['buenovela.'])) {\r\n            return {\r\n                className: 'sn-buenovela',\r\n                imgSrc: BuenovelaIcon\r\n            }\r\n        } else if (stringContainsAnyOf(url, ['getinkspired.'])) {\r\n            return {\r\n                className: 'sn-inkspired',\r\n                imgSrc: InkspiredIcon\r\n            }\r\n        } else if (stringContainsAnyOf(url, ['youtube.'])) {\r\n            return {\r\n                className: 'sn-youtube',\r\n                imgSrc: YoutubeIcon\r\n            }\r\n        }\r\n        else {\r\n            return {\r\n                className: 'sn-generic-link',\r\n                imgSrc: LinkIcon\r\n            }\r\n        }\r\n    } else {\r\n        return null;\r\n    }\r\n}","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\modal\\confirmationModal.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\navbar\\navbar.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\request-card\\card.js",["438","439","440","441","442","443","444","445","446","447","448","449","450"],"import React, { useState, useContext } from 'react';\r\nimport Avatar from '../avatar';\r\nimport FeedbackModal from '../../componentes/modal/detailRequestModal';\r\nimport { getDateText, getExpDateText } from '../../helpers/functions';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { AuthContext } from '../../context/AuthContext';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faEdit, faPaintBrush, faEye, faBoxOpen, faTasks, faHeart, faCommentDots } from '@fortawesome/free-solid-svg-icons';\r\nimport './card.css'\r\n\r\nconst Card = React.forwardRef(({ data, select, showFeedback }, ref) => {\r\n\r\n    const { logged } = useContext(AuthContext);\r\n\r\n    const history = useHistory();\r\n\r\n    const { likes, feedback, takenBy } = data;\r\n    const isTakenByMe = takenBy == logged.uid;\r\n\r\n    return (\r\n        <>\r\n            <div ref={ref} className='request-card-container'>\r\n                <div className='header-container'>\r\n                    <Avatar clases='request-avatar img-avatar-container' />\r\n                    <div className='title-container'>\r\n                        <h4 className='clamp clamp-1'>{data.title}</h4>\r\n                        <p>\r\n                            {\r\n                                data.status == 'DISPONIBLE' || isTakenByMe && data.status == 'HECHO'\r\n                                    ?\r\n                                    getDateText(data.createdAt.seconds * 1000)\r\n                                    :\r\n                                    isTakenByMe && data.status == 'TOMADO'\r\n                                        ?\r\n                                        getExpDateText(data.expDate.seconds * 1000)\r\n                                        :\r\n                                        null\r\n                            }\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n                <div className='description-container'>\r\n                    <p className='clamp clamp-2'>\r\n                        {data.about || data.intention}\r\n                    </p>\r\n                </div>\r\n                <div className='footer-card-container'>\r\n                    <div className='button-container'>\r\n                        {\r\n                            data.status == 'TOMADO' && isTakenByMe\r\n                            && (\r\n                                data.type == 'CRITICA'\r\n                                    ?\r\n                                    <button onClick={() => history.push('prep_critica', { data })} className='button button-green button-option-request'>\r\n                                        <FontAwesomeIcon color={'#fff'} icon={faEdit} className='icon' />\r\n                                        Iniciar crítica\r\n                                    </button>\r\n                                    :\r\n                                    data.type == 'DISENO'\r\n                                        ?\r\n                                        <button onClick={() => history.push('prep_diseno', { data })} className='button button-green button-option-request'>\r\n                                            <FontAwesomeIcon color={'#fff'} icon={faPaintBrush} className='icon' />\r\n                                            Iniciar diseño\r\n                                        </button>\r\n                                        :\r\n                                        data.type == 'CORRECCION'\r\n                                            ?\r\n                                            <button onClick={() => history.push('prep_correccion', { data })} className='button button-green button-option-request'>\r\n                                                <FontAwesomeIcon color={'#fff'} icon={faTasks} className='icon' />\r\n                                    Iniciar corrección\r\n                                </button>\r\n                                            :\r\n                                            null\r\n                            )\r\n                        }\r\n                        {\r\n                            data.status == 'HECHO' && isTakenByMe\r\n                            && (\r\n                                <button onClick={() => history.push(`prev_resultado?id=${data.id}&origin=tl`)} className='button button-green button-option-request'>\r\n                                    <FontAwesomeIcon color={'#fff'} icon={faEye} className='icon' />\r\n                                Ir a resultado\r\n                                </button>\r\n                            )\r\n                        }\r\n                        <button onClick={() => select(data)} className='button button-blue button-option-request'>\r\n                            <FontAwesomeIcon color={'#fff'} icon={faBoxOpen} className='icon' />\r\n                        Abrir\r\n                </button>\r\n                    </div>\r\n                </div>\r\n                <div className='action-group action-group-absolute action-group-mobile-first'>\r\n                    {\r\n                        likes\r\n                        &&\r\n                        <button className='action-button action-button-heart'>\r\n                            {likes + ' '}\r\n                            <FontAwesomeIcon icon={faHeart} />\r\n                        </button>\r\n                    }\r\n                    {\r\n                        feedback\r\n                        &&\r\n                        <button className='action-button action-button-comment' onClick={() => showFeedback(data)}>\r\n                            {'1 '}\r\n                            <FontAwesomeIcon icon={faCommentDots} />\r\n                        </button>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n})\r\n\r\nexport default Card;","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\dropdown-image\\dropdown.js",["451"],"import React, { useRef, useState, useEffect } from 'react';\r\nimport { useOutsideListener } from '../../hooks/useOutsideListener';\r\nimport './dropdown.css';\r\n\r\nconst tamanoIcono = 15;\r\n\r\nconst Dropdown = ({ list, select, stretch, selectedItem }) => {\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const outsideListenerRef = useRef(null); // Escucha cuando se hace click fuera de\r\n    const { outsideListener$ } = useOutsideListener(outsideListenerRef);\r\n\r\n    useEffect(() => {\r\n        outsideListener$.subscribe(() => {\r\n            setOpen(false);\r\n        })\r\n    }, [outsideListener$]);\r\n\r\n    const toggleDropdown = (e) => {\r\n        e.preventDefault();\r\n        setOpen(!open);\r\n    }\r\n\r\n    const selectItem = (e, item) => {\r\n        e.preventDefault();\r\n        setOpen(false);\r\n        select(item);\r\n    }\r\n\r\n    const tag = (text) => (\r\n        text &&\r\n        <span className='dropdown-list-tag'>\r\n            {text}\r\n        </span>\r\n    )\r\n\r\n    return (\r\n        <div\r\n            ref={outsideListenerRef}\r\n            className='container-select-image'>\r\n            <button className={`select-image position-relative ${stretch ? 'stretch' : ''}`} onClick={toggleDropdown}>\r\n                <span className={selectedItem.icon} style={{ marginRight: '1rem', fontSize: tamanoIcono + 'px' }}></span>\r\n                {\r\n                    stretch\r\n                    &&\r\n                    <span className='mr-1 position-relative'>\r\n                        {selectedItem.name}\r\n                        {tag(selectedItem.tag)}\r\n                    </span>\r\n                }\r\n                <span className='fa fa-caret-down'></span>\r\n            </button>\r\n            {\r\n                open\r\n                &&\r\n                <div className={`selectable-list ${stretch ? 'stretch' : ''}`}>\r\n                    {\r\n                        list.map((item, index) => item.displayInDropdown != false && (\r\n                            <div key={index} onClick={(e) => selectItem(e, item)} className='selectable-list-item'>\r\n                                <span className={item.icon} style={{ fontSize: tamanoIcono + 'px' }}></span>\r\n                                {\r\n                                    stretch\r\n                                    &&\r\n                                    <span className='ml-1 position-relative'>\r\n                                        {item.name}\r\n                                        {tag(item.tag)}\r\n                                    </span>\r\n                                }\r\n                            </div>\r\n                        ))\r\n                    }\r\n                </div>\r\n\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dropdown;","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\tabs\\tabs.js",["452","453","454","455"],"import React, { useRef, useState, useEffect } from 'react';\r\nimport ImgVacio from \"../../img/reading-sitting.svg\";\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\nimport { useOutsideListener } from '../../hooks/useOutsideListener';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faAngleDown } from '@fortawesome/free-solid-svg-icons';\r\nimport './tabs.css';\r\n\r\nconst Tabs = ({ tabs, requestMoreData, hasMore, loader, activeIndex, select, initialLoading, theme, children }) => {\r\n\r\n    // Tema\r\n    const style = {\r\n        background: (theme && theme.main) || '',\r\n        color: (theme && theme.contrast) || ''\r\n    };\r\n\r\n    const arrowTogglerRef = useRef(null);\r\n    const [minVisibleTabs, setMinVisibleTabs] = useState(2);\r\n    const [openOptions, setOpenOptions] = useState(false);\r\n    const [width, setWidth] = useState(0);\r\n\r\n    const outsideListenerRef = useRef(null); // Escucha cuando se hace click fuera de\r\n    const { outsideListener$ } = useOutsideListener(outsideListenerRef);\r\n\r\n    const childrenArray = React.Children.toArray(children);\r\n\r\n    const switchTab = (e, index) => {\r\n        e && e.preventDefault();\r\n        setOpenOptions(false);\r\n        select(index);\r\n    }\r\n\r\n    const toggleOptionsContainer = () => {\r\n        setOpenOptions(!openOptions);\r\n    }\r\n\r\n    const updWith = () => {\r\n        setWidth(window.innerWidth);\r\n    }\r\n\r\n    useEffect(() => {\r\n        outsideListener$.subscribe(event => {\r\n            if (arrowTogglerRef.current && !arrowTogglerRef.current.contains(event.target)) {\r\n                setOpenOptions(false);\r\n            }\r\n        })\r\n    }, [outsideListener$, arrowTogglerRef]);\r\n\r\n    useEffect(() => {\r\n        if (width === 0) {\r\n            setWidth(window.innerWidth);\r\n        }\r\n\r\n        // Reinicio la pestaña seleccionada\r\n        switchTab(null, 0);\r\n\r\n        // Establezco el nuevo número visible\r\n        if (width > 991) {\r\n            setMinVisibleTabs(tabs.slice(0, 4).length);\r\n        } else if (width > 300) {\r\n            setMinVisibleTabs(tabs.slice(0, 3).length);\r\n        } else {\r\n            setMinVisibleTabs(tabs.slice(0, 2).length);\r\n        }\r\n\r\n        window.addEventListener('resize', updWith);\r\n        return () => window.removeEventListener('resize', updWith);\r\n    }, [minVisibleTabs, width]);\r\n\r\n    let optionsClasses = 'container-submenu';\r\n    if (openOptions) {\r\n        optionsClasses += ' open';\r\n    } else {\r\n        optionsClasses += ' close';\r\n    }\r\n\r\n    let anchoPestana;\r\n    let desplazamiento;\r\n\r\n    // Recalculo los tamaños\r\n    if (activeIndex < minVisibleTabs) {\r\n        anchoPestana = (100 / minVisibleTabs) + '%';\r\n        desplazamiento = (100 / minVisibleTabs) * activeIndex + '%';\r\n    } else {\r\n        anchoPestana = arrowTogglerRef.current.offsetWidth;\r\n        desplazamiento = (100 / minVisibleTabs) * (minVisibleTabs) + '%';\r\n    }\r\n\r\n    const childrenNum = childrenArray[0].props.children.length;\r\n\r\n    return (\r\n        <div className='main-tabs-container main-tabs-container-loading'>\r\n            <div className='tabs-container' style={{ background: style.background }}>\r\n                <div className=\"material-tabs\">\r\n                    {\r\n                        tabs.slice(0, minVisibleTabs).map((pestana, index) => <a key={index} onClick={(e) => switchTab(e, index)} className={index == activeIndex && 'active'} style={style}>{pestana}</a>)\r\n                    }\r\n                    <span className=\"tab-bar\" style={{ width: anchoPestana, left: desplazamiento, background: style.color }}></span>\r\n                    <span className=\"guide-line\" style={{ background: style.background && 'transparent' }} />\r\n                </div>\r\n                {\r\n                    (tabs.length > minVisibleTabs) &&\r\n                    <>\r\n                        <span ref={arrowTogglerRef} onClick={toggleOptionsContainer} className='btn-switch' style={{ color: style.color }}>\r\n                            <FontAwesomeIcon icon={faAngleDown} size='1x' />\r\n                        </span>\r\n                        <div ref={outsideListenerRef} className={optionsClasses}>\r\n                            <ul>\r\n                                {\r\n                                    tabs.slice(minVisibleTabs, tabs.length).map((e, i) => (\r\n                                        <li key={i} className={minVisibleTabs + i == activeIndex && 'active'} onClick={(e) => switchTab(e, minVisibleTabs + i)}>\r\n                                            {e}\r\n                                        </li>\r\n                                    ))\r\n                                }\r\n                            </ul>\r\n                        </div>\r\n                    </>\r\n                }\r\n            </div>\r\n            {\r\n\r\n                initialLoading\r\n                    ?\r\n                    loader\r\n                    :\r\n                    childrenNum > 0\r\n                        ?\r\n                        <InfiniteScroll\r\n                            className=\"tab-content\"\r\n                            scrollThreshold={0.7}\r\n                            dataLength={childrenNum}\r\n                            next={requestMoreData}\r\n                            hasMore={hasMore}\r\n                            loader={loader}>\r\n                            {\r\n                                childrenArray\r\n                            }\r\n                        </InfiniteScroll>\r\n                        :\r\n                        <div>\r\n                            <img src={ImgVacio} className=\"img-vacio\" alt=\"img-vacio\" />\r\n                            <h2 className=\"text-align-center m-0 text-empty\">Oops! aún nada por aquí</h2>\r\n                        </div>\r\n            }\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Tabs;\r\n","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\tag\\tag.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\forms\\forms-steps\\form-steps.js",["456"],"import React from 'react'\r\nimport './form-steps.css'\r\n\r\nconst Steps = ({ activeIndex, navigateTo, steps }) => {\r\n\r\n    const chunksPercentage = 100 / (steps.length + 1);\r\n    const totalWidth = chunksPercentage * (steps.length - 1);\r\n\r\n    return (\r\n        <div className='form-steps'>\r\n            <div className='line' style={{ left: chunksPercentage + '%', width: totalWidth + '%' }}></div>\r\n            {\r\n                steps.map((step, index) => (\r\n                    <div key={index + 1} className='step-container'>\r\n                        <div onClick={() => navigateTo(index)} className={`form-step ${index == activeIndex ? 'active' : ''}`}>{index + 1}</div>\r\n                        <div className='step-text'>{step}</div>\r\n                    </div>\r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Steps;","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\avatar\\index.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\loading-screen\\loading-screen.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\story-card\\index.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\hooks\\useOutsideListener.js",["457"],"import React, { useRef, useEffect } from \"react\";\r\nimport { Subject } from 'rxjs';\r\n\r\n/**\r\n * Hook that alerts clicks outside of the passed ref\r\n */\r\nexport const useOutsideListener = (ref) => {\r\n\r\n    const outsideListener = useRef(new Subject());\r\n\r\n    useEffect(() => {\r\n        /**\r\n       * Alert if clicked on outside of element\r\n       */\r\n        function handleClickOutside(event) {\r\n            if (ref.current && !ref.current.contains(event.target)) {\r\n                outsideListener.current.next(event);\r\n            }\r\n        }\r\n\r\n        // Bind the event listener\r\n        document.addEventListener(\"mousedown\", handleClickOutside);\r\n        return () => {\r\n            // Unbind the event listener on clean up\r\n            document.removeEventListener(\"mousedown\", handleClickOutside);\r\n        };\r\n    }, [ref]);\r\n\r\n    return {\r\n        outsideListener$: outsideListener.current\r\n    }\r\n\r\n}\r\n","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\avatar\\avatar.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\story-card\\story_card.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\customRouter\\anyRoute.js",["458"],"import React, { useContext } from 'react';\r\nimport LoadingScreen from '../loading-screen';\r\nimport { AuthContext } from '../../context/AuthContext';\r\nimport { Redirect, Route } from 'react-router-dom';\r\n\r\nexport const AnyRoute = ({ Component, ...rest }) => {\r\n\r\n    const { loading } = useContext(AuthContext);\r\n\r\n    if (loading) {\r\n        return <LoadingScreen />\r\n    }\r\n\r\n    return <Route {...rest} render={props => <Component {...props} />} />\r\n}","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\helmet\\index.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\helmet\\helmet-metadata.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\modal\\punctuation.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\speech-bubble\\speech-bubble.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\ins_evento.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\helpers\\validators.js",["459"],"import { extractLink } from './functions';\r\n\r\nexport const isNameInvalid = (name, notRequired) => {\r\n    if (!name && !notRequired) {\r\n        return 'El nombre está vacío';\r\n    }\r\n    else if (!name && notRequired) {\r\n        return null;\r\n    }\r\n    else if (!(/^(?!\\s*$).{1,50}/.test(name))) {\r\n        return 'Tu nombre debe tener de 1 a 50 caracteres';\r\n    }\r\n    else if (!(/^[a-zA-Z\\sáéíóúñÑ]*$/.test(name))) {\r\n        return 'Tu nombre no puede tener caracteres especiales';\r\n    }\r\n}\r\n\r\nexport const isAgeInvalid = (age, notRequired) => {\r\n    if (!age && !notRequired) {\r\n        return 'La edad está vacía';\r\n    }\r\n    else if (!age && notRequired) {\r\n        return null;\r\n    }\r\n    else if (age < 10 || age > 99) {\r\n        return 'Introduce una edad válida';\r\n    }\r\n}\r\n\r\nexport const isPhoneInvalid = (phone, notRequired) => {\r\n    if (!phone && !notRequired) {\r\n        return 'El teléfono está vacío';\r\n    }\r\n    else if (!phone && notRequired) {\r\n        return null;\r\n    }\r\n    else if (!(/(^\\s*$)|(^[+]?[0-9 ]{7,20}$)/).test(phone)) {\r\n        return 'Introduce un teléfono válido';\r\n    }\r\n}\r\n\r\nexport const isEmailInvalid = (email, notRequired) => {\r\n    if (!email && !notRequired) {\r\n        return 'El correo está vacío';\r\n    }\r\n    else if (!email && notRequired) {\r\n        return null;\r\n    }\r\n    else if (!(/^(?!\\s*$).{6,100}/.test(email))) {\r\n        return 'Tu correo debe tener de 6 a 100 caracteres';\r\n    }\r\n    else if (!(/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/).test(email)) {\r\n        return 'Introduce un correo válido';\r\n    }\r\n}\r\n\r\nexport const isLinkInvalid = (link, notRequired) => {\r\n    if (!link && !notRequired) {\r\n        return 'El link está vacío';\r\n    }\r\n    else if (!link && notRequired) {\r\n        return null;\r\n    }\r\n    else if (!(/^(?!\\s*$).{1,500}/.test(link))) {\r\n        return 'Tu link debe tener de 1 a 500 caracteres';\r\n    } else if (!extractLink(link.trim())) {\r\n        return 'Parece que ese link no es válido. Revísalo bien';\r\n    }\r\n}\r\n\r\nexport const isTitleInvalid = (title, notRequired) => {\r\n    if (!title && !notRequired) {\r\n        return 'El título está vacío';\r\n    }\r\n    else if (!title && notRequired) {\r\n        return null;\r\n    }\r\n    else if (!(/^(?!\\s*$).{1,100}/.test(title))) {\r\n        return 'Tu título debe tener de 1 a 100 caracteres';\r\n    }\r\n}\r\n\r\nexport const isAuthorInvalid = (author, notRequired) => {\r\n    if (!author && !notRequired) {\r\n        return 'El autor está vacío';\r\n    }\r\n    else if (!author && notRequired) {\r\n        return null;\r\n    }\r\n    else if (!(/^(?!\\s*$).{1,100}/.test(author))) {\r\n        return 'Tu pseudónimo debe tener de 1 a 100 caracteres';\r\n    }\r\n}\r\n\r\nexport const isIntentionInvalid = (intention, notRequired) => {\r\n    if (!intention && !notRequired) {\r\n        return 'La intención está vacía';\r\n    }\r\n    else if (!intention && notRequired) {\r\n        return null;\r\n    }\r\n    else if (!(/^(?!\\s*$).{1,1000}/.test(intention))) {\r\n        return 'Lo que quieres transmitir debe tener de 1 a 1000 caracteres';\r\n    }\r\n}\r\n\r\nexport const isAboutInvalid = (about, notRequired) => {\r\n    if (!about && !notRequired) {\r\n        return 'El resumen de tu historía está vacío';\r\n    }\r\n    else if (!about && notRequired) {\r\n        return null;\r\n    }\r\n    else if (!(/^(?!\\s*$).{1,1000}/.test(about))) {\r\n        return 'El resumen de tu historia debe contener de 1 a 1000 caracteres';\r\n    }\r\n}","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\ins_evento_OBRA-PROFESIONAL-CCADENA-2.js",["460","461","462","463","464","465","466","467"],"import React, { useRef, useState, useEffect } from 'react'\r\nimport Footer from '../componentes/footer/footer';\r\nimport Navbar from '../componentes/navbar';\r\nimport DropdownImage from '../componentes/dropdown-image';\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport Steps from '../componentes/forms/forms-steps';\r\nimport StepManager from '../componentes/forms/step-manager/step-manager';\r\nimport Fade from 'react-reveal/Fade';\r\nimport ImgAutor from '../img/ccadena.jpg';\r\nimport HelmetMetaData from \"../componentes/helmet\";\r\nimport { toName } from '../helpers/functions';\r\nimport { isNameInvalid, isAgeInvalid, isPhoneInvalid, isEmailInvalid } from '../helpers/validators';\r\nimport { uploadImage, saveEvent } from '../api';\r\nimport { useStepObserver } from '../hooks/useStepObserver';\r\nimport { css } from \"@emotion/core\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faAngleLeft, faAngleRight, faCheck, faCheckCircle, faDotCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { contactTypes } from '../data/data';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst steps = ['Inicio', 'Contacto', 'Listo'];\r\nconst chkPoints = [{ id: 'SI', name: 'Sí', abrev: 'Sí' }];\r\nconst maxFileSize = 5242880;\r\n\r\nconst overrideSpinnerInline = css`\r\n  display: inline-block;\r\n  vertical-align: middle;\r\n`;\r\n\r\nconst mainTitle = 'Gran curso de guión, texto y novela';\r\nconst hostName = 'Carlos Cadena';\r\n\r\nconst Inscripcion = () => {\r\n\r\n    const [activeIndex, setActiveIndex] = useState(0);\r\n    const [loading, setLoading] = useState(false); // Determina si se está enviando el form\r\n    const [success, setSuccess] = useState(true); // Determina si se envío el form sin errores\r\n    const { canGoBackwards, isLast } = useStepObserver(activeIndex, steps.length);\r\n\r\n    const [name, setName] = useState('');\r\n    const [age, setAge] = useState('');\r\n    const [phone, setPhone] = useState('');\r\n    const [messengerType, setMessengerType] = useState(contactTypes[0]);\r\n    const [email, setEmail] = useState('');\r\n    const [points, setPoints] = useState([]);\r\n    const [imgScn, setImgScn] = useState(null);\r\n\r\n    const history = useHistory();\r\n    const refScn = useRef(null);\r\n\r\n    const updName = (e) => {\r\n        setName(e.target.value);\r\n    }\r\n\r\n    const updAge = (e) => {\r\n        setAge(e.target.value);\r\n    }\r\n\r\n    const updPhone = (e) => {\r\n        setPhone(e.target.value);\r\n    }\r\n\r\n    const updMessengerType = (val) => {\r\n        setMessengerType(val);\r\n    }\r\n\r\n    const updEmail = (e) => {\r\n        setEmail(e.target.value);\r\n    }\r\n\r\n    const selectPoint = (id) => {\r\n        if (includesPoint(id)) {\r\n            setPoints(points.filter(p => p != id));\r\n        } else {\r\n            setPoints([...points, id]);\r\n        }\r\n    }\r\n\r\n    const startSelectScn = (e) => {\r\n        e.preventDefault();\r\n        refScn.current.click();\r\n    }\r\n\r\n    const selectScn = (e) => {\r\n        e.preventDefault();\r\n        const file = e.target.files[0];\r\n        if (file) {\r\n            if (file.size <= maxFileSize) {\r\n                setImgScn(file);\r\n            } else {\r\n                alert('La imagen debe ser menor a 5MB');\r\n            }\r\n        }\r\n    }\r\n\r\n    const deleteScn = (e) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        setImgScn(null);\r\n    }\r\n\r\n    const previous = (e) => {\r\n        e.preventDefault();\r\n        navigateTo(activeIndex - 1);\r\n    }\r\n\r\n    const next = (e) => {\r\n        e.preventDefault();\r\n        navigateTo(activeIndex + 1);\r\n    }\r\n\r\n    const send = async (e) => {\r\n        e.preventDefault();\r\n        if (!checkErrors()) {\r\n            setLoading(true);\r\n            if (imgScn) {\r\n                uploadImage('inscripcion', imgScn)\r\n                    .then(url => {\r\n                        saveChanges(url);\r\n                    })\r\n                    .catch(error => {\r\n                        setLoading(false);\r\n                        setSuccess(false);\r\n                        alert('Error al subir la imagen. Reintente');\r\n                        console.log(error);\r\n                    });\r\n            }\r\n        }\r\n    }\r\n\r\n    const saveChanges = (urlImgInv) => {\r\n\r\n        const idEvento = history.location.pathname.toString().replace(/\\//g, '').replace(/ins_evento/g, '');\r\n\r\n        const data = {\r\n            eventId: idEvento,\r\n            eventName: mainTitle,\r\n            name: toName(name.trim()),\r\n            age: parseInt(age),\r\n            urlImgInv: urlImgInv.trim(),\r\n            phone: phone.trim(),\r\n            email: email.trim()\r\n        };\r\n\r\n        saveEvent(data).then(() => {\r\n            window.scrollTo(0, 0);\r\n            setLoading(false);\r\n            setSuccess(true);\r\n        });\r\n    }\r\n\r\n    const checkErrors = () => {\r\n        let error = (isNameInvalid(name) || isAgeInvalid(age) || isPhoneInvalid(phone) || isEmailInvalid(email));\r\n\r\n        // Custom errors\r\n        if (!includesPoint('SI')) {\r\n            error = 'Debes confirmar tu asistencia y cumplimiento';\r\n        }\r\n\r\n        if (!imgScn) {\r\n            error = 'Debes subir la imagen de la transacción';\r\n        }\r\n\r\n        if (error) {\r\n            alert(error);\r\n            return true;\r\n        };\r\n\r\n        return false;\r\n    }\r\n\r\n    const includesPoint = (pointId) => {\r\n        return points.find(p => p == pointId);\r\n    }\r\n\r\n    const navigateTo = (index) => {\r\n        setActiveIndex(index);\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n        setSuccess(false);\r\n    }, [activeIndex]);\r\n\r\n    return (\r\n        <div>\r\n            <HelmetMetaData title={mainTitle + \" - Temple Luna\"} description=\"Aprende a destacar tus obras como nunca antes\" />\r\n            <Navbar />\r\n            <main className='main-body below-navbar colored-background'>\r\n                <section className='container-xl section position-relative z-3'>\r\n                    <h2 className='mb-0'>{mainTitle}</h2>\r\n                    <p className='txt-responsive-form w-60 w-md-75'>Con {hostName}</p>\r\n                </section>\r\n                <section className='container-xl mt-3 position-relative'>\r\n                    <div style={{ backgroundImage: `url(${ImgAutor})` }} alt='img-fondo' className='img-fondo-formulario' />\r\n                    <div className='floating-form'>\r\n                        {\r\n                            success\r\n                                ?\r\n                                <div className='form-container text-align-center'>\r\n                                    <Fade bottom>\r\n                                        <FontAwesomeIcon color={'#3DE58D'} icon={faCheckCircle} style={{ fontSize: '8rem' }} />\r\n                                        <h3 className='mt-1 mb-1'>Listo</h3>\r\n                                    </Fade>\r\n                                    <p className='txt-responsive-form m0-auto'>Te contactaremos para unirte al grupo del curso</p>\r\n                                </div>\r\n                                :\r\n                                <>\r\n                                    <Steps\r\n                                        activeIndex={activeIndex}\r\n                                        navigateTo={navigateTo}\r\n                                        steps={steps} />\r\n                                    <div className='form-container'>\r\n                                        <form>\r\n                                            <StepManager currentIndex={activeIndex}>\r\n                                                <div className='step-1'>\r\n\r\n                                                    <div className='form-group mb-0'>\r\n                                                        <h2>Empecemos por una realidad:</h2>\r\n                                                        <p>Tú <b>jamás revelarías</b> tus íntimos secretos ni tus contraseñas, ¿Cierto? <b>Porque no quieres que alguien los vea.</b><br /><br />\r\n                                                            <b>Sin embargo</b>, ¿Te has dado cuenta de que cuando tienes un momento de <b>inspiración</b>, escribes algo, lo pintas o lo manifiestas en algún tipo de <b>arte</b>?<br /><br />\r\n                                                            <b>Ahí está la diferencia.</b> Todo arte lleva implícito el deseo de ser visto por los otros. Si no fuera así, <b>lo esconderías</b>.<br /><br />\r\n                                                            <b>¿Por qué negarlo? ¡Tú también quieres ser leído(a)!</b> Pero ¿Quién decide sí una obra triunfa? <b>Exacto. Es el público</b>.<br /><br />\r\n                                                            <b>Por esa razón, creamos este curso</b>, aquí dejarás las excusas y crearás obras de calidad que les gusten a los demás, sin dejar tu esencia.\r\n                                                            Puedes ver la enseñanza del profesor <b><a target=\"_blank\" href=\"https://www.youtube.com/channel/UCrHV9JlQKBNWLUs5wm8dYCA\">en nuestro canal</a>.</b>\r\n                                                        </p>\r\n                                                    </div>\r\n\r\n                                                    <div className='form-group'>\r\n                                                        <ul>\r\n                                                            <li><b>Número de sesiones:</b> 6</li>\r\n                                                            <li><b>Instructor:</b> Carlos Cadena </li>\r\n                                                            <li><b>Plataforma:</b> Google Meets</li>\r\n                                                            <li><b>Horarios:</b> Mayo: 23 y 30; Junio: 6, 13, 20 y 27. De 11am a 1pm (Hora Lima - Colombia)</li>\r\n                                                            <li><b>Temario:</b> <b><a target=\"_blank\" href=\"https://drive.google.com/file/d/1KjkDV_54swrMFseRpm7xkQtmowAx9Kr2/view?usp=sharing\">Ver aquí</a></b></li>\r\n                                                            <li><b>Inversión:</b> 30 dólares</li>\r\n                                                            <li><b>Método:</b> Paypal</li>\r\n                                                            <li><b>¿Hay facilidades?:</b> 15 dólares antes de iniciar y el resto, después de la sesión del 6</li>\r\n                                                            <li><b>Condición:</b> 10 inscritos como mínimo</li>\r\n                                                            <li><b>Obras llevadas al teatro:</b> <b><a target=\"_blank\" href=\"https://www.facebook.com/LosDemoniosDetrasDeLaPared/\">Ver aquí</a></b>.</li>\r\n                                                            <li><b>Obra \"Eróstrato\":</b> <b><a target=\"_blank\" href=\"https://www.wattpad.com/1040308420-artilugios-del-placer-antolog%C3%ADa-de-candentes\">Leer aquí</a></b></li>\r\n                                                            <li><b>Obra \"La reina de Unicel\":</b> <b><a target=\"_blank\" href=\"https://drive.google.com/file/d/1ocv-43xvgYUXhF2OL9Z5bsZhaStTnigT/view?usp=sharing\">Leer aquí</a></b></li>\r\n                                                        </ul>\r\n                                                    </div>\r\n\r\n                                                    <div className='form-group'>\r\n                                                        <p>Presiona siguiente para continuar.</p>\r\n                                                    </div>\r\n\r\n                                                </div>\r\n                                                <div className='step-2'>\r\n\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtNombres\">¿Cómo te llamas?</label>\r\n                                                        <input minLength=\"1\" maxLength=\"50\" type=\"text\" value={name} onChange={updName} id=\"txtNombres\" placeholder=\"Ingresa tus nombres\" />\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtEdad\">¿Qué edad tienes?</label>\r\n                                                        <input type=\"number\" min={10} max={99} value={age} onChange={updAge} id=\"txtEdad\" placeholder=\"Ingresa tu edad\" />\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtNumero\">¿Con qué número entrarás? (con código de país)</label>\r\n                                                        <div className='cbo-text'>\r\n                                                            <DropdownImage\r\n                                                                selectedItem={messengerType}\r\n                                                                list={[contactTypes[0]]}\r\n                                                                select={updMessengerType} />\r\n                                                            <input type=\"text\" value={phone} onChange={updPhone} id=\"txtNumero\" placeholder=\"Ej: +51 999 999 999\" />\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtCorreo\">Bríndanos tu correo de contacto</label>\r\n                                                        <input minLength=\"6\" maxLength=\"100\" type=\"email\" value={email} onChange={updEmail} id=\"txtCorreo\" placeholder=\"Ingresa tu correo\" />\r\n                                                    </div>\r\n\r\n\r\n                                                </div>\r\n                                                <div className='step-3'>\r\n\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"flScn\">Realiza el pago <b><a target=\"_blank\" href=\"https://paypal.me/gricardov\">aquí</a></b> y sube la captura</label>\r\n                                                        {\r\n                                                            imgScn\r\n                                                                ?\r\n                                                                <button onClick={startSelectScn} className={`d-flex justify-content-between align-items-center button button-light-purple button-thin stretch ${imgScn ? 'd-flex' : ''}`}>\r\n                                                                    <span className='clamp clamp-1'>\r\n                                                                        {imgScn.name}\r\n                                                                    </span>\r\n                                                                    <span onClick={deleteScn} className='fa fa-times' style={{ color: 'white' }}></span>\r\n                                                                </button>\r\n                                                                :\r\n                                                                <button onClick={startSelectScn} className={`button button-light-purple button-thin stretch ${imgScn ? 'd-flex' : ''}`}>\r\n                                                                    <span>\r\n                                                                        Subir captura\r\n                                                                    </span>\r\n                                                                </button>\r\n                                                        }\r\n                                                        <input type=\"file\" onChange={selectScn} accept=\"image/*\" ref={refScn} className='d-none' id=\"flScn\" />\r\n                                                    </div>\r\n\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtLink\">He leído los horarios, plataformas, requisitos y confirmo mi asistencia.</label>\r\n                                                        {\r\n                                                            chkPoints.map(point => {\r\n                                                                const included = includesPoint(point.id);\r\n                                                                return (\r\n                                                                    <div key={point.id} onClick={() => selectPoint(point.id)} className={`chkTag ${included ? 'active' : ''}`}>\r\n                                                                        {\r\n                                                                            included\r\n                                                                                ?\r\n                                                                                <FontAwesomeIcon color={'white'} icon={faCheck} style={{ fontSize: '1.6rem' }} />\r\n                                                                                :\r\n                                                                                <FontAwesomeIcon color={'#adadad'} icon={faDotCircle} style={{ fontSize: '1.6rem' }} />\r\n                                                                        }\r\n                                                                        {' '}\r\n                                                                        {point.name}\r\n                                                                    </div>\r\n                                                                )\r\n                                                            })\r\n                                                        }\r\n                                                    </div>\r\n\r\n                                                </div>\r\n                                            </StepManager>\r\n                                            <div className='form-buttons-container'>\r\n                                                {\r\n                                                    canGoBackwards && !loading\r\n                                                    &&\r\n                                                    <button onClick={previous} className='button button-green'>\r\n                                                        <FontAwesomeIcon icon={faAngleLeft} size='xl' />\r\n                                                        {' '}\r\n                                                        <span className='d-none d-md-inline'>\r\n                                                            Anterior\r\n                                                    </span>\r\n                                                    </button>\r\n                                                }\r\n                                                {\r\n                                                    loading\r\n                                                        ?\r\n                                                        <span className='button button-green justify-self-right'>\r\n                                                            Enviando\r\n                                                            {' '}\r\n                                                            <ClipLoader color={'#fff'} loading={true} css={overrideSpinnerInline} size={22} />\r\n                                                        </span>\r\n                                                        :\r\n                                                        isLast\r\n                                                            ?\r\n                                                            <button onClick={send} className='button button-green justify-self-right'>\r\n                                                                <span className='d-none d-md-inline'>\r\n                                                                    Enviar\r\n                                                    </span>\r\n                                                                {' '}\r\n                                                                <FontAwesomeIcon icon={faCheck} size='xl' />\r\n                                                            </button>\r\n                                                            :\r\n                                                            <button onClick={next} className='button button-green justify-self-right'>\r\n                                                                <span className='d-none d-md-inline'>\r\n                                                                    Siguiente\r\n                                                    </span>\r\n                                                                {' '}\r\n                                                                <FontAwesomeIcon icon={faAngleRight} size='xl' />\r\n                                                            </button>\r\n                                                }\r\n                                            </div>\r\n                                        </form>\r\n                                    </div>\r\n                                </>\r\n                        }\r\n                    </div>\r\n                </section>\r\n            </main>\r\n            <Footer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Inscripcion;","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\perfil.js",["468","469","470"],"import React, { useState, useEffect } from 'react';\r\nimport PerfilPersona from './perfil_persona';\r\nimport PerfilEditorial from './perfil_editorial';\r\nimport LoadingScreen from '../componentes/loading-screen';\r\nimport { getProfileByQueryFollowName, getProfile } from '../api';\r\n\r\nconst profileData = {\r\n    /*\r\n    type: 'PERSON',\r\n    fName: 'Shany',\r\n    lName:'Dubi',\r\n    networks: [\r\n        'https://firebase.google.com/docs/firestore/security/rules-fields',\r\n        'https://firebase.google.com/docs/firestore/security/rules-fields',\r\n        'https://firebase.google.com/docs/firestore/security/rules-fields'\r\n    ],\r\n    roles: ['COLAB'],\r\n    services: ['CRI', 'DIS'],\r\n    likes: 20,\r\n    views: 30,\r\n    statistics: [{ type: 'CRI', cound: 10 }, { type: 'DIS', count: 2 }],\r\n    editorial: {\r\n        name: 'Editorial Pedro Castillo',\r\n        id: 'sdf',\r\n        mainColor: 'sdf',\r\n        contrastColor: 'asd'\r\n    }\r\n    */\r\n\r\n    type: 'EDITORIAL',\r\n    name: 'Editorial Pedro Castillo',\r\n    followName: 'EditorialPedroCastillo',\r\n    networks: [\r\n        'https://wattpad.com',\r\n        'youtube.com',\r\n        'temple.com'\r\n    ],\r\n    roles: ['COLAB'],\r\n    services: [{ id: 'CRI' }, { id: 'DIS' }],\r\n    members: [],\r\n    about: {\r\n        whoWeAre: 'Te voy a quitar todo, todo, todito. ¿Tienes? Dirás tenemos. Bienvenido a mi gobierno, junto al COVID-21 vamos a ser tu peor pesadilla',\r\n        objective: '',\r\n        joinable: false,\r\n        contact: {\r\n            messengerType: '',\r\n            number: ''\r\n        },\r\n        createdAt: ''\r\n    },\r\n    /*likes: 20,\r\n    views: 30,\r\n    statistics: [{ type: 'CRI', count: 10 }, { type: 'DIS', count: 2 }],*/\r\n    theme: {\r\n        main: '#333333',\r\n        contrast: '#FFF'\r\n    }\r\n}\r\n\r\nconst Perfil = ({ match }) => {\r\n\r\n    const [profileData, setProfileData] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    \r\n    useEffect(() => {\r\n        const qFollowNameOrId = match.params.id;\r\n        return getProfile(qFollowNameOrId) // Busco perfil por id\r\n            .then(({ profile, error, errCode }) => {\r\n                if (!error) {\r\n                    // Lo encontró por id, así que actualizo la url\r\n                    window.history.replaceState(null, '', profile.qFollowName);\r\n                    setLoading(false);\r\n                    setProfileData(profile);\r\n                } else if (errCode == 'NOT FOUND') {\r\n                    return getProfileByQueryFollowName(qFollowNameOrId.toLowerCase()) // Si no, lo busco por nombre de seguidor\r\n                        .then(({ profile, error }) => {\r\n                            if (!error) {\r\n                                // Lo reemplazo pr el id en minúsculas\r\n                                window.history.replaceState(null, '', qFollowNameOrId.toLowerCase());\r\n                                setLoading(false);\r\n                                setProfileData(profile);\r\n                            }\r\n                            else {\r\n                                setLoading(false);\r\n                                alert('No se encontró un perfil con ese identificador');\r\n                            }\r\n                        })\r\n                }\r\n            })\r\n    }, []);\r\n\r\n    if (loading) {\r\n        return <LoadingScreen text={'Obteniendo perfil'} />\r\n    } else if (profileData) {\r\n        switch (profileData.type) {\r\n            case 'PERSON':\r\n                return <PerfilPersona {...profileData} />\r\n            case 'EDITORIAL':\r\n                return <PerfilEditorial {...profileData} />\r\n            default:\r\n                return <PerfilPersona {...profileData} />\r\n        }\r\n    } else {\r\n        return <div>No hay información del perfil</div>\r\n    }\r\n}\r\n\r\nexport default Perfil;","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\service-card\\index.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\perfil_persona.js",["471","472","473","474","475","476","477","478"],"import React, { useState, useEffect, useContext } from 'react'\r\nimport Navbar from '../componentes/navbar';\r\nimport Footer from '../componentes/footer/footer';\r\nimport SampleEditorialIcon from '../img/sample-editorial-icon.svg';\r\nimport Tabs from '../componentes/tabs';\r\nimport HelmetMetaData from \"../componentes/helmet\";\r\nimport PuffLoader from \"react-spinners/PuffLoader\";\r\nimport ResultPreviewCard from '../componentes/result-preview-card';\r\nimport Tooltip from '../componentes/tooltip';\r\nimport Avatar from '../componentes/avatar';\r\nimport { useScrollOffset } from '../hooks/useScrollOffset';\r\nimport { useWindowSize } from '../hooks/useWindowSize';\r\nimport { css } from \"@emotion/core\";\r\nimport { getServiceById, getUserRoleById, getSnIconByUrl } from '../helpers/functions';\r\nimport { AuthContext } from '../context/AuthContext';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { FacebookShareButton } from \"react-share\";\r\nimport { faAngleRight, faEye, faHeart, faShareAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { getStatistics, getRequests } from '../api';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst override = css`\r\n  display: block;\r\n  margin: 5rem auto;\r\n`;\r\n\r\nconst limit = 3;\r\n\r\nconst Perfil = ({ id, fName, lName, likes, views, networks, imgUrl, theme, roles, services, qFollowName, followName, editorial }) => {\r\n\r\n    const { logged } = useContext(AuthContext);\r\n    const history = useHistory();\r\n\r\n    // Tema\r\n    const style = {\r\n        background: (theme && theme.main) || '',\r\n        color: (theme && theme.contrast) || ''\r\n    };\r\n\r\n    const [activeTabIndex, setActiveTabIndex] = useState(0);\r\n    const [initialLoading, setInitialLoading] = useState(false);\r\n    const [loadingMore, setLoadingMore] = useState(false);\r\n    const [isLast, setIsLast] = useState(false);\r\n    const [requestList, setRequestList] = useState([]);\r\n    const [visibleColumns, setVisibleColumns] = useState(0); // Esto estblaece cuantos datos solicitar * 2 para que se vea en la pantasa\r\n    const [tabList, setTabList] = useState(services.map(service => getServiceById(service)));\r\n    const [servicesText, setServicesText] = useState('');\r\n    const { hasScrolledToTopOffset } = useScrollOffset(500);\r\n    const { width } = useWindowSize();\r\n\r\n    const [roleTooltipOpen, setRoleTooltipOpen] = useState(false);\r\n    const [servTooltipOpen, setServiceTooltipOpen] = useState(false);\r\n\r\n    const navigateTo = (route) => {\r\n        history.push(route);\r\n    }\r\n\r\n    const updActiveTabIndex = (val) => {\r\n        setActiveTabIndex(val);\r\n    }\r\n\r\n    const updateStatistics = () => {\r\n        getStatistics(tabList.map(tab => id + '-' + tab.id))\r\n            .then(data => setTabList(tabList.map((e, i) => !data[i].error ? { ...tabList[i], statistics: data[i].statistics.done } : tabList[i])));\r\n    }\r\n\r\n    const getLastElement = (field) => {\r\n        return requestList[requestList.length - 1] ? requestList[requestList.length - 1][field] : undefined;\r\n    }\r\n\r\n    const requestData = () => {\r\n        setInitialLoading(true);\r\n        const requestType = tabList[activeTabIndex].id;\r\n        getRequests(id, requestType, 'HECHO', undefined, visibleColumns * 2, 'desc')\r\n            .then(data => {\r\n                setInitialLoading(false);\r\n                setIsLast(data.isLast);\r\n                setRequestList(data.list);\r\n            })\r\n            .catch(error => {\r\n                setInitialLoading(false);\r\n                alert('Ha ocurrido un error. Vuelve a intentarlo más tarde (EC.RD)');\r\n            });\r\n    }\r\n\r\n    const requestMoreData = () => {\r\n        if (!initialLoading && !loadingMore) {\r\n            setLoadingMore(true);\r\n            const requestType = tabList[activeTabIndex].id;\r\n            getRequests(id, requestType, 'HECHO', getLastElement('createdAt'), visibleColumns, 'desc')\r\n                .then(data => {\r\n                    setLoadingMore(false);\r\n                    setIsLast(data.isLast);\r\n                    setRequestList((state) => ([...state, ...data.list]));\r\n                })\r\n                .catch(error => {\r\n                    setLoadingMore(false);\r\n                    alert('Ha ocurrido un error. Vuelve a intentarlo más tarde (EC.RMD)');\r\n                });\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        if (width < 610) {\r\n            setVisibleColumns(1);\r\n        } else if (width < 910) {\r\n            setVisibleColumns(2);\r\n        } else if (width < 1500) {\r\n            setVisibleColumns(3);\r\n        } else {\r\n            setVisibleColumns(4);\r\n        }\r\n\r\n    }, [width]);\r\n\r\n    useEffect(() => {\r\n        if (services.length == 1) {\r\n            setServicesText(getServiceById(services[0])?.name)\r\n        } else {\r\n            const last = getServiceById(services[services.length - 1])?.name;\r\n            setServicesText((services.slice(0, services.length - 1).map(service => getServiceById(service)?.name).join(', ') + ' y ' + last).toLowerCase());\r\n        }\r\n    }, [services]);\r\n\r\n    useEffect(() => {\r\n        requestData();\r\n    }, [activeTabIndex, visibleColumns]);\r\n\r\n    useEffect(() => {\r\n        updateStatistics();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <HelmetMetaData\r\n                title={`${logged ? fName + ' ' + lName + ' - Temple Luna' : '¡' + fName + ' ' + lName + ' ya está en Temple Luna!'}`}\r\n                description={'Entra y solicita tus ' + servicesText + ' desde mi perfil. ¡Te van a encantar!'}\r\n                image={imgUrl} />\r\n            <Navbar />\r\n            <main className='main-body below-navbar'>\r\n                <section className='profile-header-container'>\r\n                    <div className='profile-container'>\r\n                        <div>\r\n                            <div className='profile-img'>\r\n                                <div className='sn-container'>\r\n                                    {\r\n                                        networks.slice(0, 2).map(network => {\r\n                                            const iconData = getSnIconByUrl(network);\r\n\r\n                                            if (iconData) {\r\n                                                return (\r\n                                                    <a target='_blank' href={network} className={`sn-icon ${iconData.className}`}>\r\n                                                        <img src={iconData.imgSrc} alt='img-icon' />\r\n                                                    </a>\r\n                                                )\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                </div>\r\n                                {/*\r\n                                    editorial\r\n                                        ?\r\n                                        <div className='editorial-tag clamp clamp-1'>\r\n                                            <img src={SampleEditorialIcon} alt='img-editorial' />\r\n                                            <span className='clamp clamp-1'>\r\n                                                {editorial.name}\r\n                                            </span>\r\n                                        </div>\r\n                                        :\r\n                                        <div className='editorial-tag clamp clamp-1'>\r\n                                            <span className='clamp clamp-1'>\r\n                                                Independiente\r\n                                        </span>\r\n                                        </div>\r\n                                */}\r\n                                <div className='editorial-tag clamp clamp-1'>\r\n                                    <span className='clamp clamp-1'>\r\n                                        Independiente\r\n                                    </span>\r\n                                </div>\r\n                                <Avatar img={imgUrl} clases='profile-img img-avatar-container border-shadow' />\r\n                            </div>\r\n                        </div>\r\n                        <div className='profile-data'>\r\n                            <h2 className='clamp clamp-2 no-break'>{fName + ' ' + lName}</h2>\r\n                            <div className='statistics'>\r\n                                <div className='statistic'>\r\n                                    {(views ? views >= 1000 ? (views / 1000).toFixed(1) + 'k' : views : 0) + ' '}\r\n                                    <FontAwesomeIcon icon={faEye} className='icon' />\r\n                                </div>\r\n                                <div className='statistic'>\r\n                                    {(likes ? likes >= 1000 ? (likes / 1000).toFixed(1) + 'k' : likes : 0) + ' '}\r\n                                    <FontAwesomeIcon icon={faHeart} className='icon' />\r\n                                </div>\r\n                            </div>\r\n                            <div className='description'>\r\n                                {\r\n                                    <p>{getUserRoleById(roles[0])?.name}\r\n                                        {\r\n                                            roles.length > 1\r\n                                            &&\r\n                                            <>\r\n                                                {' y '}\r\n                                                <b onMouseEnter={() => setRoleTooltipOpen(true)} onMouseLeave={() => setRoleTooltipOpen(false)} className='position-relative cursor-pointer'>\r\n                                                    {roles.length - 1} más\r\n                                                    <Tooltip isOpen={roleTooltipOpen}>\r\n                                                        {\r\n                                                            roles.slice(1, roles.length).map(role => <p>{getUserRoleById(role)?.name}</p>)\r\n                                                        }\r\n                                                    </Tooltip>\r\n                                                </b>\r\n                                            </>\r\n                                        }\r\n                                    </p>\r\n                                }\r\n                                {\r\n                                    // Solo se deben mostrar 2 en pantalla y el resto en tooltip                                    \r\n                                    <p>Servicio de {services.slice(0, 2).map(service => getServiceById(service)?.name).join(services.length > 2 ? ', ' : ' y ').toLowerCase()}\r\n                                        {\r\n                                            services.length > 2\r\n                                            &&\r\n                                            <>\r\n                                                {' y '}\r\n                                                <b onMouseEnter={() => setServiceTooltipOpen(true)} onMouseLeave={() => setServiceTooltipOpen(false)} className='position-relative cursor-pointer'>\r\n                                                    {services.length - 2} más\r\n                                                    <Tooltip isOpen={servTooltipOpen}>\r\n                                                        {\r\n                                                            services.slice(2, services.length).map(service => <p>{getServiceById(service).name}</p>)\r\n                                                        }\r\n                                                    </Tooltip>\r\n                                                </b>\r\n                                            </>\r\n                                        }\r\n                                    </p>\r\n\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='profile-editorial'>\r\n                            {/*\r\n                                editorial\r\n                                    ?\r\n                                    <div className='editorial-tag clamp clamp-1'>\r\n                                        <img src={SampleEditorialIcon} alt='img-editorial' />\r\n                                        <span className='clamp clamp-1'>\r\n                                            {editorial.name}\r\n                                        </span>\r\n                                    </div>\r\n                                    :\r\n                                    <div className='editorial-tag clamp clamp-1'>\r\n                                        <img src={SampleEditorialIcon} alt='img-editorial' />\r\n                                        <span className='clamp clamp-1'>\r\n                                            Independiente\r\n                                        </span>\r\n                                    </div>\r\n                            */}\r\n                            <div className='editorial-tag clamp clamp-1'>\r\n                                <img src={SampleEditorialIcon} alt='img-editorial' />\r\n                                <span className='clamp clamp-1'>\r\n                                    Independiente\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n                <Tabs\r\n                    initialLoading={initialLoading}\r\n                    loadingMore={loadingMore}\r\n                    requestMoreData={requestMoreData}\r\n                    hasMore={!isLast}\r\n                    loader={<PuffLoader color={'#8B81EC'} loading={true} css={override} size={100} />}\r\n                    activeIndex={activeTabIndex}\r\n                    select={updActiveTabIndex}\r\n                    tabs={tabList.map(tab => tab.name + ` (${tab.statistics ? tab.statistics : 0})`)}>\r\n                    <div className='container-xl services-profile-container'>\r\n                        {\r\n                            requestList.map(request => (\r\n                                <ResultPreviewCard\r\n                                    {...request}\r\n                                    isOwner={logged ? logged.uid == request.takenBy : false}\r\n                                    onClick={(id) => navigateTo(`/prev_resultado?id=${id}`)}\r\n                                />\r\n                            ))\r\n                        }\r\n                    </div>\r\n                </Tabs>\r\n            </main>\r\n            <div className='fab-button'>\r\n                <div className={`fab-button__pill ${!hasScrolledToTopOffset ? 'fab-button__pill-dissappear' : 'fab-button__pill-appear'} `}>\r\n                    <span className='fab-button__caption'>\r\n                        {'Ayúdame a ser conocido '}\r\n                        <FontAwesomeIcon icon={faAngleRight} />\r\n                    </span>\r\n                </div>\r\n                <FacebookShareButton\r\n                    url={`${process.env.REACT_APP_WEBSITE}/perfil/${qFollowName}`}\r\n                    quote={'¡Pide tus ' + servicesText + ' aquí!'}\r\n                    className='fab-button__circle fab-button__circle-hide-first'\r\n                    hashtag='#templeluna'>\r\n                    {' '}\r\n                    <FontAwesomeIcon icon={faShareAlt} className='icon' />\r\n                </FacebookShareButton>\r\n            </div>\r\n            <Footer />\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default Perfil;","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\perfil_editorial.js",["479","480","481","482","483"],"import React, { useState, useEffect, useContext } from 'react'\r\nimport Navbar from '../componentes/navbar';\r\nimport Footer from '../componentes/footer/footer';\r\nimport ImgPerfil from '../img/pedrito.png';\r\nimport Tabs from '../componentes/tabs';\r\nimport HelmetMetaData from \"../componentes/helmet\";\r\nimport PuffLoader from \"react-spinners/PuffLoader\";\r\nimport ServiceCard from '../componentes/service-card';\r\nimport { css } from \"@emotion/core\";\r\nimport { getSnIconByUrl } from '../helpers/functions';\r\nimport { editorialTabs } from '../data/data';\r\nimport { AuthContext } from '../context/AuthContext';\r\n\r\nconst override = css`\r\n  display: block;\r\n  margin: 5rem auto;\r\n`;\r\n\r\nconst Perfil = ({ id, name, likes, views, networks, followName, about, services, theme }) => {\r\n\r\n    // Tema\r\n    const style = {\r\n        background: (theme && theme.main) || '',\r\n        color: (theme && theme.contrast) || ''\r\n    };\r\n\r\n    const { logged } = useContext(AuthContext);\r\n\r\n    const [activeTabIndex, setActiveTabIndex] = useState(0);\r\n    const [initialLoading, setInitialLoading] = useState(false);\r\n    const [requestList, setRequestList] = useState([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\r\n\r\n    const updActiveTabIndex = (val) => {\r\n        setActiveTabIndex(val);\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <HelmetMetaData title={`${logged ? name + ' - Temple Luna' : '¡' + name + ' está en Temple Luna!'}`} />\r\n            <Navbar defaultColor={style.background} />\r\n            <main className='main-body below-navbar'>\r\n                <section className='profile-header-container' style={style}>\r\n                    <div className='profile-container'>\r\n                        <div>\r\n                            <div className='profile-img'>\r\n                                <img src={ImgPerfil} alt='img-perfil' />\r\n                            </div>\r\n                        </div>\r\n                        <div className='profile-data'>\r\n                            <h2 className='clamp clamp-2 no-break'>{name}</h2>\r\n                            <div className='follow-name clamp clamp-1'>\r\n                                @{followName}\r\n                            </div>\r\n                            <div className='description d-none d-md-block'>\r\n                                <p className='clamp clamp-3 no-break'>{about.whoWeAre}</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className='sn-container'>\r\n                            {\r\n                                networks.slice(0, 3).map(network => {\r\n                                    const iconData = getSnIconByUrl(network);\r\n\r\n                                    if (iconData) {\r\n                                        return (\r\n                                            <a target='_blank' href={network} className={`sn-icon ${iconData.className}`}>\r\n                                                <img src={iconData.imgSrc} alt='img-icon' />\r\n                                            </a>\r\n                                        )\r\n                                    }\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n                <Tabs\r\n                    theme={theme}\r\n                    initialLoading={initialLoading}\r\n                    loadingMore={false}\r\n                    requestMoreData={() => { }}\r\n                    hasMore={false}\r\n                    loader={<PuffLoader color={'#8B81EC'} loading={true} css={override} size={100} />}\r\n                    activeIndex={activeTabIndex}\r\n                    select={updActiveTabIndex}\r\n                    tabs={editorialTabs.map(e => e.name)}>\r\n                        <div className='container-xl services-profile-container'>\r\n                            {\r\n                                services.map(service => (\r\n                                    <ServiceCard id={service.id} img={service.img} color={service.color} />\r\n                                ))\r\n                            }\r\n                        </div>\r\n                </Tabs>\r\n            </main>\r\n            <Footer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Perfil;","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\ins_evento_APRENDE-SER-PAGADO-POR-ESCRIBIR-CRISTI-1.js",["484","485","486","487"],"import React, { useState, useEffect } from 'react'\r\nimport Footer from '../componentes/footer/footer';\r\nimport Navbar from '../componentes/navbar';\r\nimport DropdownImage from '../componentes/dropdown-image';\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport Steps from '../componentes/forms/forms-steps';\r\nimport StepManager from '../componentes/forms/step-manager/step-manager';\r\nimport Fade from 'react-reveal/Fade';\r\nimport ImgAutor from '../img/link.svg';\r\nimport HelmetMetaData from \"../componentes/helmet\";\r\nimport { toName } from '../helpers/functions';\r\nimport { isNameInvalid, isAgeInvalid, isPhoneInvalid, isEmailInvalid } from '../helpers/validators';\r\nimport { saveEvent } from '../api';\r\nimport { useStepObserver } from '../hooks/useStepObserver';\r\nimport { css } from \"@emotion/core\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faAngleDown, faAngleLeft, faAngleRight, faCheck, faCheckCircle, faDotCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { contactTypes } from '../data/data';\r\nimport { faWhatsapp } from '@fortawesome/free-brands-svg-icons';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst steps = ['Inicio', 'Contacto', 'Listo'];\r\nconst chkPoints = [{ id: 'SI', name: 'Sí', abrev: 'Sí' }];\r\n\r\nconst overrideSpinnerInline = css`\r\n  display: inline-block;\r\n  vertical-align: middle;\r\n`;\r\n\r\nconst mainTitle = 'Aprende a ser pagado por escribir';\r\nconst hostName = 'Cristina de Martinez';\r\n\r\nconst Inscripcion = () => {\r\n\r\n    const [activeIndex, setActiveIndex] = useState(0);\r\n    const [loading, setLoading] = useState(false); // Determina si se está enviando el form\r\n    const [success, setSuccess] = useState(true); // Determina si se envío el form sin errores\r\n    const { canGoBackwards, isLast } = useStepObserver(activeIndex, steps.length);\r\n\r\n    const [name, setName] = useState('');\r\n    const [age, setAge] = useState('');\r\n    const [phone, setPhone] = useState('');\r\n    const [messengerType, setMessengerType] = useState(contactTypes[0]);\r\n    const [email, setEmail] = useState('');\r\n    const [points, setPoints] = useState([]);\r\n\r\n    const history = useHistory();\r\n\r\n    const updName = (e) => {\r\n        setName(e.target.value);\r\n    }\r\n\r\n    const updAge = (e) => {\r\n        setAge(e.target.value);\r\n    }\r\n\r\n    const updPhone = (e) => {\r\n        setPhone(e.target.value);\r\n    }\r\n\r\n    const updMessengerType = (val) => {\r\n        setMessengerType(val);\r\n    }\r\n\r\n    const updEmail = (e) => {\r\n        setEmail(e.target.value);\r\n    }\r\n\r\n    const selectPoint = (id) => {\r\n        if (includesPoint(id)) {\r\n            setPoints(points.filter(p => p != id));\r\n        } else {\r\n            setPoints([...points, id]);\r\n        }\r\n    }\r\n\r\n    const previous = (e) => {\r\n        e.preventDefault();\r\n        navigateTo(activeIndex - 1);\r\n    }\r\n\r\n    const next = (e) => {\r\n        e.preventDefault();\r\n        navigateTo(activeIndex + 1);\r\n    }\r\n\r\n    const send = async (e) => {\r\n        e.preventDefault();\r\n        if (!checkErrors()) {\r\n            setLoading(true);\r\n            saveChanges();\r\n        }\r\n    }\r\n\r\n    const saveChanges = () => {\r\n\r\n        const idEvento = history.location.pathname.toString().replace(/\\//g, '').replace(/ins_evento/g, '');\r\n\r\n        const data = {\r\n            eventId: idEvento,\r\n            eventName: mainTitle,\r\n            name: toName(name.trim()),\r\n            age: parseInt(age),\r\n            phone: phone.trim(),\r\n            email: email.trim()\r\n        };\r\n\r\n        saveEvent(data).then(() => {\r\n            window.scrollTo(0, 0);\r\n            setLoading(false);\r\n            setSuccess(true);\r\n        });\r\n    }\r\n\r\n    const checkErrors = () => {\r\n\r\n        let error = (isNameInvalid(name) || isAgeInvalid(age) || isPhoneInvalid(phone) || isEmailInvalid(email));\r\n\r\n        // Custom errors\r\n        if (!includesPoint('SI')) {\r\n            error = 'Debes confirmar tu asistencia y cumplimiento';\r\n        }\r\n\r\n        if (error) {\r\n            alert(error);\r\n            return true;\r\n        };\r\n\r\n        return false;\r\n    }\r\n\r\n    const includesPoint = (pointId) => {\r\n        return points.find(p => p == pointId);\r\n    }\r\n\r\n    const navigateTo = (index) => {\r\n        setActiveIndex(index);\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n        setSuccess(false);\r\n    }, [activeIndex]);\r\n\r\n    return (\r\n        <div>\r\n            <HelmetMetaData title={mainTitle + \" - Temple Luna\"} description=\"¿La plataforma de turno no valora lo que escribes? Puedes tener una joya oculta entre manos por la que muchos pagarían.\" />\r\n            <Navbar />\r\n            <main className='main-body below-navbar colored-background'>\r\n                <section className='container-xl section position-relative z-3'>\r\n                    <h2 className='mb-0'>{mainTitle}</h2>\r\n                    <p className='txt-responsive-form w-60 w-md-75'>Con {hostName}</p>\r\n                </section>\r\n                <section className='container-xl mt-3 position-relative'>\r\n                    <img src={ImgAutor} alt='img-fondo' className='img-fondo-formulario' />\r\n                    <div className='floating-form'>\r\n                        {\r\n                            success\r\n                                ?\r\n                                <div className='form-container text-align-center'>\r\n                                    <Fade bottom>\r\n                                        <FontAwesomeIcon color={'#3DE58D'} icon={faCheckCircle} style={{ fontSize: '8rem' }} />\r\n                                        <h3 className='mt-1 mb-1'>Listo</h3>\r\n                                    </Fade>\r\n                                    <p className='txt-responsive-form m0-auto'>¡No olvides unirte al grupo! Presiona el botón de abajo</p>\r\n                                    <FontAwesomeIcon icon={faAngleDown} size='2x' />\r\n\r\n                                    <div className='form-buttons-container mt-3'>\r\n                                        <a href=\"https://chat.whatsapp.com/J7T9yHij1ewFNLV41qlZoB\" className='button button-green m0-auto'>\r\n                                            <FontAwesomeIcon icon={faWhatsapp} size='1x' />\r\n                                            {' '}\r\n                                            <span>\r\n                                                Unirme\r\n                                            </span>\r\n                                        </a>\r\n                                    </div>\r\n                                </div>\r\n                                :\r\n                                <>\r\n                                    <Steps\r\n                                        activeIndex={activeIndex}\r\n                                        navigateTo={navigateTo}\r\n                                        steps={steps} />\r\n                                    <div className='form-container'>\r\n                                        <form>\r\n                                            <StepManager currentIndex={activeIndex}>\r\n                                                <div className='step-1'>\r\n\r\n                                                    <div className='form-group mb-0'>\r\n                                                        <h2>¡Bienvenido(a) al taller!</h2>\r\n                                                        <p>¿La <b>plataforma de turno</b> no valora lo que escribes?<br /><br />\r\n                                                            <b>A muchos nos sucede</b> cuando empezamos a escribir: La plataforma promociona <b>las historias de siempre</b> y todos terminan leyendo <b> fanfics de Donald Trump </b>\r\n                                                        o los <b>Jonas Brothers versión pandemia</b>.<br /><br />\r\n                                                        Pero todos sabemos que hay <b>joyas ocultas</b>. Las plataformas <b>serias</b> también lo saben. <b>Por eso,</b> buscan constantemente a esos artistas y <b>les pagan por escribir</b>.\r\n                                                        Aquí tienes <b>dos ejemplos</b> de obras publicadas por miembros de nuestra <b>comunidad:</b> <b><a target='_blank' href='https://www.buenovela.com/book_info/31000016987/Romntica/La-Obsesin-de-Jack-Black'>La obsesión de Black Jack</a></b>\r\n                                                            {' y '}<b><a target='_blank' href='https://www.buenovela.com/book_info/31000018353/Ciencia-Ficcin/El-Juego-(El-Juego-1)'>El juego</a></b>.<br /><br />\r\n\r\n                                                            <b>Tú puedes tener una joya oculta entre manos</b>. ¡Inscríbete al taller y aprende a postular!<br /><br />\r\n\r\n                                                            Al final de tu inscripción, te aparecerá un botón para ingresar al <b>grupo de Whatsapp</b>. Inscríbete <b>solamente</b> si vas a asistir.<br /><br />\r\n\r\n                                                            <b>*Si te inscribes e incumples, ya no serás tenido en cuenta en otras dinámicas de Temple Luna.</b><br /><br />\r\n                                                        </p>\r\n                                                    </div>\r\n\r\n                                                    <div className='form-group'>\r\n                                                        <ul>\r\n                                                            <li><b>Número de sesiones:</b> 1</li>\r\n                                                            <li><b>Autora:</b> Cristina de Martinez</li>\r\n                                                            <li><b>Plataforma:</b> Google Meets</li>\r\n                                                            <li><b>Horario:</b> Lunes, 17 de mayo a las 5pm (Hora Lima - Colombia)</li>\r\n                                                        </ul>\r\n                                                    </div>\r\n\r\n                                                    <div className='form-group'>\r\n                                                        <p>Presiona siguiente para continuar.</p>\r\n                                                    </div>\r\n\r\n                                                </div>\r\n                                                <div className='step-2'>\r\n\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtNombres\">¿Cómo te llamas?</label>\r\n                                                        <input minLength=\"1\" maxLength=\"50\" type=\"text\" value={name} onChange={updName} id=\"txtNombres\" placeholder=\"Ingresa tus nombres\" />\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtEdad\">¿Qué edad tienes?</label>\r\n                                                        <input type=\"number\" min={10} max={99} value={age} onChange={updAge} id=\"txtEdad\" placeholder=\"Ingresa tu edad\" />\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtNumero\">¿Con qué número entrarás? (con código de país)</label>\r\n                                                        <div className='cbo-text'>\r\n                                                            <DropdownImage\r\n                                                                selectedItem={messengerType}\r\n                                                                list={[contactTypes[0]]}\r\n                                                                select={updMessengerType} />\r\n                                                            <input type=\"text\" value={phone} onChange={updPhone} id=\"txtNumero\" placeholder=\"Ej: +51 999 999 999\" />\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtCorreo\">Bríndanos tu correo de contacto</label>\r\n                                                        <input minLength=\"6\" maxLength=\"100\" type=\"email\" value={email} onChange={updEmail} id=\"txtCorreo\" placeholder=\"Ingresa tu correo\" />\r\n                                                    </div>\r\n\r\n                                                </div>\r\n                                                <div className='step-3'>\r\n\r\n                                                    <div className='form-group'>\r\n\r\n                                                        <div className='form-group'>\r\n                                                            <label htmlFor=\"txtLink\">He leído los horarios y confirmo mi asistencia</label>\r\n                                                            {\r\n                                                                chkPoints.map(point => {\r\n                                                                    const included = includesPoint(point.id);\r\n                                                                    return (\r\n                                                                        <div key={point.id} onClick={() => selectPoint(point.id)} className={`chkTag ${included ? 'active' : ''}`}>\r\n                                                                            {\r\n                                                                                included\r\n                                                                                    ?\r\n                                                                                    <FontAwesomeIcon color={'white'} icon={faCheck} style={{ fontSize: '1.6rem' }} />\r\n                                                                                    :\r\n                                                                                    <FontAwesomeIcon color={'#adadad'} icon={faDotCircle} style={{ fontSize: '1.6rem' }} />\r\n                                                                            }\r\n                                                                            {' '}\r\n                                                                            {point.name}\r\n                                                                        </div>\r\n                                                                    )\r\n                                                                })\r\n                                                            }\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </StepManager>\r\n                                            <div className='form-buttons-container'>\r\n                                                {\r\n                                                    canGoBackwards && !loading\r\n                                                    &&\r\n                                                    <button onClick={previous} className='button button-green'>\r\n                                                        <FontAwesomeIcon icon={faAngleLeft} size='xl' />\r\n                                                        {' '}\r\n                                                        <span className='d-none d-md-inline'>\r\n                                                            Anterior\r\n                                                    </span>\r\n                                                    </button>\r\n                                                }\r\n                                                {\r\n                                                    loading\r\n                                                        ?\r\n                                                        <span className='button button-green justify-self-right'>\r\n                                                            Enviando\r\n                                                            {' '}\r\n                                                            <ClipLoader color={'#fff'} loading={true} css={overrideSpinnerInline} size={22} />\r\n                                                        </span>\r\n                                                        :\r\n                                                        isLast\r\n                                                            ?\r\n                                                            <button onClick={send} className='button button-green justify-self-right'>\r\n                                                                <span className='d-none d-md-inline'>\r\n                                                                    Enviar\r\n                                                    </span>\r\n                                                                {' '}\r\n                                                                <FontAwesomeIcon icon={faCheck} size='xl' />\r\n                                                            </button>\r\n                                                            :\r\n                                                            <button onClick={next} className='button button-green justify-self-right'>\r\n                                                                <span className='d-none d-md-inline'>\r\n                                                                    Siguiente\r\n                                                    </span>\r\n                                                                {' '}\r\n                                                                <FontAwesomeIcon icon={faAngleRight} size='xl' />\r\n                                                            </button>\r\n                                                }\r\n                                            </div>\r\n                                        </form>\r\n                                    </div>\r\n                                </>\r\n                        }\r\n                    </div>\r\n\r\n                </section>\r\n            </main>\r\n            <Footer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Inscripcion;","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\tooltip\\index.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\tooltip\\tooltip.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\solicitud-correccion.js",["488","489","490","491","492","493"],"import React, { useState, useEffect } from 'react'\r\nimport Footer from '../componentes/footer/footer';\r\nimport Navbar from '../componentes/navbar';\r\nimport DropdownImage from '../componentes/dropdown-image';\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport Steps from '../componentes/forms/forms-steps';\r\nimport StepManager from '../componentes/forms/step-manager/step-manager';\r\nimport Fade from 'react-reveal/Fade';\r\nimport ImgTematica from '../img/corr-req.svg';\r\nimport HelmetMetaData from \"../componentes/helmet\";\r\nimport { Link } from 'react-router-dom';\r\nimport { extractLink, toName, toSentence } from '../helpers/functions';\r\nimport { isNameInvalid, isAgeInvalid, isPhoneInvalid, isEmailInvalid, isLinkInvalid, isTitleInvalid, isAboutInvalid } from '../helpers/validators';\r\nimport { saveRequest } from '../api';\r\nimport { useStepObserver } from '../hooks/useStepObserver';\r\nimport { css } from \"@emotion/core\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faAngleLeft, faAngleRight, faCheck, faCheckCircle, faHome, faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { contactTypes, correctionPoints } from '../data/data';\r\nimport { faWhatsapp } from '@fortawesome/free-brands-svg-icons';\r\n\r\nconst steps = ['¡Hola!', 'Contacto', 'Obra', 'Contenido'];\r\nconst chkPoints = correctionPoints;\r\n\r\nconst overrideSpinnerInline = css`\r\n  display: inline-block;\r\n  vertical-align: middle;\r\n`;\r\n\r\nconst Solicitud = () => {\r\n\r\n    const [activeIndex, setActiveIndex] = useState(0);\r\n    const [loading, setLoading] = useState(false); // Determina si se está enviando el form\r\n    const [success, setSuccess] = useState(true); // Determina si se envío el form sin errores\r\n    const { canGoBackwards, isLast } = useStepObserver(activeIndex, steps.length);\r\n\r\n    const [name, setName] = useState('');\r\n    const [age, setAge] = useState('');\r\n    const [phone, setPhone] = useState('');\r\n    const [messengerType, setMessengerType] = useState(contactTypes[0]);\r\n    const [email, setEmail] = useState('');\r\n    const [link, setLink] = useState('');\r\n    const [title, setTitle] = useState('');\r\n    const [about, setAbout] = useState('');\r\n    const [points, setPoints] = useState([chkPoints[0].id]);\r\n\r\n    const updName = (e) => {\r\n        setName(e.target.value);\r\n    }\r\n\r\n    const updAge = (e) => {\r\n        setAge(e.target.value);\r\n    }\r\n\r\n    const updPhone = (e) => {\r\n        setPhone(e.target.value);\r\n    }\r\n\r\n    const updMessengerType = (val) => {\r\n        setMessengerType(val);\r\n    }\r\n\r\n    const updEmail = (e) => {\r\n        setEmail(e.target.value);\r\n    }\r\n\r\n    const updLink = (e) => {\r\n        setLink(e.target.value);\r\n    }\r\n\r\n    const updTitle = (e) => {\r\n        setTitle(e.target.value);\r\n    }\r\n\r\n    const updAbout = (e) => {\r\n        setAbout(e.target.value);\r\n    }\r\n\r\n    const selectPoint = (id) => {\r\n        if (includesPoint(id)) {\r\n            if (id != 'ORTOGRAFIA') {\r\n                setPoints(points.filter(p => p != id));\r\n            }\r\n        } else {\r\n            setPoints([...points, id]);\r\n        }\r\n    }\r\n\r\n    const previous = (e) => {\r\n        e.preventDefault();\r\n        navigateTo(activeIndex - 1);\r\n    }\r\n\r\n    const next = (e) => {\r\n        e.preventDefault();\r\n        navigateTo(activeIndex + 1);\r\n    }\r\n\r\n    const send = async (e) => {\r\n        e.preventDefault();\r\n        if (!checkErrors()) {\r\n            setLoading(true);\r\n            saveChanges();\r\n        }\r\n    }\r\n\r\n    const saveChanges = () => {\r\n        const data = {\r\n            name: toName(name.trim()),\r\n            age: parseInt(age),\r\n            phone: phone.trim(),\r\n            messengerType: messengerType.type,\r\n            email: email.trim(),\r\n            title: toSentence(title.trim()),\r\n            link: extractLink(link.trim()),\r\n            about: about.trim(),\r\n            points,\r\n            type: 'CORRECCION',\r\n            status: 'DISPONIBLE',\r\n            active: 1\r\n        };\r\n\r\n        saveRequest(data).then(() => {\r\n            window.scrollTo(0, 0);\r\n            setLoading(false);\r\n            setSuccess(true);\r\n        });\r\n    }\r\n\r\n    const checkErrors = () => {\r\n\r\n        let error = (isNameInvalid(name)\r\n            || isAgeInvalid(age)\r\n            || isPhoneInvalid(phone)\r\n            || isEmailInvalid(email)\r\n            || isLinkInvalid(link)\r\n            || isTitleInvalid(title)\r\n            || isAboutInvalid(about)\r\n        );\r\n\r\n        if (error) {\r\n            alert(error);\r\n            return true;\r\n        };\r\n\r\n        return false;\r\n    }\r\n\r\n    const includesPoint = (pointId) => {\r\n        return points.find(p => p == pointId);\r\n    }\r\n\r\n    const navigateTo = (index) => {\r\n        setActiveIndex(index);\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n        setSuccess(false);\r\n    }, [activeIndex]);\r\n\r\n    return (\r\n        <div>\r\n            <HelmetMetaData title=\"Correcciones - Temple Luna\" description=\"Estamos dispuestos a ayudarte con aquellas obra que tanto amas. ¡Es gratis!\" />\r\n            <Navbar />\r\n            <main className='main-body below-navbar colored-background'>\r\n                <section className='container-xl section position-relative z-3'>\r\n                    <h2 className='mb-0'>Pide una corrección</h2>\r\n                    <p className='txt-responsive-form'>Y te la enviaremos a tu correo en PDF</p>\r\n                </section>\r\n                <section className='container-xl mt-2 position-relative'>\r\n                    <img src={ImgTematica} alt='img-fondo' className='img-fondo-formulario' />\r\n                    <div className='floating-form'>\r\n                        {\r\n                            success\r\n                                ?\r\n                                <div className='form-container text-align-center'>\r\n                                    <Fade bottom>\r\n                                        <FontAwesomeIcon color={'#3DE58D'} icon={faCheckCircle} style={{ fontSize: '8rem' }} />\r\n                                        <h3 className='mt-1 mb-1'>Listo</h3>\r\n                                    </Fade>\r\n                                    <p className='txt-responsive-form m0-auto'>Cuando terminemos tu pedido, lo recibirás en tu correo</p>\r\n                                    <div className='form-buttons-container mt-3'>\r\n                                        <Link to={'inicio'} className='button button-green m0-auto'>\r\n                                            <FontAwesomeIcon icon={faHome} size='xl' />\r\n                                            {' '}\r\n                                            <span className='d-none d-md-inline'>\r\n                                                Regresar\r\n                                            </span>\r\n                                        </Link>\r\n                                    </div>\r\n                                </div>\r\n                                :\r\n                                <>\r\n                                    <Steps\r\n                                        activeIndex={activeIndex}\r\n                                        navigateTo={navigateTo}\r\n                                        steps={steps} />\r\n                                    <div className='form-container'>\r\n                                        <form>\r\n                                            <StepManager currentIndex={activeIndex}>\r\n                                                <div className='step-0'>\r\n                                                    <div className='form-group mb-0'>\r\n                                                        <p><b>Gracias</b> por elegir a <b>Temple Luna</b>. ¡Estamos seguros de que te va a encantar!<br /><br />\r\n                                                        Antes de continuar, te pedimos que leas algunas <b>preguntas frecuentes:</b><br /><br />\r\n\r\n                                                            <b>1- ¿Qué solicitamos?</b><br /><br />\r\n                                                            Solicitamos tus datos de contacto para poder <b>(1)</b> enviarte el trabajo final y <b>(2)</b> contactarte si es que necesitamos\r\n                                                            más información sobre tu pedido.<br /><br />\r\n\r\n                                                            <b>2- ¿Qué obtendré?</b><br /><br />\r\n                                                            Obtendrás un documento en <b>PDF</b> con el resultado de tu pedido. Ese documento será <b>enviado a tu correo</b>. Contendrá,\r\n                                                            además, un <b>código QR</b> de autenticidad y un <b>link</b> que podrás usar para compartirlo. Puedes ver un ejemplo\r\n                                                            <b> <a target='_blank' href='https://templeluna.app/prev_resultado?id=Ik52xvRTdBelcdRKQBKt&t=Remordimiento&test=true'>aquí</a></b>.<br /><br />\r\n\r\n                                                            <b>3- ¿Hay condiciones?</b><br /><br />\r\n                                                            - No envíes links de <b>Wattpad,</b> recuerda que no se pueden <b>copiar</b> para corregir. Una opción es subir tu texto a Google Drive y compartir el <b>link de acceso</b>.<br />\r\n                                                            - Tu escrito debe estar <b>completo</b> y no debe incluir algún <b>costo monetario</b> para <b>nosotros</b>. Caso contrario, el pedido será <b>anulado</b>.<br />\r\n                                                            - El link a tu obra quedará <b>público</b> en el perfil del voluntario. No envíes <b>obras inéditas</b> o <b>que aún no pienses publicar</b>.<br />\r\n                                                            - <b>Finalmente</b>, el artista podrá usar la corrección en su <b>portafolio</b>.<br /><br />\r\n\r\n                                                            <b>4- ¿Cuál es el costo?</b><br /><br />\r\n                                                            Por el momento, este servicio es <b>gratuito</b>. Cuando no lo sea, <b>lo dejaremos claro</b>.<br /><br />\r\n\r\n                                                            <b>5- ¿Quienes atienden los pedidos?</b><br /><br />\r\n                                                            El equipo está conformado por <b>voluntarios</b>, los cuales han tenido que demostrar <b>experiencia en correcciones</b>.<br /><br />\r\n\r\n                                                            <b>6- ¿Cómo puedo agradecer?</b><br /><br />\r\n                                                            <b>Comparte</b> nuestro trabajo en redes. Tendrás un <b>botón de \"Compartir\"</b> cuando recibas tu pedido. Eso nos ayudaría <b>mucho</b>.<br /><br />\r\n\r\n                                                            <b>7- ¿Cómo puedo ser voluntario?</b><br /><br />\r\n                                                            Escríbenos por el <b> <a target='_blank' href='https://www.facebook.com/groups/templeluna/'>grupo oficial</a></b> y podemos coordinar una <b>entrevista con el creador</b>.\r\n                                                        </p>\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <p>Presiona siguiente para continuar.</p>\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className='step-1'>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtNombres\">¿Cómo te llamas?</label>\r\n                                                        <input minLength=\"1\" maxLength=\"50\" type=\"text\" value={name} onChange={updName} id=\"txtNombres\" placeholder=\"Ingresa tus nombres\" />\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtEdad\">¿Qué edad tienes?</label>\r\n                                                        <input type=\"number\" min={10} max={99} value={age} onChange={updAge} id=\"txtEdad\" placeholder=\"Ingresa tu edad\" />\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtNumero\">Bríndanos un número para consultas (con código de país)</label>\r\n                                                        <div className='cbo-text'>\r\n                                                            <DropdownImage\r\n                                                                selectedItem={messengerType}\r\n                                                                list={contactTypes}\r\n                                                                select={updMessengerType} />\r\n                                                            <input type=\"text\" value={phone} onChange={updPhone} id=\"txtNumero\" placeholder=\"Ej: +51 999 999 999\" />\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtCorreo\">Bríndanos un correo para enviarte el trabajo</label>\r\n                                                        <input minLength=\"6\" maxLength=\"100\" type=\"email\" value={email} onChange={updEmail} id=\"txtCorreo\" placeholder=\"Ingresa tu correo\" />\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className='step-2'>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtTitulo\">Título de tu obra</label>\r\n                                                        <input minLength=\"1\" maxLength=\"100\" type=\"text\" value={title} onChange={updTitle} id=\"txtTitulo\" placeholder=\"Ejemplo: La gran infidelidad\" />\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtLink\">Link de tu obra</label>\r\n                                                        <input minLength=\"1\" maxLength=\"500\" type=\"text\" value={link} onChange={updLink} id=\"txtLink\" placeholder=\"Ingresa el link\" />\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className='step-3'>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtAcerca\">En general ¿De qué trata tu obra?</label>\r\n                                                        <textarea minLength=\"1\" maxLength=\"1000\" rows=\"4\" value={about} onChange={updAbout} id=\"txtAcerca\" placeholder=\"Ejemplo: Mi obra trata sobre las ocurrencias vividas con mi primer amor y el dolor causado por su posterior traición...\"></textarea>\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtLink\">¿En qué puntos deseas la corrección?</label>\r\n                                                        {\r\n                                                            chkPoints.map(point => {\r\n                                                                const included = includesPoint(point.id);\r\n                                                                return (\r\n                                                                    <div key={point.id} onClick={() => selectPoint(point.id)} className={`chkTag ${included ? 'active' : ''}`}>\r\n                                                                        {\r\n                                                                            included\r\n                                                                                ?\r\n                                                                                <FontAwesomeIcon color={'white'} icon={faCheck} style={{ fontSize: '1.6rem' }} />\r\n                                                                                :\r\n                                                                                <FontAwesomeIcon color={'#adadad'} icon={faPlus} style={{ fontSize: '1.6rem' }} />\r\n                                                                        }\r\n                                                                        {' '}\r\n                                                                        {point.name}\r\n                                                                    </div>\r\n                                                                )\r\n                                                            })\r\n                                                        }\r\n                                                    </div>\r\n                                                </div>\r\n                                            </StepManager>\r\n                                            <div className='form-buttons-container'>\r\n                                                {\r\n                                                    canGoBackwards && !loading\r\n                                                    &&\r\n                                                    <button onClick={previous} className='button button-green'>\r\n                                                        <FontAwesomeIcon icon={faAngleLeft} size='xl' />\r\n                                                        {' '}\r\n                                                        <span className='d-none d-md-inline'>\r\n                                                            Anterior\r\n                                                    </span>\r\n                                                    </button>\r\n                                                }\r\n                                                {\r\n                                                    loading\r\n                                                        ?\r\n                                                        <span className='button button-green justify-self-right'>\r\n                                                            Enviando\r\n                                                            {' '}\r\n                                                            <ClipLoader color={'#fff'} loading={true} css={overrideSpinnerInline} size={22} />\r\n                                                        </span>\r\n                                                        :\r\n                                                        isLast\r\n                                                            ?\r\n                                                            <button onClick={send} className='button button-green justify-self-right'>\r\n                                                                <span className='d-none d-md-inline'>\r\n                                                                    Enviar\r\n                                                    </span>\r\n                                                                {' '}\r\n                                                                <FontAwesomeIcon icon={faCheck} size='xl' />\r\n                                                            </button>\r\n                                                            :\r\n                                                            <button onClick={next} className='button button-green justify-self-right'>\r\n                                                                <span className='d-none d-md-inline'>\r\n                                                                    Siguiente\r\n                                                    </span>\r\n                                                                {' '}\r\n                                                                <FontAwesomeIcon icon={faAngleRight} size='xl' />\r\n                                                            </button>\r\n                                                }\r\n                                            </div>\r\n                                        </form>\r\n                                    </div>\r\n                                </>\r\n                        }\r\n                    </div>\r\n\r\n                </section>\r\n            </main>\r\n\r\n            <div className='fab-button'>\r\n                <a href={`https://web.whatsapp.com/send?phone=${process.env.REACT_APP_CONTACT_WSP}`} target='_blank' className='fab-button__circle fab-button__circle-wsp'>\r\n                    {' '}\r\n                    <FontAwesomeIcon icon={faWhatsapp} className='icon' />\r\n                </a>\r\n            </div>\r\n\r\n            <Footer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Solicitud;","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\modal\\correctionDetail.js",["494","495","496","497","498","499","500","501","502","503","504"],"import React, { useContext } from 'react';\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport Avatar from '../avatar';\r\nimport Zoom from 'react-reveal/Zoom';\r\nimport { getDateText, getExpDateText, getMessengerTypeName, getFormattedPhone, getAbrevPointName, extractLink } from '../../helpers/functions';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { AuthContext } from '../../context/AuthContext';\r\nimport { css } from \"@emotion/core\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faAngleDown, faEdit, faExchangeAlt, faEye, faHandPaper, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { faWhatsapp } from '@fortawesome/free-brands-svg-icons';\r\nimport './modals.css';\r\n\r\nconst overrideSpinnerInline = css`\r\n  display: inline-block;\r\n  margin-left: .6rem;\r\n  vertical-align: middle;\r\n`;\r\n\r\nconst Modal = ({ isOpen, data, loading, openConfirmationModal, close }) => {\r\n\r\n    const history = useHistory();\r\n\r\n    const { logged } = useContext(AuthContext);\r\n    const isTakenByMe = data?.takenBy == logged.uid;\r\n    const messengerType = data?.messengerType;\r\n    const formattedPhone = getFormattedPhone(data?.phone);\r\n    const formattedLink = extractLink(data?.link);\r\n\r\n    let styles = '';\r\n    if (isOpen) {\r\n        styles = 'open';\r\n    } else {\r\n        styles = 'close';\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={'overlay overlay-modal ' + styles} onClick={close} />\r\n            <Zoom bottom collapse when={isOpen}>\r\n                <div className={'modal ' + styles}>\r\n                    <div className='modal-container'>\r\n                        <div className='header-container position-relative'>\r\n                            <Avatar clases='modal-avatar img-avatar-container' />\r\n                            <div className='title-container'>\r\n                                <h3 className='clamp clamp-2'>{data?.title}</h3>\r\n                                <p>{\r\n                                    data?.status == 'DISPONIBLE' || isTakenByMe && data?.status == 'HECHO'\r\n                                        ?\r\n                                        getDateText(data?.createdAt.seconds * 1000)\r\n                                        :\r\n                                        isTakenByMe && data?.status == 'TOMADO'\r\n                                            ?\r\n                                            getExpDateText(data?.expDate.seconds * 1000)\r\n                                            :\r\n                                            null\r\n                                }</p>\r\n                            </div>\r\n                            <FontAwesomeIcon icon={faAngleDown} onClick={close} className='close-icon' />\r\n                        </div>\r\n                        <div className='description-container'>\r\n                            <p>{data?.about || 'No hay descripción'}</p>\r\n                            <h4>Link de la obra</h4>\r\n                            {\r\n                                formattedLink ?\r\n                                    <a target='_blank' className='clamp clamp-1' href={formattedLink}>{formattedLink}</a>\r\n                                    :\r\n                                    <p>No existe link</p>\r\n                            }\r\n                            <h4>Puntos requeridos</h4>\r\n                            <ul>\r\n                                {\r\n                                    data?.points?.map(point => (\r\n                                        <li key={point}>{getAbrevPointName(point)}</li>\r\n                                    ))\r\n                                }\r\n                            </ul>\r\n                            {\r\n                                (!data?.points || data?.points?.length < 1)\r\n                                &&\r\n                                <p>No se han especificado puntos</p>\r\n                            }\r\n                            {\r\n                                isTakenByMe\r\n                                &&\r\n                                <>\r\n                                    <h4>Datos de contacto</h4>\r\n                                    <p className=\"m-0\"><b>Nombre:</b> {data?.name}</p>\r\n                                    <p className=\"m-0\"><b>Contacto:</b> {data?.phone} ({getMessengerTypeName(messengerType)})</p>\r\n                                    {\r\n                                        messengerType == 'WSP' && formattedPhone\r\n                                        &&\r\n                                        <button onClick={() => window.open('https://web.whatsapp.com/send?phone=' + formattedPhone)} className='button button-whatsapp button-blue button-option-request my-1'>\r\n                                            <FontAwesomeIcon color={'#fff'} icon={faWhatsapp} className='icon' />\r\n                                                Contactar\r\n                                        </button>\r\n                                    }\r\n                                    <p className=\"m-0 mb-2\"><b>Correo:</b> {data?.email}</p>\r\n                                </>\r\n                            }\r\n                        </div>\r\n                        <div className=\"footer-card-container\">\r\n                            <div className='button-container'>\r\n                                {\r\n                                    loading\r\n                                        ?\r\n                                        <button onClick={() => { }} className='button button-blue button-option-request'>\r\n                                            Cargando\r\n                                                {' '}\r\n                                            <ClipLoader color={'#fff'} loading={true} css={overrideSpinnerInline} size={22} />\r\n                                        </button>\r\n                                        :\r\n                                        <>\r\n                                            <>\r\n                                                {\r\n                                                    data?.status == 'DISPONIBLE'\r\n                                                        ?\r\n                                                        <button onClick={() => openConfirmationModal(true, 'TAKE_REQUEST')} className='button button-blue button-option-request'>\r\n                                                            <FontAwesomeIcon color={'#fff'} icon={faHandPaper} className='icon' />\r\n                                                            Tomar pedido\r\n                                                        </button>\r\n                                                        :\r\n                                                        data?.status == 'TOMADO' && isTakenByMe\r\n                                                            ?\r\n                                                            <>\r\n                                                                <button onClick={() => history.push('prep_correccion', { data })} className='button button-green button-option-request'>\r\n                                                                    <FontAwesomeIcon color={'#fff'} icon={faEdit} className='icon' />\r\n                                                                    Iniciar corrección\r\n                                                                </button>\r\n                                                                <button onClick={() => openConfirmationModal(true, 'RESIGN_REQUEST')} className='button button-dark-purple button-option-request'>\r\n                                                                    <FontAwesomeIcon color={'#fff'} icon={faExchangeAlt} className='icon' />\r\n                                                                    Devolver pedido\r\n                                                                </button>\r\n                                                            </>\r\n                                                            :\r\n                                                            null\r\n                                                }\r\n                                            </>\r\n                                            {\r\n                                                data?.status == 'HECHO' && isTakenByMe\r\n                                                && (\r\n                                                    <button onClick={() => history.push(`prev_resultado?id=${data.id}&origin=tl`)} className='button button-green button-option-request'>\r\n                                                        <FontAwesomeIcon color={'#fff'} icon={faEye} className='icon' />\r\n                                                        Ir a resultado\r\n                                                    </button>\r\n                                                )\r\n                                            }\r\n                                            <button onClick={close} className='button button-red button-option-request'>\r\n                                                <FontAwesomeIcon color={'#fff'} icon={faTimes} className='icon' />\r\n                                                Cerrar\r\n                                            </button>\r\n                                        </>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </Zoom>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Modal;","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\prep_correccion.js",["505"],"import React, { useState, useEffect } from 'react'\r\nimport Footer from '../componentes/footer/footer';\r\nimport Navbar from '../componentes/navbar';\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport Fade from 'react-reveal/Fade';\r\nimport { css } from \"@emotion/core\";\r\nimport { setRequestDone } from '../api';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowLeft, faPaperPlane, faCheckCircle, faHome, faEye } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst overrideSpinnerInline = css`\r\n  display: inline-block;\r\n  vertical-align: middle;\r\n`;\r\n\r\nconst Preparation = ({ location }) => {\r\n\r\n    const { id, title, about, link, type, points } = location.state.data;\r\n\r\n    const [success, setSuccess] = useState(false);\r\n    const [urlResult, setUrlResult] = useState('');\r\n    const [loading, setLoading] = useState(false); // Determina si se está enviando el form\r\n    const [ortography, setOrtography] = useState('');\r\n    const [improvement, setImprovement] = useState('');\r\n\r\n    const history = useHistory();\r\n\r\n    const ortographyRequested = points.includes('ORTOGRAFIA');\r\n\r\n    const updOrtography = (e) => {\r\n        setOrtography(e.target.value);\r\n    }\r\n\r\n    const updImprovement = (e) => {\r\n        setImprovement(e.target.value);\r\n    }\r\n\r\n    const goBackwards = () => {\r\n        history.push('/admin');\r\n    }\r\n\r\n    const send = async (e) => {\r\n        e.preventDefault();\r\n        if (!checkErrors()) {\r\n            setLoading(true);\r\n            saveChanges();\r\n        }\r\n    }\r\n\r\n    const saveChanges = () => {\r\n        const data = {\r\n            requestId: id,\r\n            title: title.trim(),\r\n            type: type.trim(),\r\n            correctedText: ortography,\r\n            improvement: improvement.trim(),\r\n        };\r\n\r\n        setRequestDone(data).then(result => {\r\n            window.scrollTo(0, 0);\r\n            setLoading(false);\r\n            if (!result.error) {\r\n                setUrlResult(result.url);\r\n                setSuccess(true);\r\n            } else {\r\n                alert(result.error);\r\n                setSuccess(false);\r\n            }\r\n        });\r\n    }\r\n\r\n    const checkErrors = () => {\r\n\r\n        // Ortography\r\n        if (ortographyRequested) {\r\n            if (!(/^(?!\\s*$).{1,2000000}/.test(ortography))) {\r\n                alert('La corrección de la obra debe tener de 1 a 2000000 caracteres');\r\n                return true;\r\n            }\r\n        }\r\n\r\n        // Improvement (optional)\r\n        if (improvement) {\r\n            if (!(/^(?!\\s*$).{1,5000}/.test(improvement))) {\r\n                alert('El consejo para el autor debe tener de 1 a 5000 caracteres');\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n        setSuccess(false);\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <Navbar />\r\n            <main className='main-body below-navbar colored-background'>\r\n                <section className='container-xl section prep-req-container'>\r\n                    <div className='flex-align-center mb-2'>\r\n                        <FontAwesomeIcon onClick={goBackwards} className='mr-1' icon={faArrowLeft} size='lg' />\r\n                        <h4 className='request-prep-title m-0 clamp clamp-2'>Corrección: {title}</h4>\r\n                    </div>\r\n                    {\r\n                        success\r\n                            ?\r\n                            <div className='form-container text-align-center'>\r\n                                <Fade bottom>\r\n                                    <FontAwesomeIcon color={'#3DE58D'} icon={faCheckCircle} style={{ fontSize: '8rem' }} />\r\n                                    <h3 className='mt-1 mb-1'>Corrección enviada!</h3>\r\n                                </Fade>\r\n                                <p className='txt-responsive-form m0-auto'>Tu experiencia ha aumentado :)</p>\r\n                                <div className='button-container mt-3'>\r\n                                    <button onClick={() => window.open(urlResult, '_blank')} className='button button-light-purple button-option-request ml-auto'>\r\n                                        <FontAwesomeIcon icon={faEye} size='1x' />\r\n                                        {' '}\r\n                                                Ver resultado\r\n                                        </button>\r\n                                    <button onClick={goBackwards} className='button button-blue button-option-request mr-auto'>\r\n                                        <FontAwesomeIcon icon={faHome} size='1x' />\r\n                                        {' '}\r\n                                                Regresar\r\n                                        </button>\r\n                                </div>\r\n                            </div>\r\n                            :\r\n                            <>\r\n                                <div className=''>\r\n                                    <p>{about}</p>\r\n                                    <h4>Link de la obra</h4>\r\n                                    {\r\n                                        link\r\n                                            ?\r\n                                            <a className='clamp clamp-1' target='_blank' href={link}>{link}</a>\r\n                                            :\r\n                                            <p>No existe link</p>\r\n                                    }\r\n                                    {\r\n                                        ortographyRequested\r\n                                        &&\r\n                                        <div className='form-group'>\r\n                                            <h4>Texto con ortografía corregida</h4>\r\n                                            <textarea minLength=\"1\" maxLength=\"2000000\" rows=\"20\" value={ortography} onChange={updOrtography} id=\"txtOrtografia\" placeholder=\"Ejemplo: La ortografía fue excelente. Haces un correcto uso de las comas, los puntos y las tildes...\"></textarea>\r\n                                        </div>\r\n                                    }\r\n                                    <div className='form-group'>\r\n                                        <h4>¿Algún consejo para que el autor pueda mejorar? (Opcional)</h4>\r\n                                        <textarea minLength=\"1\" maxLength=\"5000\" rows=\"4\" value={improvement} onChange={updImprovement} id=\"txtOrtografia\" placeholder=\"Ejemplo: La ortografía fue excelente. Haces un correcto uso de las comas, los puntos y las tildes...\"></textarea>\r\n                                    </div>\r\n                                </div>\r\n                                <div className='form-buttons-container mt-3'>\r\n                                    {\r\n                                        loading\r\n                                            ?\r\n                                            <span className='button button-green justify-self-right'>\r\n                                                Enviando\r\n                                {' '}\r\n                                                <ClipLoader color={'#fff'} loading={true} css={overrideSpinnerInline} size={22} />\r\n                                            </span>\r\n                                            :\r\n                                            <button onClick={send} className='button button-green justify-self-right'>\r\n                                                <FontAwesomeIcon icon={faPaperPlane} size='1x' />\r\n                                                {' '}\r\n                                                <span className='d-none d-md-inline'>\r\n                                                    Enviar\r\n                                                </span>\r\n                                            </button>\r\n                                    }\r\n                                </div>\r\n                            </>\r\n                    }\r\n                </section>\r\n            </main>\r\n            <Footer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Preparation;","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\ins_evento_GRAN-TALLER-TECNICAS-NARRACION-LILI-1.js",["506","507"],"import React, { useState, useEffect } from 'react'\r\nimport Footer from '../componentes/footer/footer';\r\nimport Navbar from '../componentes/navbar';\r\nimport DropdownImage from '../componentes/dropdown-image';\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport Steps from '../componentes/forms/forms-steps';\r\nimport StepManager from '../componentes/forms/step-manager/step-manager';\r\nimport Fade from 'react-reveal/Fade';\r\nimport ImgAutor from '../img/lili.jpg';\r\nimport HelmetMetaData from \"../componentes/helmet\";\r\nimport { toName } from '../helpers/functions';\r\nimport { isNameInvalid, isAgeInvalid, isPhoneInvalid, isEmailInvalid } from '../helpers/validators';\r\nimport { saveEvent } from '../api';\r\nimport { useStepObserver } from '../hooks/useStepObserver';\r\nimport { css } from \"@emotion/core\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faAngleDown, faAngleLeft, faAngleRight, faCheck, faCheckCircle, faDotCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { contactTypes } from '../data/data';\r\nimport { faWhatsapp } from '@fortawesome/free-brands-svg-icons';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst steps = ['Inicio', 'Contacto', 'Listo'];\r\nconst chkPoints = [{ id: 'SI', name: 'Sí', abrev: 'Sí' }];\r\n\r\nconst overrideSpinnerInline = css`\r\n  display: inline-block;\r\n  vertical-align: middle;\r\n`;\r\n\r\nconst mainTitle = 'Gran taller de técnicas de narración';\r\nconst hostName = 'Liliana Martinez';\r\n\r\nconst Inscripcion = () => {\r\n\r\n    const [activeIndex, setActiveIndex] = useState(0);\r\n    const [loading, setLoading] = useState(false); // Determina si se está enviando el form\r\n    const [success, setSuccess] = useState(true); // Determina si se envío el form sin errores\r\n    const { canGoBackwards, isLast } = useStepObserver(activeIndex, steps.length);\r\n\r\n    const [name, setName] = useState('');\r\n    const [age, setAge] = useState('');\r\n    const [phone, setPhone] = useState('');\r\n    const [messengerType, setMessengerType] = useState(contactTypes[0]);\r\n    const [email, setEmail] = useState('');\r\n    const [points, setPoints] = useState([]);\r\n\r\n    const history = useHistory();\r\n\r\n    const updName = (e) => {\r\n        setName(e.target.value);\r\n    }\r\n\r\n    const updAge = (e) => {\r\n        setAge(e.target.value);\r\n    }\r\n\r\n    const updPhone = (e) => {\r\n        setPhone(e.target.value);\r\n    }\r\n\r\n    const updMessengerType = (val) => {\r\n        setMessengerType(val);\r\n    }\r\n\r\n    const updEmail = (e) => {\r\n        setEmail(e.target.value);\r\n    }\r\n\r\n    const selectPoint = (id) => {\r\n        if (includesPoint(id)) {\r\n            setPoints(points.filter(p => p != id));\r\n        } else {\r\n            setPoints([...points, id]);\r\n        }\r\n    }\r\n\r\n    const previous = (e) => {\r\n        e.preventDefault();\r\n        navigateTo(activeIndex - 1);\r\n    }\r\n\r\n    const next = (e) => {\r\n        e.preventDefault();\r\n        navigateTo(activeIndex + 1);\r\n    }\r\n\r\n    const send = async (e) => {\r\n        e.preventDefault();\r\n        if (!checkErrors()) {\r\n            setLoading(true);\r\n            saveChanges();\r\n        }\r\n    }\r\n\r\n    const saveChanges = () => {\r\n\r\n        const idEvento = history.location.pathname.toString().replace(/\\//g, '').replace(/ins_evento/g, '');\r\n\r\n        const data = {\r\n            eventId: idEvento,\r\n            eventName: mainTitle,\r\n            name: toName(name.trim()),\r\n            age: parseInt(age),\r\n            phone: phone.trim(),\r\n            email: email.trim()\r\n        };\r\n\r\n        saveEvent(data).then(() => {\r\n            window.scrollTo(0, 0);\r\n            setLoading(false);\r\n            setSuccess(true);\r\n        });\r\n    }\r\n\r\n    const checkErrors = () => {\r\n\r\n        let error = (isNameInvalid(name) || isAgeInvalid(age) || isPhoneInvalid(phone) || isEmailInvalid(email));\r\n\r\n        // Custom errors\r\n        if (!includesPoint('SI')) {\r\n            error = 'Debes confirmar tu asistencia y cumplimiento';\r\n        }\r\n\r\n        if (error) {\r\n            alert(error);\r\n            return true;\r\n        };\r\n\r\n        return false;\r\n    }\r\n\r\n    const includesPoint = (pointId) => {\r\n        return points.find(p => p == pointId);\r\n    }\r\n\r\n    const navigateTo = (index) => {\r\n        setActiveIndex(index);\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n        setSuccess(false);\r\n    }, [activeIndex]);\r\n\r\n    return (\r\n        <div>\r\n            <HelmetMetaData title={mainTitle + \" - Temple Luna\"} description=\"¿La plataforma de turno no valora lo que escribes? Puedes tener una joya oculta entre manos por la que muchos pagarían.\" />\r\n            <Navbar />\r\n            <main className='main-body below-navbar colored-background'>\r\n                <section className='container-xl section position-relative z-3'>\r\n                    <h2 className='mb-0'>{mainTitle}</h2>\r\n                    <p className='txt-responsive-form w-60 w-md-75'>Con {hostName}</p>\r\n                </section>\r\n                <section className='container-xl mt-3 position-relative'>\r\n                    <div style={{ backgroundImage: `url(${ImgAutor})`, backgroundSize: '80% 90%' }} alt='img-fondo' className='img-fondo-formulario' />\r\n                    <div className='floating-form'>\r\n                        {\r\n                            success\r\n                                ?\r\n                                <div className='form-container text-align-center'>\r\n                                    <Fade bottom>\r\n                                        <FontAwesomeIcon color={'#3DE58D'} icon={faCheckCircle} style={{ fontSize: '8rem' }} />\r\n                                        <h3 className='mt-1 mb-1'>Listo</h3>\r\n                                    </Fade>\r\n                                    <p className='txt-responsive-form m0-auto'>¡No olvides unirte al grupo! Presiona el botón de abajo</p>\r\n                                    <FontAwesomeIcon icon={faAngleDown} size='2x' />\r\n\r\n                                    <div className='form-buttons-container mt-3'>\r\n                                        <a href=\"https://chat.whatsapp.com/E1xRukxw3GzEZHZHczhiN4\" className='button button-green m0-auto'>\r\n                                            <FontAwesomeIcon icon={faWhatsapp} size='1x' />\r\n                                            {' '}\r\n                                            <span>\r\n                                                Unirme\r\n                                            </span>\r\n                                        </a>\r\n                                    </div>\r\n                                </div>\r\n                                :\r\n                                <>\r\n                                    <Steps\r\n                                        activeIndex={activeIndex}\r\n                                        navigateTo={navigateTo}\r\n                                        steps={steps} />\r\n                                    <div className='form-container'>\r\n                                        <form>\r\n                                            <StepManager currentIndex={activeIndex}>\r\n                                                <div className='step-1'>\r\n\r\n                                                    <div className='form-group mb-0'>\r\n                                                        <h2>¡Bienvenido(a) al taller!</h2>\r\n                                                        <p>¿Amas <b>narrar historias</b> o quieres hacer videos con <b> calidad de voz</b> impresionante? Este taller es para ti.<br /><br />\r\n\r\n                                                            <b>Modular</b> la voz, <b>articularla</b> y dominar la <b>timidez</b> son algunas de las <b>habilidades</b> que se requieren\r\n                                                            para <b>sobresalir</b> en este mundo.\r\n                                                            Aquí te las enseñaremos.<br /><br />\r\n\r\n                                                            <b>Temario</b><br />\r\n                                                            <b>1.</b> Importancia de la voz<br />\r\n                                                            <b>2.</b> Hablar en público<br />\r\n                                                            <b>3.</b> Fonación y articulación<br />\r\n                                                            <b>4.</b> La articulación de los finos<br />\r\n                                                            <b>5.</b> Trabalenguas<br /><br />\r\n\r\n                                                            <b>Número de sesiones:</b> 1<br />\r\n                                                            <b>Costo:</b> Gratuito<br />\r\n                                                            <b>Autora:</b> Liliana Martinez<br />\r\n                                                            <b>Plataforma:</b> Google Meets<br />\r\n                                                            <b>Horario:</b> Viernes, 7 de mayo, de 5pm a 7pm (Hora Lima - Colombia)<br /><br />\r\n\r\n                                                            Al final de tu inscripción, te aparecerá un botón para ingresar al <b>grupo de Whatsapp</b>. Inscríbete <b>solamente</b> si vas a asistir.<br /><br />\r\n\r\n                                                            <b>*Si te inscribes e incumples, ya no serás tenido en cuenta en otras dinámicas de Temple Luna.</b><br /><br />\r\n                                                        </p>\r\n                                                    </div>\r\n\r\n                                                    <div className='form-group'>\r\n                                                        <p>Presiona siguiente para continuar.</p>\r\n                                                    </div>\r\n\r\n                                                </div>\r\n                                                <div className='step-2'>\r\n\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtNombres\">¿Cómo te llamas?</label>\r\n                                                        <input minLength=\"1\" maxLength=\"50\" type=\"text\" value={name} onChange={updName} id=\"txtNombres\" placeholder=\"Ingresa tus nombres\" />\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtEdad\">¿Qué edad tienes?</label>\r\n                                                        <input type=\"number\" min={10} max={99} value={age} onChange={updAge} id=\"txtEdad\" placeholder=\"Ingresa tu edad\" />\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtNumero\">¿Con qué número entrarás? (con código de país)</label>\r\n                                                        <div className='cbo-text'>\r\n                                                            <DropdownImage\r\n                                                                selectedItem={messengerType}\r\n                                                                list={[contactTypes[0]]}\r\n                                                                select={updMessengerType} />\r\n                                                            <input type=\"text\" value={phone} onChange={updPhone} id=\"txtNumero\" placeholder=\"Ej: +51 999 999 999\" />\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtCorreo\">Bríndanos tu correo de contacto</label>\r\n                                                        <input minLength=\"6\" maxLength=\"100\" type=\"email\" value={email} onChange={updEmail} id=\"txtCorreo\" placeholder=\"Ingresa tu correo\" />\r\n                                                    </div>\r\n\r\n                                                </div>\r\n                                                <div className='step-3'>\r\n\r\n                                                    <div className='form-group'>\r\n\r\n                                                        <div className='form-group'>\r\n                                                            <label htmlFor=\"txtLink\">He leído los horarios y confirmo mi asistencia</label>\r\n                                                            {\r\n                                                                chkPoints.map(point => {\r\n                                                                    const included = includesPoint(point.id);\r\n                                                                    return (\r\n                                                                        <div key={point.id} onClick={() => selectPoint(point.id)} className={`chkTag ${included ? 'active' : ''}`}>\r\n                                                                            {\r\n                                                                                included\r\n                                                                                    ?\r\n                                                                                    <FontAwesomeIcon color={'white'} icon={faCheck} style={{ fontSize: '1.6rem' }} />\r\n                                                                                    :\r\n                                                                                    <FontAwesomeIcon color={'#adadad'} icon={faDotCircle} style={{ fontSize: '1.6rem' }} />\r\n                                                                            }\r\n                                                                            {' '}\r\n                                                                            {point.name}\r\n                                                                        </div>\r\n                                                                    )\r\n                                                                })\r\n                                                            }\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </StepManager>\r\n                                            <div className='form-buttons-container'>\r\n                                                {\r\n                                                    canGoBackwards && !loading\r\n                                                    &&\r\n                                                    <button onClick={previous} className='button button-green'>\r\n                                                        <FontAwesomeIcon icon={faAngleLeft} size='xl' />\r\n                                                        {' '}\r\n                                                        <span className='d-none d-md-inline'>\r\n                                                            Anterior\r\n                                                    </span>\r\n                                                    </button>\r\n                                                }\r\n                                                {\r\n                                                    loading\r\n                                                        ?\r\n                                                        <span className='button button-green justify-self-right'>\r\n                                                            Enviando\r\n                                                            {' '}\r\n                                                            <ClipLoader color={'#fff'} loading={true} css={overrideSpinnerInline} size={22} />\r\n                                                        </span>\r\n                                                        :\r\n                                                        isLast\r\n                                                            ?\r\n                                                            <button onClick={send} className='button button-green justify-self-right'>\r\n                                                                <span className='d-none d-md-inline'>\r\n                                                                    Enviar\r\n                                                    </span>\r\n                                                                {' '}\r\n                                                                <FontAwesomeIcon icon={faCheck} size='xl' />\r\n                                                            </button>\r\n                                                            :\r\n                                                            <button onClick={next} className='button button-green justify-self-right'>\r\n                                                                <span className='d-none d-md-inline'>\r\n                                                                    Siguiente\r\n                                                    </span>\r\n                                                                {' '}\r\n                                                                <FontAwesomeIcon icon={faAngleRight} size='xl' />\r\n                                                            </button>\r\n                                                }\r\n                                            </div>\r\n                                        </form>\r\n                                    </div>\r\n                                </>\r\n                        }\r\n                    </div>\r\n\r\n                </section>\r\n            </main>\r\n            <Footer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Inscripcion;","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\profile\\mini-profile.js",["508","509","510","511"],"import React from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { getSnIconByUrl } from '../../helpers/functions';\r\nimport Avatar from '../avatar';\r\nimport './mini-profile.css';\r\n\r\nexport const MiniProfile = ({ id, img, title, networks = [], editorial }) => {\r\n\r\n    const history = useHistory();\r\n\r\n    const navigateTo = (route) => {\r\n        history.push(route);\r\n    }\r\n\r\n    return (\r\n        <div className='mini-profile'>\r\n\r\n            <div className='mini-profile__always-visible'>\r\n                <div className='mini-profile__img-container'>\r\n                    <Avatar img={img} onClick={() => navigateTo(`/perfil/${id}`)} />\r\n                </div>\r\n                <div className='mini-profile__data-container'>\r\n                    <div className='mini-profile__pre-header'>\r\n                        <span className='mini-profile__pre-title'>Realizado por</span>\r\n                    </div>\r\n                    <div className='mini-profile__header'>\r\n                        <Link to={`/perfil/${id}`} className='mini-profile__title clamp clamp-1'>{title}</Link>\r\n                        {\r\n                            editorial\r\n                                ?\r\n                                <Link to={`/perfil/${editorial.id}`} style={{ color: editorial.contrastColor, background: editorial.mainColor }} className='mini-profile__tag clamp clamp-1'>{editorial.name}</Link>\r\n                                :\r\n                                <span className='mini-profile__tag'>Independiente</span>\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div className='mini-profile__rs-container'>\r\n                    <div className='mini-profile__rs-title'>Sígueme en:</div>\r\n                    <div className='mini-profile__rs'>\r\n                        {\r\n                            networks.slice(0, 3).map(network => {\r\n                                const iconData = getSnIconByUrl(network);\r\n\r\n                                if (iconData) {\r\n                                    return (\r\n                                        <a target='_blank' href={network} className={`mini-profile__sn-icon`}>\r\n                                            <img src={iconData.imgSrc} alt='img-icon' />\r\n                                        </a>\r\n                                    )\r\n                                }\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className='mini-profile__only-mobile'>\r\n                <div className='mini-profile__only-mobile__rs-title'>Sígueme en: </div>\r\n                {\r\n                    networks.slice(0, 3).map(network => {\r\n                        const iconData = getSnIconByUrl(network);\r\n\r\n                        if (iconData) {\r\n                            return (\r\n                                <a target='_blank' href={network} className={`mini-profile__only-mobile__sn-icon`}>\r\n                                    <img src={iconData.imgSrc} alt='img-icon' />\r\n                                </a>\r\n                            )\r\n                        }\r\n                    })\r\n                }\r\n                {\r\n                    editorial\r\n                        ?\r\n                        <Link to={`/perfil/${editorial.id}`} style={{ color: editorial.contrastColor, background: editorial.mainColor }} className='mini-profile__only-mobile__tag clamp clamp-1'>{editorial.name}</Link>\r\n                        :\r\n                        <span className='mini-profile__only-mobile__tag'>Independiente</span>\r\n                }\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MiniProfile;\r\n","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\result-preview-card\\index.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\result-preview-card\\result-preview-card.js",["512"],"import React from 'react';\r\nimport { getServiceById } from '../../helpers/functions';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faEye, faHeart, faLock } from '@fortawesome/free-solid-svg-icons';\r\nimport './result-preview-card.css';\r\n\r\nconst Card = ({ id, title, type, resultUrl, img, views = 0, likes = 0, hidden, isOwner, onClick }) => {\r\n\r\n    const serviceData = getServiceById(type);\r\n\r\n    if (serviceData) {\r\n\r\n        return (\r\n            <div onClick={() => (onClick && (isOwner || !hidden)) && onClick(id)} className='result-preview-card' style={{ backgroundImage: `url(${((!hidden || isOwner) && type == 'DISENO' && resultUrl) || img || serviceData.prevImg})`, cursor: onClick && (!hidden || isOwner) ? 'pointer' : 'unset', opacity: (hidden && !isOwner) ? '0.6' : '1' }}> {/*Se mostrará la imagen de fondo de diseño si está pública, caso contrario, la predeterminada*/}\r\n                <div className='result-preview-card__overlay'>\r\n                    <div className='result-preview-card__controls-standard'>\r\n                        <div className='result-preview-card__description clamp clamp-2 no-break'>\r\n                            {\r\n                                hidden &&\r\n                                <FontAwesomeIcon icon={faLock} className='result-preview-card__lock-icon' />\r\n                            }\r\n                            {' ' + title}\r\n                        </div>\r\n                        <div className='result-preview-card__statistics'>\r\n                            <div className='result-preview-card__statistic'>\r\n                                <FontAwesomeIcon icon={faEye} className='result-preview-card__statistic-icon' />\r\n                                {views}\r\n                            </div>\r\n                            <div className='result-preview-card__statistic'>\r\n                                <FontAwesomeIcon icon={faHeart} className='result-preview-card__statistic-icon' />\r\n                                {likes}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div >\r\n        )\r\n    }\r\n\r\n    return null;\r\n\r\n}\r\n\r\nexport default Card;","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\service-card\\service-card.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\hooks\\useWindowSize.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\modal\\detailRequestModal.js",["513","514"],"import React, { useState, useEffect } from 'react';\r\nimport ConfirmationModal from './confirmationModal';\r\nimport './modals.css';\r\nimport CorrectionModal from './correctionDetail';\r\nimport CritiqueModal from './critiqueDetail';\r\nimport DesignModal from './designDetail';\r\n\r\nconst maxDaysExp = 7;\r\n\r\nconst Modal = (props) => {\r\n\r\n    const [openConfirmationModal, setOpenConfirmationModal] = useState(false);\r\n    const [confirmationType, setConfirmationType] = useState('TAKE_REQUEST');\r\n\r\n    useEffect(() => {\r\n        if (props.isOpen) {\r\n            document.body.style.overflow = 'hidden';\r\n        } else {\r\n            document.body.style.overflow = 'unset';\r\n        }\r\n        return () => document.body.style.overflow = 'unset';\r\n    }, [props.isOpen]);\r\n\r\n    const openModal = (status, type) => {\r\n        setOpenConfirmationModal(status);\r\n        setConfirmationType(type);\r\n    }\r\n\r\n    const confirm = () => {\r\n        setOpenConfirmationModal(false);\r\n        switch (confirmationType) {\r\n            case 'TAKE_REQUEST':\r\n                props.takeRequest(props.data?.id);\r\n                break;\r\n\r\n            case 'RESIGN_REQUEST':\r\n                props.resignRequest(props.data?.id);\r\n                break;\r\n        }\r\n    }\r\n\r\n    const determineModal = (type) => {\r\n        switch (type) {\r\n            case 'CRITICA':\r\n                return <CritiqueModal {...props} openConfirmationModal={openModal} />\r\n            case 'DISENO':\r\n                return <DesignModal {...props} openConfirmationModal={openModal} />\r\n            case 'CORRECCION':\r\n                return <CorrectionModal {...props} openConfirmationModal={openModal} />\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    let confTitle;\r\n    let confMsg;\r\n\r\n    switch (confirmationType) {\r\n        case 'TAKE_REQUEST':\r\n            confTitle = 'Casi listo';\r\n            confMsg = 'Al aceptar, tienes hasta ' + maxDaysExp + ' días para entregar la corrección o acordar una fecha con la persona interesada. ¿Continuar?';\r\n            break;\r\n\r\n        case 'RESIGN_REQUEST':\r\n            confTitle = '¿Seguro(a)?';\r\n            confMsg = 'Al aceptar, este pedido se liberará y podrá ser tomado por alguien más. ¿Continuar?';\r\n            break;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ConfirmationModal\r\n                isOpen={openConfirmationModal}\r\n                title={confTitle}\r\n                message={confMsg}\r\n                confirm={confirm}\r\n                close={() => setOpenConfirmationModal(false)} />\r\n            {\r\n                determineModal(props.data?.type)\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Modal;","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\modal\\feedbackModal.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\ins_evento_OBRA-PROFESIONAL-CCADENA-3.js",["515","516","517","518","519"],"import React, { useState, useEffect } from 'react'\r\nimport Footer from '../componentes/footer/footer';\r\nimport Navbar from '../componentes/navbar';\r\nimport DropdownImage from '../componentes/dropdown-image';\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport Steps from '../componentes/forms/forms-steps';\r\nimport StepManager from '../componentes/forms/step-manager/step-manager';\r\nimport Fade from 'react-reveal/Fade';\r\nimport ImgAutor from '../img/ccadena.jpg';\r\nimport HelmetMetaData from \"../componentes/helmet\";\r\nimport { toName } from '../helpers/functions';\r\nimport { isNameInvalid, isAgeInvalid, isPhoneInvalid, isEmailInvalid } from '../helpers/validators';\r\nimport { saveEvent } from '../api';\r\nimport { useStepObserver } from '../hooks/useStepObserver';\r\nimport { css } from \"@emotion/core\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faAngleDown, faAngleLeft, faAngleRight, faCheck, faCheckCircle, faDotCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { contactTypes } from '../data/data';\r\nimport { faWhatsapp } from '@fortawesome/free-brands-svg-icons';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst steps = ['Inicio', 'Contacto', 'Listo'];\r\nconst chkPoints = [{ id: 'SI', name: 'Sí', abrev: 'Sí' }];\r\n\r\nconst overrideSpinnerInline = css`\r\n  display: inline-block;\r\n  vertical-align: middle;\r\n`;\r\n\r\nconst mainTitle = 'Construye tu novela como un profesional';\r\nconst hostName = 'Carlos Cadena';\r\n\r\nconst Inscripcion = () => {\r\n\r\n    const [activeIndex, setActiveIndex] = useState(0);\r\n    const [loading, setLoading] = useState(false); // Determina si se está enviando el form\r\n    const [success, setSuccess] = useState(true); // Determina si se envío el form sin errores\r\n    const { canGoBackwards, isLast } = useStepObserver(activeIndex, steps.length);\r\n\r\n    const [name, setName] = useState('');\r\n    const [age, setAge] = useState('');\r\n    const [phone, setPhone] = useState('');\r\n    const [messengerType, setMessengerType] = useState(contactTypes[0]);\r\n    const [email, setEmail] = useState('');\r\n    const [points, setPoints] = useState([]);\r\n\r\n    const history = useHistory();\r\n\r\n    const updName = (e) => {\r\n        setName(e.target.value);\r\n    }\r\n\r\n    const updAge = (e) => {\r\n        setAge(e.target.value);\r\n    }\r\n\r\n    const updPhone = (e) => {\r\n        setPhone(e.target.value);\r\n    }\r\n\r\n    const updMessengerType = (val) => {\r\n        setMessengerType(val);\r\n    }\r\n\r\n    const updEmail = (e) => {\r\n        setEmail(e.target.value);\r\n    }\r\n\r\n    const selectPoint = (id) => {\r\n        if (includesPoint(id)) {\r\n            setPoints(points.filter(p => p != id));\r\n        } else {\r\n            setPoints([...points, id]);\r\n        }\r\n    }\r\n\r\n    const previous = (e) => {\r\n        e.preventDefault();\r\n        navigateTo(activeIndex - 1);\r\n    }\r\n\r\n    const next = (e) => {\r\n        e.preventDefault();\r\n        navigateTo(activeIndex + 1);\r\n    }\r\n\r\n    const send = async (e) => {\r\n        e.preventDefault();\r\n        if (!checkErrors()) {\r\n            setLoading(true);\r\n            saveChanges();\r\n        }\r\n    }\r\n\r\n    const saveChanges = () => {\r\n\r\n        const idEvento = history.location.pathname.toString().replace(/\\//g, '').replace(/ins_evento/g, '');\r\n\r\n        const data = {\r\n            eventId: idEvento,\r\n            eventName: mainTitle,\r\n            name: toName(name.trim()),\r\n            age: parseInt(age),\r\n            phone: phone.trim(),\r\n            email: email.trim()\r\n        };\r\n\r\n        saveEvent(data).then(() => {\r\n            window.scrollTo(0, 0);\r\n            setLoading(false);\r\n            setSuccess(true);\r\n        });\r\n    }\r\n\r\n    const checkErrors = () => {\r\n        let error = (isNameInvalid(name) || isAgeInvalid(age) || isPhoneInvalid(phone) || isEmailInvalid(email));\r\n\r\n        // Custom errors\r\n        if (!includesPoint('SI')) {\r\n            error = 'Debes confirmar tu asistencia y cumplimiento';\r\n        }\r\n\r\n        if (error) {\r\n            alert(error);\r\n            return true;\r\n        };\r\n\r\n        return false;\r\n    }\r\n\r\n    const includesPoint = (pointId) => {\r\n        return points.find(p => p == pointId);\r\n    }\r\n\r\n    const navigateTo = (index) => {\r\n        setActiveIndex(index);\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n        setSuccess(false);\r\n    }, [activeIndex]);\r\n\r\n    return (\r\n        <div>\r\n            <HelmetMetaData title={mainTitle + \" - Temple Luna\"} description=\"¿Eres escritor? Perfecciona tus habilidades con este curso en vivo y destaca sobre los demás. Es gratuito.\" />\r\n            <Navbar />\r\n            <main className='main-body below-navbar colored-background'>\r\n                <section className='container-xl section position-relative z-3'>\r\n                    <h2 className='mb-0'>{mainTitle}</h2>\r\n                    <p className='txt-responsive-form w-60 w-md-75'>Con {hostName}</p>\r\n                </section>\r\n                <section className='container-xl mt-3 position-relative'>\r\n                    <img src={ImgAutor} alt='img-fondo' className='img-fondo-formulario' />\r\n                    <div className='floating-form'>\r\n                        {\r\n                            success\r\n                                ?\r\n                                <div className='form-container text-align-center'>\r\n                                    <Fade bottom>\r\n                                        <FontAwesomeIcon color={'#3DE58D'} icon={faCheckCircle} style={{ fontSize: '8rem' }} />\r\n                                        <h3 className='mt-1 mb-1'>Listo</h3>\r\n                                    </Fade>\r\n                                    <p className='txt-responsive-form m0-auto'>¡No olvides unirte al grupo! Presiona el botón de abajo</p>\r\n                                    <FontAwesomeIcon icon={faAngleDown} size='2x' />\r\n\r\n                                    <div className='form-buttons-container mt-3'>\r\n                                        <a href=\"https://chat.whatsapp.com/J7T9yHij1ewFNLV41qlZoB\" className='button button-green m0-auto'>\r\n                                            <FontAwesomeIcon icon={faWhatsapp} size='1x' />\r\n                                            {' '}\r\n                                            <span>\r\n                                                Unirme\r\n                                            </span>\r\n                                        </a>\r\n                                    </div>\r\n                                </div>\r\n                                :\r\n                                <>\r\n                                    <Steps\r\n                                        activeIndex={activeIndex}\r\n                                        navigateTo={navigateTo}\r\n                                        steps={steps} />\r\n                                    <div className='form-container'>\r\n                                        <form>\r\n                                            <StepManager currentIndex={activeIndex}>\r\n                                                <div className='step-1'>\r\n\r\n                                                    <div className='form-group mb-0'>\r\n                                                        <h2>¡Hola, escritor!</h2>\r\n                                                        <p>Hemos creado este gran curso <b>en vivo</b> para enseñarte a crear obras de calidad desde <b>la psicología de los personajes</b> y lograr que estas destaquen sobre cualquier otra.<br /><br />\r\n                                                            Al final de tu inscripción, te aparecerá un botón para ingresar al <b>grupo de Whatsapp</b>. Por ahí <b>pasaremos los links de transmisión.</b> Además, podrás interactuar con el instructor y los demás autores.<br /><br />\r\n                                                            Inscríbete <b>solamente</b> si vas a asistir a la sesión. Cada sesión requerirá que hayas leido <b>un texto que te indicaremos</b>. Este servirá para hacer el correspondiente análisis.<br /><br />\r\n                                                            El curso es <b>gratuito</b> y dado que algunas obras pueden contener temas <b>sensibles</b>, sugerimos que solo entres si eres <b>mayor de edad. </b><br /><br />\r\n                                                            <b>*Si te inscribes e incumples, ya no serás tenido en cuenta en otros talleres de Temple Luna. Tú quieres dominar las letras, así que lee bien el horario y requisitos.</b><br /><br />                                                            </p>\r\n                                                    </div>\r\n\r\n                                                    <div className='form-group'>\r\n                                                        <ul>\r\n                                                            <li><b>Número de sesiones:</b> 1</li>\r\n                                                            <li><b>Duración de la sesión:</b> 1h 30m</li>\r\n                                                            <li><b>Instructor:</b> Carlos Cadena</li>\r\n                                                            <li><b>Plataforma:</b> Google Meets</li>\r\n                                                            <li><b>Horarios:</b> Jueves, 20 de mayo a las 12 del mediodia (Hora Lima - Colombia)</li>\r\n                                                            <li><b>Requisito:</b> Leer \"Eróstrato\". Accede desde <b><a target=\"_blank\" href=\"https://www.wattpad.com/1040308420-artilugios-del-placer-antolog%C3%ADa-de-candentes\">aquí</a></b>.</li>\r\n                                                            <li><b>Obras llevadas al teatro:</b> Ver <b><a target=\"_blank\" href=\"https://www.facebook.com/LosDemoniosDetrasDeLaPared/\">aquí</a></b>.</li>                                                            \r\n                                                            <li><b>¿Quieres ver el evento anterior?:</b> Míralo <b><a target=\"_blank\" href=\"https://www.youtube.com/watch?v=4VQ_MMYBI5Y&ab_channel=TempleLuna\">aquí</a></b>.</li>\r\n                                                        </ul>\r\n                                                    </div>\r\n\r\n                                                    <div className='form-group'>\r\n                                                        <p>Presiona siguiente para continuar.</p>\r\n                                                    </div>\r\n\r\n                                                </div>\r\n                                                <div className='step-2'>\r\n\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtNombres\">¿Cómo te llamas?</label>\r\n                                                        <input minLength=\"1\" maxLength=\"50\" type=\"text\" value={name} onChange={updName} id=\"txtNombres\" placeholder=\"Ingresa tus nombres\" />\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtEdad\">¿Qué edad tienes?</label>\r\n                                                        <input type=\"number\" min={10} max={99} value={age} onChange={updAge} id=\"txtEdad\" placeholder=\"Ingresa tu edad\" />\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtNumero\">¿Con qué número entrarás? (con código de país)</label>\r\n                                                        <div className='cbo-text'>\r\n                                                            <DropdownImage\r\n                                                                selectedItem={messengerType}\r\n                                                                list={[contactTypes[0]]}\r\n                                                                select={updMessengerType} />\r\n                                                            <input type=\"text\" value={phone} onChange={updPhone} id=\"txtNumero\" placeholder=\"Ej: +51 999 999 999\" />\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtCorreo\">Bríndanos tu correo de contacto</label>\r\n                                                        <input minLength=\"6\" maxLength=\"100\" type=\"email\" value={email} onChange={updEmail} id=\"txtCorreo\" placeholder=\"Ingresa tu correo\" />\r\n                                                    </div>\r\n\r\n\r\n                                                </div>\r\n                                                <div className='step-3'>\r\n\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtLink\">He leído los horarios, plataformas, requisitos y confirmo mi asistencia.</label>\r\n                                                        {\r\n                                                            chkPoints.map(point => {\r\n                                                                const included = includesPoint(point.id);\r\n                                                                return (\r\n                                                                    <div key={point.id} onClick={() => selectPoint(point.id)} className={`chkTag ${included ? 'active' : ''}`}>\r\n                                                                        {\r\n                                                                            included\r\n                                                                                ?\r\n                                                                                <FontAwesomeIcon color={'white'} icon={faCheck} style={{ fontSize: '1.6rem' }} />\r\n                                                                                :\r\n                                                                                <FontAwesomeIcon color={'#adadad'} icon={faDotCircle} style={{ fontSize: '1.6rem' }} />\r\n                                                                        }\r\n                                                                        {' '}\r\n                                                                        {point.name}\r\n                                                                    </div>\r\n                                                                )\r\n                                                            })\r\n                                                        }\r\n                                                    </div>\r\n\r\n                                                </div>\r\n                                            </StepManager>\r\n                                            <div className='form-buttons-container'>\r\n                                                {\r\n                                                    canGoBackwards && !loading\r\n                                                    &&\r\n                                                    <button onClick={previous} className='button button-green'>\r\n                                                        <FontAwesomeIcon icon={faAngleLeft} size='xl' />\r\n                                                        {' '}\r\n                                                        <span className='d-none d-md-inline'>\r\n                                                            Anterior\r\n                                                    </span>\r\n                                                    </button>\r\n                                                }\r\n                                                {\r\n                                                    loading\r\n                                                        ?\r\n                                                        <span className='button button-green justify-self-right'>\r\n                                                            Enviando\r\n                                                            {' '}\r\n                                                            <ClipLoader color={'#fff'} loading={true} css={overrideSpinnerInline} size={22} />\r\n                                                        </span>\r\n                                                        :\r\n                                                        isLast\r\n                                                            ?\r\n                                                            <button onClick={send} className='button button-green justify-self-right'>\r\n                                                                <span className='d-none d-md-inline'>\r\n                                                                    Enviar\r\n                                                    </span>\r\n                                                                {' '}\r\n                                                                <FontAwesomeIcon icon={faCheck} size='xl' />\r\n                                                            </button>\r\n                                                            :\r\n                                                            <button onClick={next} className='button button-green justify-self-right'>\r\n                                                                <span className='d-none d-md-inline'>\r\n                                                                    Siguiente\r\n                                                    </span>\r\n                                                                {' '}\r\n                                                                <FontAwesomeIcon icon={faAngleRight} size='xl' />\r\n                                                            </button>\r\n                                                }\r\n                                            </div>\r\n                                        </form>\r\n                                    </div>\r\n                                </>\r\n                        }\r\n                    </div>\r\n\r\n                </section>\r\n            </main>\r\n            <Footer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Inscripcion;","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\hooks\\useScrollOffset.js",["520"],"import { useState, useEffect } from 'react';\r\n\r\nexport const useScrollOffset = (bottomOffset = 600, topOffset = 60) => { // Indica si la página se ha deslizado hasta cierto límite\r\n\r\n    const [hasScrolledToBottomOffset, setHasScrolledToBottomOffset] = useState(false);\r\n    const [hasScrolledToTopOffset, setHasScrolledToTopOffset] = useState(false);\r\n\r\n    const checkScroll = () => {\r\n        const body = document.body;\r\n        const html = document.documentElement;\r\n        const offsetY = window.scrollY; // Scrolled height\r\n        const vpHeight = window.innerHeight; // Viewport height\r\n\r\n        const totalHeight = Math.max(body.scrollHeight, body.offsetHeight,\r\n            html.clientHeight, html.scrollHeight, html.offsetHeight);\r\n\r\n        if (offsetY >= topOffset) {\r\n            setHasScrolledToTopOffset(true);\r\n        } else {\r\n            setHasScrolledToTopOffset(false);\r\n        }\r\n\r\n        if ((totalHeight - (offsetY + vpHeight)) <= bottomOffset) {\r\n            setHasScrolledToBottomOffset(true);\r\n        } else {\r\n            setHasScrolledToBottomOffset(false);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('scroll', checkScroll);\r\n        return () => window.removeEventListener('scroll', checkScroll);\r\n    }, [topOffset, bottomOffset]);\r\n\r\n\r\n    return { hasScrolledToTopOffset, hasScrolledToBottomOffset };\r\n}","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\context\\ThemeContext.js",["521","522"],{"ruleId":"523","replacedBy":"524"},{"ruleId":"525","replacedBy":"526"},{"ruleId":"527","severity":1,"message":"528","line":28,"column":8,"nodeType":"529","endLine":28,"endColumn":10,"suggestions":"530"},{"ruleId":"531","severity":1,"message":"532","line":17,"column":78,"nodeType":"533","messageId":"534","endLine":17,"endColumn":86},{"ruleId":"531","severity":1,"message":"535","line":39,"column":12,"nodeType":"533","messageId":"534","endLine":39,"endColumn":27},{"ruleId":"531","severity":1,"message":"536","line":47,"column":12,"nodeType":"533","messageId":"534","endLine":47,"endColumn":34},{"ruleId":"531","severity":1,"message":"537","line":48,"column":12,"nodeType":"533","messageId":"534","endLine":48,"endColumn":22},{"ruleId":"531","severity":1,"message":"538","line":49,"column":12,"nodeType":"533","messageId":"534","endLine":49,"endColumn":29},{"ruleId":"531","severity":1,"message":"539","line":49,"column":31,"nodeType":"533","messageId":"534","endLine":49,"endColumn":51},{"ruleId":"531","severity":1,"message":"540","line":64,"column":11,"nodeType":"533","messageId":"534","endLine":64,"endColumn":25},{"ruleId":"531","severity":1,"message":"541","line":90,"column":11,"nodeType":"533","messageId":"534","endLine":90,"endColumn":20},{"ruleId":"542","severity":1,"message":"543","line":108,"column":23,"nodeType":"544","messageId":"545","endLine":108,"endColumn":25},{"ruleId":"542","severity":1,"message":"543","line":130,"column":149,"nodeType":"544","messageId":"545","endLine":130,"endColumn":151},{"ruleId":"542","severity":1,"message":"543","line":130,"column":178,"nodeType":"544","messageId":"545","endLine":130,"endColumn":180},{"ruleId":"542","severity":1,"message":"543","line":146,"column":127,"nodeType":"544","messageId":"545","endLine":146,"endColumn":129},{"ruleId":"542","severity":1,"message":"543","line":146,"column":156,"nodeType":"544","messageId":"545","endLine":146,"endColumn":158},{"ruleId":"527","severity":1,"message":"546","line":232,"column":8,"nodeType":"529","endLine":232,"endColumn":40,"suggestions":"547"},{"ruleId":"542","severity":1,"message":"543","line":307,"column":54,"nodeType":"544","messageId":"545","endLine":307,"endColumn":56},{"ruleId":"548","severity":1,"message":"549","line":45,"column":26,"nodeType":"550","messageId":"551","endLine":45,"endColumn":27,"suggestions":"552"},{"ruleId":"542","severity":1,"message":"553","line":86,"column":20,"nodeType":"544","messageId":"545","endLine":86,"endColumn":22},{"ruleId":"542","severity":1,"message":"553","line":87,"column":48,"nodeType":"544","messageId":"545","endLine":87,"endColumn":50},{"ruleId":"542","severity":1,"message":"543","line":156,"column":35,"nodeType":"544","messageId":"545","endLine":156,"endColumn":37},{"ruleId":"554","severity":1,"message":"555","line":220,"column":65,"nodeType":"556","endLine":220,"endColumn":179},{"ruleId":"554","severity":1,"message":"555","line":237,"column":83,"nodeType":"556","endLine":237,"endColumn":153},{"ruleId":"554","severity":1,"message":"555","line":359,"column":17,"nodeType":"556","endLine":359,"endColumn":172},{"ruleId":"554","severity":1,"message":"555","line":109,"column":17,"nodeType":"556","endLine":109,"endColumn":172},{"ruleId":"554","severity":1,"message":"555","line":169,"column":45,"nodeType":"556","endLine":169,"endColumn":102},{"ruleId":"542","severity":1,"message":"543","line":188,"column":29,"nodeType":"544","messageId":"545","endLine":188,"endColumn":31},{"ruleId":"554","severity":1,"message":"555","line":264,"column":65,"nodeType":"556","endLine":264,"endColumn":247},{"ruleId":"554","severity":1,"message":"555","line":282,"column":83,"nodeType":"556","endLine":282,"endColumn":153},{"ruleId":"542","severity":1,"message":"543","line":323,"column":73,"nodeType":"544","messageId":"545","endLine":323,"endColumn":75},{"ruleId":"554","severity":1,"message":"555","line":420,"column":17,"nodeType":"556","endLine":420,"endColumn":172},{"ruleId":"554","severity":1,"message":"555","line":163,"column":45,"nodeType":"556","endLine":163,"endColumn":102},{"ruleId":"531","severity":1,"message":"557","line":41,"column":12,"nodeType":"533","messageId":"534","endLine":41,"endColumn":18},{"ruleId":"542","severity":1,"message":"543","line":66,"column":20,"nodeType":"544","messageId":"545","endLine":66,"endColumn":22},{"ruleId":"542","severity":1,"message":"543","line":186,"column":64,"nodeType":"544","messageId":"545","endLine":186,"endColumn":66},{"ruleId":"542","severity":1,"message":"543","line":186,"column":99,"nodeType":"544","messageId":"545","endLine":186,"endColumn":101},{"ruleId":"542","severity":1,"message":"543","line":188,"column":64,"nodeType":"544","messageId":"545","endLine":188,"endColumn":66},{"ruleId":"542","severity":1,"message":"543","line":188,"column":113,"nodeType":"544","messageId":"545","endLine":188,"endColumn":115},{"ruleId":"542","severity":1,"message":"543","line":198,"column":54,"nodeType":"544","messageId":"545","endLine":198,"endColumn":56},{"ruleId":"542","severity":1,"message":"543","line":198,"column":86,"nodeType":"544","messageId":"545","endLine":198,"endColumn":88},{"ruleId":"542","severity":1,"message":"543","line":198,"column":156,"nodeType":"544","messageId":"545","endLine":198,"endColumn":158},{"ruleId":"554","severity":1,"message":"555","line":230,"column":85,"nodeType":"556","endLine":230,"endColumn":121},{"ruleId":"542","severity":1,"message":"543","line":233,"column":48,"nodeType":"544","messageId":"545","endLine":233,"endColumn":50},{"ruleId":"542","severity":1,"message":"543","line":233,"column":69,"nodeType":"544","messageId":"545","endLine":233,"endColumn":71},{"ruleId":"542","severity":1,"message":"543","line":250,"column":51,"nodeType":"544","messageId":"545","endLine":250,"endColumn":53},{"ruleId":"558","severity":1,"message":"559","line":253,"column":41,"nodeType":"556","endLine":253,"endColumn":121},{"ruleId":"560","severity":1,"message":"561","line":212,"column":13,"nodeType":"562","messageId":"563","endLine":219,"endColumn":14},{"ruleId":"542","severity":1,"message":"543","line":245,"column":27,"nodeType":"544","messageId":"545","endLine":245,"endColumn":29},{"ruleId":"542","severity":1,"message":"543","line":17,"column":38,"nodeType":"544","messageId":"545","endLine":17,"endColumn":40},{"ruleId":"542","severity":1,"message":"543","line":26,"column":39,"nodeType":"544","messageId":"545","endLine":26,"endColumn":41},{"ruleId":"542","severity":1,"message":"543","line":53,"column":50,"nodeType":"544","messageId":"545","endLine":53,"endColumn":52},{"ruleId":"564","severity":1,"message":"565","line":53,"column":66,"nodeType":"566","messageId":"567","endLine":53,"endColumn":68},{"ruleId":"564","severity":1,"message":"565","line":53,"column":81,"nodeType":"566","messageId":"567","endLine":53,"endColumn":83},{"ruleId":"542","severity":1,"message":"543","line":53,"column":97,"nodeType":"544","messageId":"545","endLine":53,"endColumn":99},{"ruleId":"542","severity":1,"message":"543","line":57,"column":69,"nodeType":"544","messageId":"545","endLine":57,"endColumn":71},{"ruleId":"542","severity":1,"message":"543","line":73,"column":50,"nodeType":"544","messageId":"545","endLine":73,"endColumn":52},{"ruleId":"554","severity":1,"message":"555","line":87,"column":41,"nodeType":"556","endLine":87,"endColumn":80},{"ruleId":"554","severity":1,"message":"555","line":98,"column":37,"nodeType":"556","endLine":98,"endColumn":103},{"ruleId":"542","severity":1,"message":"543","line":112,"column":55,"nodeType":"544","messageId":"545","endLine":112,"endColumn":57},{"ruleId":"542","severity":1,"message":"543","line":137,"column":66,"nodeType":"544","messageId":"545","endLine":137,"endColumn":68},{"ruleId":"542","severity":1,"message":"543","line":144,"column":70,"nodeType":"544","messageId":"545","endLine":144,"endColumn":72},{"ruleId":"542","severity":1,"message":"543","line":161,"column":62,"nodeType":"544","messageId":"545","endLine":161,"endColumn":64},{"ruleId":"542","severity":1,"message":"543","line":25,"column":39,"nodeType":"544","messageId":"545","endLine":25,"endColumn":41},{"ruleId":"542","severity":1,"message":"543","line":48,"column":50,"nodeType":"544","messageId":"545","endLine":48,"endColumn":52},{"ruleId":"564","severity":1,"message":"565","line":48,"column":66,"nodeType":"566","messageId":"567","endLine":48,"endColumn":68},{"ruleId":"564","severity":1,"message":"565","line":48,"column":81,"nodeType":"566","messageId":"567","endLine":48,"endColumn":83},{"ruleId":"542","severity":1,"message":"543","line":48,"column":97,"nodeType":"544","messageId":"545","endLine":48,"endColumn":99},{"ruleId":"542","severity":1,"message":"543","line":52,"column":69,"nodeType":"544","messageId":"545","endLine":52,"endColumn":71},{"ruleId":"554","severity":1,"message":"555","line":66,"column":37,"nodeType":"556","endLine":66,"endColumn":103},{"ruleId":"542","severity":1,"message":"543","line":93,"column":55,"nodeType":"544","messageId":"545","endLine":93,"endColumn":57},{"ruleId":"542","severity":1,"message":"543","line":118,"column":66,"nodeType":"544","messageId":"545","endLine":118,"endColumn":68},{"ruleId":"542","severity":1,"message":"543","line":125,"column":70,"nodeType":"544","messageId":"545","endLine":125,"endColumn":72},{"ruleId":"542","severity":1,"message":"543","line":142,"column":62,"nodeType":"544","messageId":"545","endLine":142,"endColumn":64},{"ruleId":"531","severity":1,"message":"568","line":2,"column":8,"nodeType":"533","messageId":"534","endLine":2,"endColumn":15},{"ruleId":"531","severity":1,"message":"569","line":4,"column":8,"nodeType":"533","messageId":"534","endLine":4,"endColumn":28},{"ruleId":"527","severity":1,"message":"570","line":36,"column":8,"nodeType":"529","endLine":36,"endColumn":15,"suggestions":"571"},{"ruleId":"572","severity":1,"message":"573","line":74,"column":41,"nodeType":"556","endLine":74,"endColumn":164},{"ruleId":"542","severity":1,"message":"543","line":93,"column":115,"nodeType":"544","messageId":"545","endLine":93,"endColumn":117},{"ruleId":"572","severity":1,"message":"573","line":58,"column":29,"nodeType":"556","endLine":58,"endColumn":92},{"ruleId":"572","severity":1,"message":"573","line":61,"column":29,"nodeType":"556","endLine":61,"endColumn":108},{"ruleId":"572","severity":1,"message":"573","line":64,"column":29,"nodeType":"556","endLine":64,"endColumn":76},{"ruleId":"542","severity":1,"message":"553","line":72,"column":47,"nodeType":"544","messageId":"545","endLine":72,"endColumn":49},{"ruleId":"542","severity":1,"message":"543","line":77,"column":57,"nodeType":"544","messageId":"545","endLine":77,"endColumn":59},{"ruleId":"542","severity":1,"message":"543","line":85,"column":46,"nodeType":"544","messageId":"545","endLine":85,"endColumn":48},{"ruleId":"542","severity":1,"message":"543","line":93,"column":47,"nodeType":"544","messageId":"545","endLine":93,"endColumn":49},{"ruleId":"542","severity":1,"message":"553","line":104,"column":23,"nodeType":"544","messageId":"545","endLine":104,"endColumn":25},{"ruleId":"542","severity":1,"message":"543","line":146,"column":57,"nodeType":"544","messageId":"545","endLine":146,"endColumn":59},{"ruleId":"542","severity":1,"message":"543","line":151,"column":43,"nodeType":"544","messageId":"545","endLine":151,"endColumn":45},{"ruleId":"531","severity":1,"message":"574","line":1,"column":17,"nodeType":"533","messageId":"534","endLine":1,"endColumn":25},{"ruleId":"531","severity":1,"message":"575","line":3,"column":8,"nodeType":"533","messageId":"534","endLine":3,"endColumn":21},{"ruleId":"542","severity":1,"message":"543","line":18,"column":33,"nodeType":"544","messageId":"545","endLine":18,"endColumn":35},{"ruleId":"542","severity":1,"message":"543","line":29,"column":45,"nodeType":"544","messageId":"545","endLine":29,"endColumn":47},{"ruleId":"564","severity":1,"message":"565","line":29,"column":61,"nodeType":"566","messageId":"567","endLine":29,"endColumn":63},{"ruleId":"564","severity":1,"message":"565","line":29,"column":76,"nodeType":"566","messageId":"567","endLine":29,"endColumn":78},{"ruleId":"542","severity":1,"message":"543","line":29,"column":91,"nodeType":"544","messageId":"545","endLine":29,"endColumn":93},{"ruleId":"542","severity":1,"message":"543","line":33,"column":64,"nodeType":"544","messageId":"545","endLine":33,"endColumn":66},{"ruleId":"542","severity":1,"message":"543","line":50,"column":41,"nodeType":"544","messageId":"545","endLine":50,"endColumn":43},{"ruleId":"542","severity":1,"message":"543","line":52,"column":43,"nodeType":"544","messageId":"545","endLine":52,"endColumn":45},{"ruleId":"542","severity":1,"message":"543","line":59,"column":47,"nodeType":"544","messageId":"545","endLine":59,"endColumn":49},{"ruleId":"542","severity":1,"message":"543","line":66,"column":51,"nodeType":"544","messageId":"545","endLine":66,"endColumn":53},{"ruleId":"542","severity":1,"message":"543","line":77,"column":41,"nodeType":"544","messageId":"545","endLine":77,"endColumn":43},{"ruleId":"542","severity":1,"message":"553","line":58,"column":74,"nodeType":"544","messageId":"545","endLine":58,"endColumn":76},{"ruleId":"527","severity":1,"message":"576","line":68,"column":8,"nodeType":"529","endLine":68,"endColumn":31,"suggestions":"577"},{"ruleId":"572","severity":1,"message":"573","line":96,"column":79,"nodeType":"556","endLine":96,"endColumn":190},{"ruleId":"542","severity":1,"message":"543","line":96,"column":148,"nodeType":"544","messageId":"545","endLine":96,"endColumn":150},{"ruleId":"542","severity":1,"message":"543","line":111,"column":83,"nodeType":"544","messageId":"545","endLine":111,"endColumn":85},{"ruleId":"542","severity":1,"message":"543","line":15,"column":94,"nodeType":"544","messageId":"545","endLine":15,"endColumn":96},{"ruleId":"531","severity":1,"message":"578","line":1,"column":8,"nodeType":"533","messageId":"534","endLine":1,"endColumn":13},{"ruleId":"531","severity":1,"message":"579","line":4,"column":10,"nodeType":"533","messageId":"534","endLine":4,"endColumn":18},{"ruleId":"548","severity":1,"message":"549","line":52,"column":22,"nodeType":"550","messageId":"551","endLine":52,"endColumn":23,"suggestions":"580"},{"ruleId":"542","severity":1,"message":"553","line":73,"column":44,"nodeType":"544","messageId":"545","endLine":73,"endColumn":46},{"ruleId":"542","severity":1,"message":"543","line":173,"column":35,"nodeType":"544","messageId":"545","endLine":173,"endColumn":37},{"ruleId":"554","severity":1,"message":"555","line":225,"column":101,"nodeType":"556","endLine":225,"endColumn":184},{"ruleId":"554","severity":1,"message":"555","line":235,"column":84,"nodeType":"556","endLine":235,"endColumn":193},{"ruleId":"554","severity":1,"message":"555","line":240,"column":101,"nodeType":"556","endLine":240,"endColumn":180},{"ruleId":"554","severity":1,"message":"555","line":241,"column":93,"nodeType":"556","endLine":241,"endColumn":204},{"ruleId":"554","severity":1,"message":"555","line":242,"column":102,"nodeType":"556","endLine":242,"endColumn":211},{"ruleId":"554","severity":1,"message":"555","line":281,"column":99,"nodeType":"556","endLine":281,"endColumn":153},{"ruleId":"531","severity":1,"message":"581","line":7,"column":7,"nodeType":"533","messageId":"534","endLine":7,"endColumn":18},{"ruleId":"542","severity":1,"message":"543","line":74,"column":36,"nodeType":"544","messageId":"545","endLine":74,"endColumn":38},{"ruleId":"527","severity":1,"message":"582","line":90,"column":8,"nodeType":"529","endLine":90,"endColumn":10,"suggestions":"583"},{"ruleId":"531","severity":1,"message":"584","line":27,"column":7,"nodeType":"533","messageId":"534","endLine":27,"endColumn":12},{"ruleId":"531","severity":1,"message":"585","line":35,"column":11,"nodeType":"533","messageId":"534","endLine":35,"endColumn":16},{"ruleId":"542","severity":1,"message":"543","line":118,"column":29,"nodeType":"544","messageId":"545","endLine":118,"endColumn":31},{"ruleId":"527","severity":1,"message":"546","line":128,"column":8,"nodeType":"529","endLine":128,"endColumn":40,"suggestions":"586"},{"ruleId":"527","severity":1,"message":"587","line":132,"column":8,"nodeType":"529","endLine":132,"endColumn":10,"suggestions":"588"},{"ruleId":"589","severity":1,"message":"590","line":152,"column":74,"nodeType":"591","messageId":"592","endLine":152,"endColumn":76},{"ruleId":"554","severity":1,"message":"555","line":157,"column":53,"nodeType":"556","endLine":157,"endColumn":131},{"ruleId":"542","severity":1,"message":"543","line":285,"column":66,"nodeType":"544","messageId":"545","endLine":285,"endColumn":68},{"ruleId":"531","severity":1,"message":"593","line":30,"column":28,"nodeType":"533","messageId":"534","endLine":30,"endColumn":45},{"ruleId":"531","severity":1,"message":"594","line":31,"column":12,"nodeType":"533","messageId":"534","endLine":31,"endColumn":23},{"ruleId":"531","severity":1,"message":"595","line":31,"column":25,"nodeType":"533","messageId":"534","endLine":31,"endColumn":39},{"ruleId":"589","severity":1,"message":"590","line":64,"column":66,"nodeType":"591","messageId":"592","endLine":64,"endColumn":68},{"ruleId":"554","severity":1,"message":"555","line":69,"column":45,"nodeType":"556","endLine":69,"endColumn":123},{"ruleId":"542","severity":1,"message":"553","line":71,"column":44,"nodeType":"544","messageId":"545","endLine":71,"endColumn":46},{"ruleId":"542","severity":1,"message":"543","line":133,"column":35,"nodeType":"544","messageId":"545","endLine":133,"endColumn":37},{"ruleId":"554","severity":1,"message":"555","line":195,"column":154,"nodeType":"556","endLine":195,"endColumn":262},{"ruleId":"554","severity":1,"message":"555","line":196,"column":71,"nodeType":"556","endLine":196,"endColumn":182},{"ruleId":"542","severity":1,"message":"553","line":81,"column":20,"nodeType":"544","messageId":"545","endLine":81,"endColumn":22},{"ruleId":"542","severity":1,"message":"553","line":82,"column":48,"nodeType":"544","messageId":"545","endLine":82,"endColumn":50},{"ruleId":"542","severity":1,"message":"543","line":150,"column":35,"nodeType":"544","messageId":"545","endLine":150,"endColumn":37},{"ruleId":"554","severity":1,"message":"555","line":214,"column":65,"nodeType":"556","endLine":214,"endColumn":179},{"ruleId":"554","severity":1,"message":"555","line":232,"column":83,"nodeType":"556","endLine":232,"endColumn":153},{"ruleId":"554","severity":1,"message":"555","line":351,"column":17,"nodeType":"556","endLine":351,"endColumn":172},{"ruleId":"542","severity":1,"message":"543","line":25,"column":39,"nodeType":"544","messageId":"545","endLine":25,"endColumn":41},{"ruleId":"542","severity":1,"message":"543","line":48,"column":50,"nodeType":"544","messageId":"545","endLine":48,"endColumn":52},{"ruleId":"564","severity":1,"message":"565","line":48,"column":66,"nodeType":"566","messageId":"567","endLine":48,"endColumn":68},{"ruleId":"564","severity":1,"message":"565","line":48,"column":81,"nodeType":"566","messageId":"567","endLine":48,"endColumn":83},{"ruleId":"542","severity":1,"message":"543","line":48,"column":97,"nodeType":"544","messageId":"545","endLine":48,"endColumn":99},{"ruleId":"542","severity":1,"message":"543","line":52,"column":69,"nodeType":"544","messageId":"545","endLine":52,"endColumn":71},{"ruleId":"554","severity":1,"message":"555","line":66,"column":37,"nodeType":"556","endLine":66,"endColumn":103},{"ruleId":"542","severity":1,"message":"543","line":91,"column":55,"nodeType":"544","messageId":"545","endLine":91,"endColumn":57},{"ruleId":"542","severity":1,"message":"543","line":116,"column":66,"nodeType":"544","messageId":"545","endLine":116,"endColumn":68},{"ruleId":"542","severity":1,"message":"543","line":123,"column":70,"nodeType":"544","messageId":"545","endLine":123,"endColumn":72},{"ruleId":"542","severity":1,"message":"543","line":140,"column":62,"nodeType":"544","messageId":"545","endLine":140,"endColumn":64},{"ruleId":"554","severity":1,"message":"555","line":138,"column":45,"nodeType":"556","endLine":138,"endColumn":102},{"ruleId":"542","severity":1,"message":"553","line":71,"column":44,"nodeType":"544","messageId":"545","endLine":71,"endColumn":46},{"ruleId":"542","severity":1,"message":"543","line":133,"column":35,"nodeType":"544","messageId":"545","endLine":133,"endColumn":37},{"ruleId":"589","severity":1,"message":"590","line":41,"column":62,"nodeType":"591","messageId":"592","endLine":41,"endColumn":64},{"ruleId":"554","severity":1,"message":"555","line":46,"column":41,"nodeType":"556","endLine":46,"endColumn":111},{"ruleId":"589","severity":1,"message":"590","line":60,"column":54,"nodeType":"591","messageId":"592","endLine":60,"endColumn":56},{"ruleId":"554","severity":1,"message":"555","line":65,"column":33,"nodeType":"556","endLine":65,"endColumn":116},{"ruleId":"542","severity":1,"message":"543","line":14,"column":178,"nodeType":"544","messageId":"545","endLine":14,"endColumn":180},{"ruleId":"560","severity":1,"message":"561","line":31,"column":9,"nodeType":"562","messageId":"563","endLine":39,"endColumn":10},{"ruleId":"560","severity":1,"message":"561","line":58,"column":5,"nodeType":"562","messageId":"563","endLine":68,"endColumn":6},{"ruleId":"542","severity":1,"message":"553","line":71,"column":44,"nodeType":"544","messageId":"545","endLine":71,"endColumn":46},{"ruleId":"542","severity":1,"message":"543","line":132,"column":35,"nodeType":"544","messageId":"545","endLine":132,"endColumn":37},{"ruleId":"554","severity":1,"message":"555","line":204,"column":117,"nodeType":"556","endLine":204,"endColumn":228},{"ruleId":"554","severity":1,"message":"555","line":205,"column":105,"nodeType":"556","endLine":205,"endColumn":184},{"ruleId":"554","severity":1,"message":"555","line":206,"column":116,"nodeType":"556","endLine":206,"endColumn":208},{"ruleId":"527","severity":1,"message":"596","line":33,"column":8,"nodeType":"529","endLine":33,"endColumn":33,"suggestions":"597"},{"ruleId":"542","severity":1,"message":"543","line":13,"column":24,"nodeType":"544","messageId":"545","endLine":13,"endColumn":26},{"ruleId":"527","severity":1,"message":"598","line":32,"column":8,"nodeType":"529","endLine":32,"endColumn":10,"suggestions":"599"},"no-native-reassign",["600"],"no-negated-in-lhs",["601"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'updateTheme'. Either include it or remove the dependency array.","ArrayExpression",["602"],"no-unused-vars","'takeRest' is defined but never used.","Identifier","unusedVar","'isOpenRestModal' is assigned a value but never used.","'succesfulRequestResign' is assigned a value but never used.","'takingRest' is assigned a value but never used.","'succesfulRestTake' is assigned a value but never used.","'setSuccesfulRestTake' is assigned a value but never used.","'closeRestModal' is assigned a value but never used.","'takeARest' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'requestData'. Either include it or remove the dependency array.",["603"],"no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["604","605"],"Expected '!==' and instead saw '!='.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","'author' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator","'ImgFoco' is defined but never used.","'ImgMaquinaDeEscribir' is defined but never used.","React Hook useEffect has a missing dependency: 'autoScroll'. Either include it or remove the dependency array.",["606"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'useState' is defined but never used.","'FeedbackModal' is defined but never used.","React Hook useEffect has missing dependencies: 'switchTab' and 'tabs'. Either include them or remove the dependency array. If 'setMinVisibleTabs' needs the current value of 'tabs', you can also switch to useReducer instead of useState and read 'tabs' in the reducer.",["607"],"'React' is defined but never used.","'Redirect' is defined but never used.",["608","609"],"'profileData' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'match.params.id'. Either include it or remove the dependency array.",["610"],"'limit' is assigned a value but never used.","'style' is assigned a value but never used.",["611"],"React Hook useEffect has a missing dependency: 'updateStatistics'. Either include it or remove the dependency array.",["612"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'setInitialLoading' is assigned a value but never used.","'requestList' is assigned a value but never used.","'setRequestList' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'checkScroll'. Either include it or remove the dependency array.",["613"],"React Hook useEffect has a missing dependency: 'theme'. Either include it or remove the dependency array. You can also do a functional update 'setTheme(t => ...)' if you only need 'theme' in the 'setTheme' call.",["614"],"no-global-assign","no-unsafe-negation",{"desc":"615","fix":"616"},{"desc":"617","fix":"618"},{"messageId":"619","fix":"620","desc":"621"},{"messageId":"622","fix":"623","desc":"624"},{"desc":"625","fix":"626"},{"desc":"627","fix":"628"},{"messageId":"619","fix":"629","desc":"621"},{"messageId":"622","fix":"630","desc":"624"},{"desc":"631","fix":"632"},{"desc":"633","fix":"634"},{"desc":"635","fix":"636"},{"desc":"637","fix":"638"},{"desc":"639","fix":"640"},"Update the dependencies array to be: [updateTheme]",{"range":"641","text":"642"},"Update the dependencies array to be: [activeTabIndex, requestData, requestType.id]",{"range":"643","text":"644"},"removeEscape",{"range":"645","text":"646"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"647","text":"648"},"Replace the `\\` with `\\\\` to include the actual backslash character.","Update the dependencies array to be: [autoScroll, index]",{"range":"649","text":"650"},"Update the dependencies array to be: [minVisibleTabs, switchTab, tabs, width]",{"range":"651","text":"652"},{"range":"653","text":"646"},{"range":"654","text":"648"},"Update the dependencies array to be: [match.params.id]",{"range":"655","text":"656"},"Update the dependencies array to be: [activeTabIndex, requestData, visibleColumns]",{"range":"657","text":"658"},"Update the dependencies array to be: [updateStatistics]",{"range":"659","text":"660"},"Update the dependencies array to be: [topOffset, bottomOffset, checkScroll]",{"range":"661","text":"662"},"Update the dependencies array to be: [theme]",{"range":"663","text":"664"},[999,1001],"[updateTheme]",[9816,9848],"[activeTabIndex, requestData, requestType.id]",[1446,1447],"",[1446,1446],"\\",[1144,1151],"[autoScroll, index]",[2314,2337],"[minVisibleTabs, switchTab, tabs, width]",[1472,1473],[1472,1472],[3256,3258],"[match.params.id]",[5089,5121],"[activeTabIndex, requestData, visibleColumns]",[5186,5188],"[updateStatistics]",[1276,1301],"[topOffset, bottomOffset, checkScroll]",[933,935],"[theme]"]