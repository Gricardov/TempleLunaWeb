[{"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\index.js":"1","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\TLApp.js":"2","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\context\\DrawerContext.js":"3","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\context\\AuthContext.js":"4","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\admin.js":"5","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\login.js":"6","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\solicitud-critica.js":"7","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\inicio.js":"8","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\prep_critica.js":"9","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\solicitud-diseno.js":"10","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\prep_diseno.js":"11","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\prev_resultado.js":"12","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\customRouter\\publicRoute.js":"13","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\customRouter\\privateRoute.js":"14","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\drawer\\index.js":"15","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\firebase.js":"16","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\api.js":"17","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\helpers\\userStorage.js":"18","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\modal\\designDetail.js":"19","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\modal\\critiqueDetail.js":"20","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\footer\\footer.js":"21","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\data\\data.js":"22","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\hooks\\useStepObserver.js":"23","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\stories-carrousel\\carrousel.js":"24","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\home-panorama\\panorama.js":"25","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\forms\\step-manager\\step-manager.js":"26","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\navbar\\index.js":"27","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\request-card\\index.js":"28","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\dropdown-image\\index.js":"29","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\drawer\\drawer.js":"30","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\tabs\\index.js":"31","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\tag\\index.js":"32","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\forms\\forms-steps\\index.js":"33","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\loading-screen\\index.js":"34","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\helpers\\functions.js":"35","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\modal\\confirmationModal.js":"36","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\navbar\\navbar.js":"37","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\request-card\\card.js":"38","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\dropdown-image\\dropdown.js":"39","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\tabs\\tabs.js":"40","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\tag\\tag.js":"41","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\forms\\forms-steps\\form-steps.js":"42","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\avatar\\index.js":"43","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\loading-screen\\loading-screen.js":"44","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\story-card\\index.js":"45","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\hooks\\useOutsideListener.js":"46","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\avatar\\avatar.js":"47","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\story-card\\story_card.js":"48","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\customRouter\\anyRoute.js":"49","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\helmet\\index.js":"50","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\helmet\\helmet-metadata.js":"51","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\modal\\punctuation.js":"52","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\speech-bubble\\speech-bubble.js":"53","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\ins_evento.js":"54","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\ins_evento_LECTURA-VIVO-LACZU-1.js":"55","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\ins_evento_OBRA-PROFESIONAL-CCADENA-1.js":"56","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\helpers\\validators.js":"57"},{"size":358,"mtime":1612154583817,"results":"58","hashOfConfig":"59"},{"size":1789,"mtime":1618786977972,"results":"60","hashOfConfig":"59"},{"size":924,"mtime":1612329952620,"results":"61","hashOfConfig":"59"},{"size":854,"mtime":1618939989735,"results":"62","hashOfConfig":"59"},{"size":9319,"mtime":1618786977982,"results":"63","hashOfConfig":"59"},{"size":3745,"mtime":1618940077576,"results":"64","hashOfConfig":"59"},{"size":18115,"mtime":1618805983441,"results":"65","hashOfConfig":"59"},{"size":4919,"mtime":1618806949582,"results":"66","hashOfConfig":"59"},{"size":10507,"mtime":1618864450358,"results":"67","hashOfConfig":"59"},{"size":20752,"mtime":1618806087862,"results":"68","hashOfConfig":"59"},{"size":9744,"mtime":1617680865454,"results":"69","hashOfConfig":"59"},{"size":12828,"mtime":1618986212793,"results":"70","hashOfConfig":"59"},{"size":689,"mtime":1617057602450,"results":"71","hashOfConfig":"59"},{"size":690,"mtime":1617057602448,"results":"72","hashOfConfig":"59"},{"size":35,"mtime":1611783381168,"results":"73","hashOfConfig":"59"},{"size":659,"mtime":1612134803982,"results":"74","hashOfConfig":"59"},{"size":8078,"mtime":1618940027780,"results":"75","hashOfConfig":"59"},{"size":1121,"mtime":1617404276690,"results":"76","hashOfConfig":"59"},{"size":11309,"mtime":1617688835733,"results":"77","hashOfConfig":"59"},{"size":10439,"mtime":1617688844189,"results":"78","hashOfConfig":"59"},{"size":1689,"mtime":1611974876703,"results":"79","hashOfConfig":"59"},{"size":3177,"mtime":1619205321178,"results":"80","hashOfConfig":"59"},{"size":651,"mtime":1611963889219,"results":"81","hashOfConfig":"59"},{"size":3936,"mtime":1612489526320,"results":"82","hashOfConfig":"59"},{"size":3610,"mtime":1618378235946,"results":"83","hashOfConfig":"59"},{"size":230,"mtime":1611891779839,"results":"84","hashOfConfig":"59"},{"size":35,"mtime":1610169602941,"results":"85","hashOfConfig":"59"},{"size":33,"mtime":1612493180152,"results":"86","hashOfConfig":"59"},{"size":37,"mtime":1611812649805,"results":"87","hashOfConfig":"59"},{"size":2145,"mtime":1615182318120,"results":"88","hashOfConfig":"59"},{"size":32,"mtime":1615182318143,"results":"89","hashOfConfig":"59"},{"size":32,"mtime":1610813286511,"results":"90","hashOfConfig":"59"},{"size":39,"mtime":1611877771633,"results":"91","hashOfConfig":"59"},{"size":43,"mtime":1612489867120,"results":"92","hashOfConfig":"59"},{"size":3432,"mtime":1618788648039,"results":"93","hashOfConfig":"59"},{"size":2558,"mtime":1615182318130,"results":"94","hashOfConfig":"59"},{"size":5249,"mtime":1617057602462,"results":"95","hashOfConfig":"59"},{"size":4317,"mtime":1617948914288,"results":"96","hashOfConfig":"59"},{"size":2835,"mtime":1617688124356,"results":"97","hashOfConfig":"59"},{"size":1942,"mtime":1617943001216,"results":"98","hashOfConfig":"59"},{"size":251,"mtime":1610819468986,"results":"99","hashOfConfig":"59"},{"size":850,"mtime":1618786988505,"results":"100","hashOfConfig":"59"},{"size":35,"mtime":1612494927695,"results":"101","hashOfConfig":"59"},{"size":834,"mtime":1615182318127,"results":"102","hashOfConfig":"59"},{"size":39,"mtime":1610293845546,"results":"103","hashOfConfig":"59"},{"size":913,"mtime":1615182318153,"results":"104","hashOfConfig":"59"},{"size":565,"mtime":1617057602447,"results":"105","hashOfConfig":"59"},{"size":746,"mtime":1610429606771,"results":"106","hashOfConfig":"59"},{"size":453,"mtime":1615086499952,"results":"107","hashOfConfig":"59"},{"size":44,"mtime":1615182318124,"results":"108","hashOfConfig":"59"},{"size":2063,"mtime":1617057602455,"results":"109","hashOfConfig":"59"},{"size":7075,"mtime":1615598488464,"results":"110","hashOfConfig":"59"},{"size":228,"mtime":1615598488470,"results":"111","hashOfConfig":"59"},{"size":557,"mtime":1618786977984,"results":"112","hashOfConfig":"59"},{"size":20045,"mtime":1618944127356,"results":"113","hashOfConfig":"59"},{"size":18697,"mtime":1619113883400,"results":"114","hashOfConfig":"59"},{"size":3463,"mtime":1618809735005,"results":"115","hashOfConfig":"59"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},"1arx63t",{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"118"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"118"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"118"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"118"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"118"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"118"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"118"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"118"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"118"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"118"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"118"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"118"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"118"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"118"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"118"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"118"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"118"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"118"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"118"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"118"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"118"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"118"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"251","messages":"252","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"118"},"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\index.js",[],["254","255"],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\TLApp.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\context\\DrawerContext.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\context\\AuthContext.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\admin.js",["256","257","258","259","260","261","262"],"import React, { useContext, useState, useEffect } from 'react';\r\nimport DropdownImage from '../componentes/dropdown-image';\r\nimport Navbar from '../componentes/navbar';\r\nimport DesignDetailModal from '../componentes/modal/designDetail';\r\nimport CritiqueDetailModal from '../componentes/modal/critiqueDetail';\r\nimport RequestCard from '../componentes/request-card';\r\nimport Tabs from '../componentes/tabs';\r\nimport Footer from '../componentes/footer/footer';\r\nimport PuffLoader from \"react-spinners/PuffLoader\";\r\nimport { AuthContext } from '../context/AuthContext';\r\nimport { css } from \"@emotion/core\";\r\nimport { requestStatuses, requestTypes } from '../data/data';\r\nimport { getStatistics, getRequests, getRequest, takeRequest } from '../api';\r\nimport { setAdminRequestType, getAdminRequestType, setAdminMainTabIndex, getAdminMainTabIndex } from '../helpers/userStorage';\r\n\r\nconst override = css`\r\n  display: block;\r\n  margin: 5rem auto;\r\n`;\r\n\r\nconst requestTypeList = requestTypes;\r\nconst limit = 3;\r\n\r\nconst Admin = () => {\r\n\r\n    const [activeTabIndex, setActiveTabIndex] = useState(0);\r\n    const [requestType, setRequestType] = useState(requestTypeList[0]);\r\n    const [requestList, setRequestList] = useState([]);\r\n    const [isLast, setIsLast] = useState(false);\r\n    const [initialLoading, setInitialLoading] = useState(false);\r\n    const [loadingMore, setLoadingMore] = useState(false);\r\n    const [isOpenDesignModal, setOpenDesignModal] = useState(false);\r\n    const [isOpenCritiqueModal, setOpenCritiqueModal] = useState(false);\r\n    const [registry, setRegistry] = useState(null);\r\n    const [tabList, setTabList] = useState(requestStatuses);\r\n\r\n    const [takingRequest, setTakingRequest] = useState(false);\r\n    const [succesfulRequestTake, setSuccesfulRequestTake] = useState(false);\r\n\r\n    const { logged } = useContext(AuthContext);\r\n\r\n    const openModal = (request) => {\r\n        setRegistry(request);\r\n        setTakingRequest(false);\r\n        setSuccesfulRequestTake(false);\r\n\r\n        switch (request.type) {\r\n            case 'CRITICA':\r\n                setOpenCritiqueModal(true);\r\n                break;\r\n            case 'DISENO':\r\n                setOpenDesignModal(true);\r\n                break;\r\n        }\r\n    }\r\n\r\n    const updRequestType = (val) => {\r\n        setAdminRequestType(val);\r\n        setRequestType(val);\r\n    }\r\n\r\n    const updActiveTabIndex = (val) => {\r\n        setAdminMainTabIndex(val);\r\n        setActiveTabIndex(val);\r\n    }\r\n\r\n    const getLastElement = (field) => {\r\n        return requestList[requestList.length - 1] ? requestList[requestList.length - 1][field] : undefined;\r\n    }\r\n\r\n    const getUidBasedOnRequestStatus = (reqStatus) => { // Las solicitudes marcadas como disponibles no necesitan filtro de id usuario\r\n        if (reqStatus == 'DISPONIBLE') {\r\n            return undefined;\r\n        } else {\r\n            return logged.uid;\r\n        }\r\n    }\r\n\r\n    const updateStatistics = (timeout = 0) => {\r\n        setTimeout(() => {\r\n            getStatistics([requestType.type, logged.uid + '-' + requestType.type])\r\n                .then(data => {\r\n                    setTabList([\r\n                        !data[0].error ? { ...tabList[0], statistics: data[0].statistics.available } : tabList[0],\r\n                        !data[1].error ? { ...tabList[1], statistics: data[1].statistics.taken } : tabList[1],\r\n                        !data[1].error ? { ...tabList[2], statistics: data[1].statistics.done } : tabList[2],\r\n                    ])\r\n                })\r\n        }, timeout);\r\n    }\r\n\r\n    const requestMoreData = () => {\r\n        if (!initialLoading && !loadingMore) {\r\n            setLoadingMore(true);\r\n            const requestStatus = tabList[activeTabIndex].id;\r\n            getRequests(getUidBasedOnRequestStatus(requestStatus), requestType.type, requestStatus, getLastElement('createdAt'), limit, requestStatus == 'TOMADO' || requestStatus == 'HECHO' ? 'desc' : 'asc')\r\n                .then(data => {\r\n                    setLoadingMore(false);\r\n                    setIsLast(data.isLast);\r\n                    setRequestList((state) => ([...state, ...data.list]));\r\n                })\r\n                .catch(error => {\r\n                    setLoadingMore(false);\r\n                    alert('Ha ocurrido un error. Vuelve a intentarlo más tarde');\r\n                });\r\n        }\r\n    }\r\n\r\n    const requestData = () => {\r\n        //if (!initialLoading && !loadingMore) {\r\n        setInitialLoading(true);\r\n        const requestStatus = tabList[activeTabIndex].id;\r\n        getRequests(getUidBasedOnRequestStatus(requestStatus), requestType.type, requestStatus, undefined, limit, requestStatus == 'TOMADO' || requestStatus == 'HECHO' ? 'desc' : 'asc')\r\n            .then(data => {\r\n                updateStatistics();\r\n                setInitialLoading(false);\r\n                setIsLast(data.isLast);\r\n                setRequestList(data.list);\r\n            })\r\n            .catch(error => {\r\n                setInitialLoading(false);\r\n                alert('Ha ocurrido un error. Vuelve a intentarlo más tarde');\r\n            });\r\n        //}\r\n    }\r\n\r\n    const confirmRequest = (requestId) => {\r\n        if (logged && logged.uid) {\r\n            setTakingRequest(true);\r\n            takeRequest(requestId, requestType.type)\r\n                .then((res) => {\r\n                    if (!res.error) {\r\n                        getRequest(requestId).then(({ data, error }) => {\r\n                            setTakingRequest(false);\r\n                            if (!error) {\r\n                                updateStatistics(5000); // Actualizo las estadísticas\r\n                                setRegistry(data); // Establezco el nuevo registro actualizado\r\n                                setRequestList(requestList.filter(req => req.id !== data.id));// Elimino el registro de la lista actual\r\n                                setSuccesfulRequestTake(true);\r\n                            } else {\r\n                                setSuccesfulRequestTake(false);\r\n                                alert('Hubo un error al actualizar la solicitud. Recargue e intente otra vez');\r\n                            }\r\n                        })\r\n                    } else {\r\n                        alert('Hubo un error al tomar esta solicitud. Intenta otra vez');\r\n                        setTakingRequest(false);\r\n                        setSuccesfulRequestTake(true);\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        requestData();\r\n    }, [activeTabIndex, requestType.type]);\r\n\r\n    useEffect(() => {\r\n        setRequestType(getAdminRequestType(requestTypeList[0]));\r\n        setActiveTabIndex(getAdminMainTabIndex());\r\n        window.scrollTo(0, 0);\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <Navbar />\r\n            <DesignDetailModal\r\n                data={registry}\r\n                isOpen={isOpenDesignModal}\r\n                close={() => setOpenDesignModal(false)}\r\n                takingRequest={takingRequest}\r\n                succesfulRequestTake={succesfulRequestTake}\r\n                takeRequest={confirmRequest} />\r\n            <CritiqueDetailModal\r\n                data={registry}\r\n                isOpen={isOpenCritiqueModal}\r\n                close={() => setOpenCritiqueModal(false)}\r\n                takingRequest={takingRequest}\r\n                succesfulRequestTake={succesfulRequestTake}\r\n                takeRequest={confirmRequest} />\r\n\r\n            <main className='main-body below-navbar colored-background'>\r\n                <section className='container-xl section'>\r\n                    <div className='title-admin-container'>\r\n                        <h2 className='m-0'>¿Qué eliges para hoy?</h2>\r\n                        <div className='dropdown-container'>\r\n                            <DropdownImage\r\n                                stretch\r\n                                selectedItem={requestType}\r\n                                list={requestTypeList}\r\n                                select={updRequestType} />\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n                <section className='container-xl section'>\r\n                    <Tabs\r\n                        initialLoading={initialLoading}\r\n                        loadingMore={loadingMore}\r\n                        requestList={requestList}\r\n                        requestMoreData={requestMoreData}\r\n                        hasMore={!isLast}\r\n                        loader={<PuffLoader color={'#8B81EC'} loading={true} css={override} size={100} />}\r\n                        activeIndex={activeTabIndex}\r\n                        select={updActiveTabIndex}\r\n                        tabs={tabList.map(e => e.name + ` (${e.statistics ? e.statistics : 0})`)}>\r\n                        <div>\r\n                            {\r\n                                requestList.map(request => (\r\n                                    <RequestCard key={request.id} data={request} select={openModal} />\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    </Tabs>\r\n                </section>\r\n            </main>\r\n            <Footer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Admin;","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\login.js",["263"],"import React, { useState, useEffect } from 'react'\r\nimport Navbar from '../componentes/navbar';\r\nimport Footer from '../componentes/footer/footer';\r\nimport ImgColumpio from '../img/swinging.svg';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { login } from '../api';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSignInAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { setProfileStorage } from '../helpers/userStorage';\r\n\r\nconst Login = () => {\r\n\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    let history = useHistory();\r\n\r\n    const updEmail = (e) => {\r\n        setEmail(e.target.value);\r\n    }\r\n\r\n    const updPassword = (e) => {\r\n        setPassword(e.target.value);\r\n    }\r\n\r\n    const loginUser = (e) => {\r\n        e.preventDefault();\r\n        if (!checkErrors()) {\r\n            login(email, password)\r\n                .then(({ user, profile, error }) => {\r\n                    if (user) {\r\n                        setProfileStorage(profile);\r\n                        history.push('/admin');\r\n                    } else {\r\n                        alert(error);\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n    const checkErrors = () => {\r\n        if (!(/^(?!\\s*$).{1,50}/.test(email))) {\r\n            alert('Tu correo debe tener de 1 a 50 caracteres');\r\n            return true;\r\n        }\r\n        else if (!(/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/).test(email)) {\r\n            alert('Introduce un correo válido');\r\n            return true;\r\n        }\r\n\r\n        if (!(/^(?!\\s*$).{1,50}/.test(password))) {\r\n            alert('Tu contraseña debe tener de 1 a 50 caracteres');\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <Navbar />\r\n            <main className='main-body below-navbar colored-background'>\r\n                <section className='container-xl mt-5'>\r\n                    <div className='login-container position-relative'>\r\n                        <img src={ImgColumpio} alt='img-fondo' className='img-fondo-login d-none d-md-block' />\r\n                        <div className='floating-form'>\r\n                            <h2 className='m-0'>Ingresa a Temple Luna</h2>\r\n                            <p className='mb-3'>Si quieres pertenecer a nosotros, escríbenos por el grupo</p>\r\n                            <div className='form-group'>\r\n                                <label htmlFor=\"txtUsuario\">Correo</label>\r\n                                <input minLength=\"1\" maxLength=\"50\" type=\"email\" value={email} onChange={updEmail} id=\"txtUsuario\" placeholder=\"Ingresa tu correo\" />\r\n                            </div>\r\n                            <div className='form-group'>\r\n                                <label htmlFor=\"txtContrasena\">Contraseña</label>\r\n                                <input minLength=\"1\" maxLength=\"50\" type=\"password\" value={password} onChange={updPassword} id=\"txtContrasena\" placeholder=\"****************\" />\r\n                            </div>\r\n                            <button onClick={loginUser} className='button button-green stretch'>\r\n                                <span className='d-inline'>\r\n                                    Entrar\r\n                                    </span>\r\n                                {' '}\r\n                                <FontAwesomeIcon icon={faSignInAlt} size='xl' />\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            </main>\r\n            <Footer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\solicitud-critica.js",["264","265","266"],"import React, { useState, useEffect } from 'react'\r\nimport Footer from '../componentes/footer/footer';\r\nimport Navbar from '../componentes/navbar';\r\nimport DropdownImage from '../componentes/dropdown-image';\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport Steps from '../componentes/forms/forms-steps';\r\nimport StepManager from '../componentes/forms/step-manager/step-manager';\r\nimport Fade from 'react-reveal/Fade';\r\nimport ImgLeyendo from '../img/cri-req.svg';\r\nimport HelmetMetaData from \"../componentes/helmet\";\r\nimport { Link } from 'react-router-dom';\r\nimport { extractLink, toName, toSentence } from '../helpers/functions';\r\nimport { isNameInvalid, isAgeInvalid, isPhoneInvalid, isEmailInvalid, isLinkInvalid, isTitleInvalid, isAboutInvalid, isIntentionInvalid } from '../helpers/validators';\r\nimport { saveRequest } from '../api';\r\nimport { useStepObserver } from '../hooks/useStepObserver';\r\nimport { css } from \"@emotion/core\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faAngleLeft, faAngleRight, faCheck, faCheckCircle, faHome, faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { contactTypes, critiquePoints } from '../data/data';\r\n\r\nconst steps = ['Contacto', 'Obra', 'Contenido'];\r\nconst chkPoints = critiquePoints;\r\n\r\nconst overrideSpinnerInline = css`\r\n  display: inline-block;\r\n  vertical-align: middle;\r\n`;\r\n\r\nconst Solicitud = () => {\r\n\r\n    const [activeIndex, setActiveIndex] = useState(0);\r\n    const [loading, setLoading] = useState(false); // Determina si se está enviando el form\r\n    const [success, setSuccess] = useState(true); // Determina si se envío el form sin errores\r\n    const { canGoBackwards, isLast } = useStepObserver(activeIndex, steps.length);\r\n\r\n    const [name, setName] = useState('');\r\n    const [age, setAge] = useState('');\r\n    const [phone, setPhone] = useState('');\r\n    const [messengerType, setMessengerType] = useState(contactTypes[0]);\r\n    const [email, setEmail] = useState('');\r\n    const [link, setLink] = useState('');\r\n    const [title, setTitle] = useState('');\r\n    const [about, setAbout] = useState('');\r\n    const [intention, setIntention] = useState('');\r\n    const [points, setPoints] = useState(['INTENCION']);\r\n\r\n    const updName = (e) => {\r\n        setName(e.target.value);\r\n    }\r\n\r\n    const updAge = (e) => {\r\n        setAge(e.target.value);\r\n    }\r\n\r\n    const updPhone = (e) => {\r\n        setPhone(e.target.value);\r\n    }\r\n\r\n    const updMessengerType = (val) => {\r\n        setMessengerType(val);\r\n    }\r\n\r\n    const updEmail = (e) => {\r\n        setEmail(e.target.value);\r\n    }\r\n\r\n    const updLink = (e) => {\r\n        setLink(e.target.value);\r\n    }\r\n\r\n    const updTitle = (e) => {\r\n        setTitle(e.target.value);\r\n    }\r\n\r\n    const updAbout = (e) => {\r\n        setAbout(e.target.value);\r\n    }\r\n\r\n    const updIntention = (e) => {\r\n        setIntention(e.target.value);\r\n    }\r\n\r\n    const selectPoint = (id) => {\r\n        if (includesPoint(id)) {\r\n            if (id != 'INTENCION') {\r\n                setPoints(points.filter(p => p != id));\r\n            }\r\n        } else {\r\n            setPoints([...points, id]);\r\n        }\r\n    }\r\n\r\n    const previous = (e) => {\r\n        e.preventDefault();\r\n        navigateTo(activeIndex - 1);\r\n    }\r\n\r\n    const next = (e) => {\r\n        e.preventDefault();\r\n        navigateTo(activeIndex + 1);\r\n    }\r\n\r\n    const send = async (e) => {\r\n        e.preventDefault();\r\n        if (!checkErrors()) {\r\n            setLoading(true);\r\n            saveChanges();\r\n        }\r\n    }\r\n\r\n    const saveChanges = () => {\r\n        const data = {\r\n            name: toName(name.trim()),\r\n            age: parseInt(age),\r\n            phone: phone.trim(),\r\n            messengerType: messengerType.type,\r\n            email: email.trim(),\r\n            title: toSentence(title.trim()),\r\n            link: extractLink(link.trim()),\r\n            about: about.trim(),\r\n            intention: intention.trim(),\r\n            points,\r\n            type: 'CRITICA',\r\n            status: 'DISPONIBLE',\r\n            active: 1\r\n        };\r\n\r\n        saveRequest(data).then(() => {\r\n            window.scrollTo(0, 0);\r\n            setLoading(false);\r\n            setSuccess(true);\r\n        });\r\n    }\r\n\r\n    const checkErrors = () => {\r\n\r\n        let error = (isNameInvalid(name)\r\n            || isAgeInvalid(age)\r\n            || isPhoneInvalid(phone)\r\n            || isEmailInvalid(email)\r\n            || isLinkInvalid(link)\r\n            || isTitleInvalid(title)\r\n            || isAboutInvalid(about)\r\n            || isIntentionInvalid(intention));\r\n\r\n        if (error) {\r\n            alert(error);\r\n            return true;\r\n        };\r\n\r\n        return false;\r\n    }\r\n\r\n    const includesPoint = (pointId) => {\r\n        return points.find(p => p == pointId);\r\n    }\r\n\r\n    const navigateTo = (index) => {\r\n        setActiveIndex(index);\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n        setSuccess(false);\r\n    }, [activeIndex]);\r\n\r\n    return (\r\n        <div>\r\n            <HelmetMetaData title=\"Críticas - Temple Luna\" description=\"Estamos dispuestos a ayudarte con aquellas obra que tanto amas. ¡Es gratis!\" />\r\n            <Navbar />\r\n            <main className='main-body below-navbar colored-background'>\r\n                <section className='container-xl section position-relative z-3'>\r\n                    <h2 className='mb-0'>Pide una crítica</h2>\r\n                    <p className='txt-responsive-form'>Y serás contactado(a) por un gran intelectual</p>\r\n                </section>\r\n                <section className='container-xl mt-5 position-relative'>\r\n                    <img src={ImgLeyendo} alt='img-fondo' className='img-fondo-formulario' />\r\n                    <div className='floating-form'>\r\n                        {\r\n                            success\r\n                                ?\r\n                                <div className='form-container text-align-center'>\r\n                                    <Fade bottom>\r\n                                        <FontAwesomeIcon color={'#3DE58D'} icon={faCheckCircle} style={{ fontSize: '8rem' }} />\r\n                                        <h3 className='mt-1 mb-1'>Listo</h3>\r\n                                    </Fade>\r\n                                    <p className='txt-responsive-form m0-auto'>En unos días te contactaremos</p>\r\n                                    <div className='form-buttons-container mt-3'>\r\n                                        <Link to={'inicio'} className='button button-green m0-auto'>\r\n                                            <FontAwesomeIcon icon={faHome} size='xl' />\r\n                                            {' '}\r\n                                            <span className='d-none d-md-inline'>\r\n                                                Regresar\r\n                                            </span>\r\n                                        </Link>\r\n                                    </div>\r\n                                </div>\r\n                                :\r\n                                <>\r\n                                    <Steps\r\n                                        activeIndex={activeIndex}\r\n                                        navigateTo={navigateTo}\r\n                                        steps={steps} />\r\n                                    <div className='form-container'>\r\n                                        <form>\r\n                                            <StepManager currentIndex={activeIndex}>\r\n                                                <div className='step-1'>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtNombres\">¿Cómo te llamas?</label>\r\n                                                        <input minLength=\"1\" maxLength=\"50\" type=\"text\" value={name} onChange={updName} id=\"txtNombres\" placeholder=\"Ingresa tus nombres\" />\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtEdad\">¿Qué edad tienes?</label>\r\n                                                        <input type=\"number\" min={10} max={99} value={age} onChange={updAge} id=\"txtEdad\" placeholder=\"Ingresa tu edad\" />\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtNumero\">Bríndanos un número para consultas (con código de país)</label>\r\n                                                        <div className='cbo-text'>\r\n                                                            <DropdownImage\r\n                                                                selectedItem={messengerType}\r\n                                                                list={contactTypes}\r\n                                                                select={updMessengerType} />\r\n                                                            <input type=\"text\" value={phone} onChange={updPhone} id=\"txtNumero\" placeholder=\"Ej: +51 999 999 999\" />\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtCorreo\">Bríndanos un correo para enviarte el trabajo</label>\r\n                                                        <input minLength=\"6\" maxLength=\"100\" type=\"email\" value={email} onChange={updEmail} id=\"txtCorreo\" placeholder=\"Ingresa tu correo\" />\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className='step-2'>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtTitulo\">Título de tu obra</label>\r\n                                                        <input minLength=\"1\" maxLength=\"100\" type=\"text\" value={title} onChange={updTitle} id=\"txtTitulo\" placeholder=\"Ejemplo: La gran infidelidad\" />\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtLink\">Link de tu obra</label>\r\n                                                        <input minLength=\"1\" maxLength=\"500\" type=\"text\" value={link} onChange={updLink} id=\"txtLink\" placeholder=\"Ingresa el link\" />\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className='step-3'>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtAcerca\">En general ¿De qué trata tu obra?</label>\r\n                                                        <textarea minLength=\"1\" maxLength=\"1000\" rows=\"4\" value={about} onChange={updAbout} id=\"txtAcerca\" placeholder=\"Ejemplo: Mi obra trata sobre las ocurrencias vividas con mi primer amor y el dolor causado por su posterior traición...\"></textarea>\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtIntencion\">¿Qué intención deseas transmitir?</label>\r\n                                                        <textarea minLength=\"1\" maxLength=\"1000\" rows=\"4\" value={intention} onChange={updIntention} id=\"txtIntencion\" placeholder=\"Ejemplo: Deseo transmitir miedo e incertidumbre, por medio de una historia ambientada en una pandemia mundial...\"></textarea>\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtLink\">¿Qué puntos tocamos en la crítica?</label>\r\n                                                        {\r\n                                                            chkPoints.map(point => {\r\n                                                                const included = includesPoint(point.id);\r\n                                                                return (\r\n                                                                    <div key={point.id} onClick={() => selectPoint(point.id)} className={`chkTag ${included ? 'active' : ''}`}>\r\n                                                                        {\r\n                                                                            included\r\n                                                                                ?\r\n                                                                                <FontAwesomeIcon color={'white'} icon={faCheck} style={{ fontSize: '1.6rem' }} />\r\n                                                                                :\r\n                                                                                <FontAwesomeIcon color={'#adadad'} icon={faPlus} style={{ fontSize: '1.6rem' }} />\r\n                                                                        }\r\n                                                                        {' '}\r\n                                                                        {point.name}\r\n                                                                    </div>\r\n                                                                )\r\n                                                            })\r\n                                                        }\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"chkPortafolio\">Si tu obra es muy larga, el crítico acordará contigo hasta donde llegará. El artista podrá usar la crítica en su propio portafolio.</label>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </StepManager>\r\n                                            <div className='form-buttons-container'>\r\n                                                {\r\n                                                    canGoBackwards && !loading\r\n                                                    &&\r\n                                                    <button onClick={previous} className='button button-green'>\r\n                                                        <FontAwesomeIcon icon={faAngleLeft} size='xl' />\r\n                                                        {' '}\r\n                                                        <span className='d-none d-md-inline'>\r\n                                                            Anterior\r\n                                                    </span>\r\n                                                    </button>\r\n                                                }\r\n                                                {\r\n                                                    loading\r\n                                                        ?\r\n                                                        <span className='button button-green justify-self-right'>\r\n                                                            Enviando\r\n                                                            {' '}\r\n                                                            <ClipLoader color={'#fff'} loading={true} css={overrideSpinnerInline} size={22} />\r\n                                                        </span>\r\n                                                        :\r\n                                                        isLast\r\n                                                            ?\r\n                                                            <button onClick={send} className='button button-green justify-self-right'>\r\n                                                                <span className='d-none d-md-inline'>\r\n                                                                    Enviar\r\n                                                    </span>\r\n                                                                {' '}\r\n                                                                <FontAwesomeIcon icon={faCheck} size='xl' />\r\n                                                            </button>\r\n                                                            :\r\n                                                            <button onClick={next} className='button button-green justify-self-right'>\r\n                                                                <span className='d-none d-md-inline'>\r\n                                                                    Siguiente\r\n                                                    </span>\r\n                                                                {' '}\r\n                                                                <FontAwesomeIcon icon={faAngleRight} size='xl' />\r\n                                                            </button>\r\n                                                }\r\n                                            </div>\r\n                                        </form>\r\n                                    </div>\r\n                                </>\r\n                        }\r\n                    </div>\r\n\r\n                </section>\r\n            </main>\r\n            <Footer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Solicitud;","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\inicio.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\prep_critica.js",["267"],"import React, { useState, useEffect } from 'react'\r\nimport Footer from '../componentes/footer/footer';\r\nimport Navbar from '../componentes/navbar';\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport Fade from 'react-reveal/Fade';\r\nimport { css } from \"@emotion/core\";\r\nimport { setRequestDone } from '../api';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowLeft, faPaperPlane, faCheckCircle, faHome, faEye } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst overrideSpinnerInline = css`\r\n  display: inline-block;\r\n  vertical-align: middle;\r\n`;\r\n\r\nconst Preparation = ({ location }) => {\r\n\r\n    const { id, title, about, link, type, points } = location.state.data;\r\n\r\n    const [success, setSuccess] = useState(false);\r\n    const [urlResult, setUrlResult] = useState('');\r\n    const [loading, setLoading] = useState(false); // Determina si se está enviando el form\r\n    const [intention, setIntention] = useState('');\r\n    const [hook, setHook] = useState('');\r\n    const [ortography, setOrtography] = useState('');\r\n    const [improvement, setImprovement] = useState('');\r\n\r\n    const history = useHistory();\r\n\r\n    const intentionRequested = points.includes('INTENCION');\r\n    const hookRequested = points.includes('ENGANCHE');\r\n    const ortographyRequested = points.includes('ORTOGRAFIA');\r\n\r\n\r\n    const updIntention = (e) => {\r\n        setIntention(e.target.value);\r\n    }\r\n\r\n    const updHook = (e) => {\r\n        setHook(e.target.value);\r\n    }\r\n\r\n    const updOrtography = (e) => {\r\n        setOrtography(e.target.value);\r\n    }\r\n\r\n    const updImprovement = (e) => {\r\n        setImprovement(e.target.value);\r\n    }\r\n\r\n    const goBackwards = () => {\r\n        history.push('/admin');\r\n    }\r\n\r\n    const send = async (e) => {\r\n        e.preventDefault();\r\n        if (!checkErrors()) {\r\n            setLoading(true);\r\n            saveChanges();\r\n        }\r\n    }\r\n\r\n    const saveChanges = () => {\r\n        const data = {\r\n            requestId: id,\r\n            title: title.trim(),\r\n            type: type.trim(),\r\n            intention: intention.trim(),\r\n            hook: hook.trim(),\r\n            ortography: ortography.trim(),\r\n            improvement: improvement.trim(),\r\n        };\r\n\r\n        setRequestDone(data).then(result => {\r\n            window.scrollTo(0, 0);\r\n            setLoading(false);\r\n            if (!result.error) {\r\n                setUrlResult(result.url);\r\n                setSuccess(true);\r\n            } else {\r\n                alert(result.error);\r\n                setSuccess(false);\r\n            }\r\n        });\r\n    }\r\n\r\n    const checkErrors = () => {\r\n\r\n        // Name\r\n        if (intentionRequested) {\r\n            if (!(/^(?!\\s*$).{1,5000}/.test(intention))) {\r\n                alert('La intención de la obra debe tener de 1 a 5000 caracteres');\r\n                return true;\r\n            }\r\n        }\r\n\r\n        // Hooks\r\n        if (hookRequested) {\r\n            if (!(/^(?!\\s*$).{1,5000}/.test(hook))) {\r\n                alert('En enganche de la obra debe tener de 1 a 5000 caracteres');\r\n                return true;\r\n            }\r\n        }\r\n\r\n        // Ortography\r\n        if (ortographyRequested) {\r\n            if (!(/^(?!\\s*$).{1,5000}/.test(ortography))) {\r\n                alert('La ortografía de la obra debe tener de 1 a 5000 caracteres');\r\n                return true;\r\n            }\r\n        }\r\n\r\n        // Improvement (optional)\r\n        if (improvement) {\r\n            if (!(/^(?!\\s*$).{1,5000}/.test(improvement))) {\r\n                alert('El consejo para el autor debe tener de 1 a 5000 caracteres');\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n        setSuccess(false);\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <Navbar />\r\n            <main className='main-body below-navbar colored-background'>\r\n                <section className='container-xl section prep-req-container'>\r\n                    <div className='flex-align-center mb-2'>\r\n                        <FontAwesomeIcon onClick={goBackwards} className='mr-1' icon={faArrowLeft} size='lg' />\r\n                        <h4 className='request-prep-title m-0 clamp clamp-2'>Crítica: {title}</h4>\r\n                    </div>\r\n                    {\r\n                        success\r\n                            ?\r\n                            <div className='form-container text-align-center'>\r\n                                <Fade bottom>\r\n                                    <FontAwesomeIcon color={'#3DE58D'} icon={faCheckCircle} style={{ fontSize: '8rem' }} />\r\n                                    <h3 className='mt-1 mb-1'>¡Crítica enviada!</h3>\r\n                                </Fade>\r\n                                <p className='txt-responsive-form m0-auto'>Tu experiencia ha aumentado :)</p>\r\n                                <div className='button-container mt-3'>\r\n                                    <button onClick={() => window.open(urlResult, '_blank')} className='button button-light-purple button-option-request ml-auto'>\r\n                                        <FontAwesomeIcon icon={faEye} size='1x' />\r\n                                        {' '}\r\n                                                Ver resultado\r\n                                        </button>\r\n                                    <button onClick={goBackwards} className='button button-blue button-option-request mr-auto'>\r\n                                        <FontAwesomeIcon icon={faHome} size='1x' />\r\n                                        {' '}\r\n                                                Regresar\r\n                                        </button>\r\n                                </div>\r\n                            </div>\r\n                            :\r\n                            <>\r\n                                <div className=''>\r\n                                    <p>{about}</p>\r\n                                    <h4>Link de la obra</h4>\r\n                                    {\r\n                                        link\r\n                                            ?\r\n                                            <a className='clamp clamp-1' target='_blank' href={link}>{link}</a>\r\n                                            :\r\n                                            <p>No existe link</p>\r\n                                    }\r\n                                    {\r\n                                        intentionRequested\r\n                                        &&\r\n                                        <div className='form-group'>\r\n                                            <h4>¿Se logró transmitir la idea?</h4>\r\n                                            <textarea minLength=\"1\" maxLength=\"5000\" rows=\"4\" value={intention} onChange={updIntention} id=\"txtIntencion\" placeholder=\"Ejemplo: Siento que la idea se transmite correctamente, porque genera en el lector una sensación de...\"></textarea>\r\n                                        </div>\r\n                                    }\r\n                                    {\r\n                                        hookRequested\r\n                                        &&\r\n                                        <div className='form-group'>\r\n                                            <h4>¿Qué tal fue el enganche de la obra?</h4>\r\n                                            <textarea minLength=\"1\" maxLength=\"5000\" rows=\"4\" value={hook} onChange={updHook} id=\"txtEnganche\" placeholder=\"Ejemplo: Considero que tiene un enganche bueno, pero no es suficiente. Debería enganchar mucho desde un inicio...\"></textarea>\r\n                                        </div>\r\n                                    }\r\n                                    {\r\n                                        ortographyRequested\r\n                                        &&\r\n                                        <div className='form-group'>\r\n                                            <h4>¿Qué tal fue la ortografía?</h4>\r\n                                            <textarea minLength=\"1\" maxLength=\"5000\" rows=\"4\" value={ortography} onChange={updOrtography} id=\"txtOrtografia\" placeholder=\"Ejemplo: La ortografía fue excelente. Haces un correcto uso de las comas, los puntos y las tildes...\"></textarea>\r\n                                        </div>\r\n                                    }\r\n                                    <div className='form-group'>\r\n                                        <h4>¿Algún consejo para que el autor pueda mejorar? (Opcional)</h4>\r\n                                        <textarea minLength=\"1\" maxLength=\"5000\" rows=\"4\" value={improvement} onChange={updImprovement} id=\"txtOrtografia\" placeholder=\"Ejemplo: La ortografía fue excelente. Haces un correcto uso de las comas, los puntos y las tildes...\"></textarea>\r\n                                    </div>\r\n                                </div>\r\n                                <div className='form-buttons-container mt-3'>\r\n                                    {\r\n                                        loading\r\n                                            ?\r\n                                            <span className='button button-green justify-self-right'>\r\n                                                Enviando\r\n                                {' '}\r\n                                                <ClipLoader color={'#fff'} loading={true} css={overrideSpinnerInline} size={22} />\r\n                                            </span>\r\n                                            :\r\n                                            <button onClick={send} className='button button-green justify-self-right'>\r\n                                                <FontAwesomeIcon icon={faPaperPlane} size='1x' />\r\n                                                {' '}\r\n                                                <span className='d-none d-md-inline'>\r\n                                                    Enviar\r\n                                                </span>\r\n                                            </button>\r\n                                    }\r\n                                </div>\r\n                            </>\r\n                    }\r\n                </section>\r\n            </main>\r\n            <Footer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Preparation;","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\solicitud-diseno.js",["268","269"],"import React, { useRef, useState, useEffect } from 'react'\r\nimport Footer from '../componentes/footer/footer';\r\nimport Navbar from '../componentes/navbar';\r\nimport DropdownImage from '../componentes/dropdown-image';\r\nimport ImgBailando from '../img/des-req.png';\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport Steps from '../componentes/forms/forms-steps';\r\nimport StepManager from '../componentes/forms/step-manager/step-manager';\r\nimport Fade from 'react-reveal/Fade';\r\nimport HelmetMetaData from \"../componentes/helmet\";\r\nimport { Link } from 'react-router-dom';\r\nimport { extractLink, toName, toSentence } from '../helpers/functions';\r\nimport { isNameInvalid, isAgeInvalid, isPhoneInvalid, isEmailInvalid, isLinkInvalid, isTitleInvalid, isAuthorInvalid, isIntentionInvalid } from '../helpers/validators';\r\nimport { uploadImage, saveRequest } from '../api';\r\nimport { useStepObserver } from '../hooks/useStepObserver';\r\nimport { css } from \"@emotion/core\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faAngleLeft, faAngleRight, faCheck, faCheckCircle, faHome } from '@fortawesome/free-solid-svg-icons';\r\nimport { designTypes, contactTypes } from '../data/data';\r\n\r\nconst steps = ['Contacto', 'Tipo', 'Trasfondo'];\r\nconst maxFileSize = 5242880;\r\n\r\nconst overrideSpinnerInline = css`\r\n  display: inline-block;\r\n  vertical-align: middle;\r\n`;\r\n\r\nconst Solicitud = () => {\r\n\r\n    const refBoceto = useRef(null);\r\n\r\n    const [activeIndex, setActiveIndex] = useState(0);\r\n    const [loading, setLoading] = useState(false); // Determina si se está enviando el form\r\n    const [success, setSuccess] = useState(true); // Determina si se envío el form sin errores\r\n    const { canGoBackwards, isLast } = useStepObserver(activeIndex, steps.length);\r\n\r\n    const [name, setName] = useState('');\r\n    const [age, setAge] = useState('');\r\n    const [phone, setPhone] = useState('');\r\n    const [messengerType, setMessengerType] = useState(contactTypes[0]);\r\n    const [email, setEmail] = useState('');\r\n    const [designType, setDesignType] = useState(designTypes[1]);\r\n    const [link, setLink] = useState('');\r\n    const [days, setDays] = useState(1);\r\n    const [title, setTitle] = useState('');\r\n    const [author, setAuthor] = useState('');\r\n    const [intention, setIntention] = useState('');\r\n    const [imgSample, setImgSample] = useState(null);\r\n\r\n    const updName = (e) => {\r\n        setName(e.target.value);\r\n    }\r\n\r\n    const updAge = (e) => {\r\n        setAge(e.target.value);\r\n    }\r\n\r\n    const updPhone = (e) => {\r\n        setPhone(e.target.value);\r\n    }\r\n\r\n    const updMessengerType = (val) => {\r\n        setMessengerType(val);\r\n    }\r\n\r\n    const updEmail = (e) => {\r\n        setEmail(e.target.value);\r\n    }\r\n\r\n    const updDesignType = (val) => {\r\n        setDesignType(val);\r\n    }\r\n\r\n    const updLink = (e) => {\r\n        setLink(e.target.value);\r\n    }\r\n\r\n    const updDays = (e) => {\r\n        setDays(e.target.value);\r\n    }\r\n\r\n    const updTitle = (e) => {\r\n        setTitle(e.target.value);\r\n    }\r\n\r\n    const updAuthor = (e) => {\r\n        setAuthor(e.target.value);\r\n    }\r\n\r\n    const updIntention = (e) => {\r\n        setIntention(e.target.value);\r\n    }\r\n\r\n    const startSelectSample = (e) => {\r\n        e.preventDefault();\r\n        refBoceto.current.click();\r\n    }\r\n\r\n    const selectSample = (e) => {\r\n        e.preventDefault();\r\n        const file = e.target.files[0];\r\n        if (file) {\r\n            if (file.size <= maxFileSize) {\r\n                setImgSample(file);\r\n            } else {\r\n                alert('La imagen debe ser menor a 5MB')\r\n            }\r\n        }\r\n    }\r\n\r\n    const deleteSample = (e) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        setImgSample(null);\r\n    }\r\n\r\n    const previous = (e) => {\r\n        e.preventDefault();\r\n        navigateTo(activeIndex - 1);\r\n    }\r\n\r\n    const next = (e) => {\r\n        e.preventDefault();\r\n        navigateTo(activeIndex + 1);\r\n    }\r\n\r\n    const send = async (e) => {\r\n        e.preventDefault();\r\n        if (!checkErrors()) {\r\n            setLoading(true);\r\n            if (imgSample) {\r\n                uploadImage('solicitud-diseno', imgSample)\r\n                    .then(url => {\r\n                        saveChanges(url);\r\n                    })\r\n                    .catch(error => {\r\n                        setLoading(false);\r\n                        setSuccess(false);\r\n                        alert('Error al subir la imagen. Reintente');\r\n                        console.log(error);\r\n                    })\r\n            } else {\r\n                saveChanges('');\r\n            }\r\n        }\r\n    }\r\n\r\n    const saveChanges = (urlImg) => {\r\n        const data = {\r\n            name: toName(name.trim()),\r\n            age: parseInt(age),\r\n            phone: phone.trim(),\r\n            messengerType: messengerType.type,\r\n            email: email.trim(),\r\n            designType: designType.type,\r\n            link: extractLink(link.trim()),\r\n            title: toSentence(title.trim()),\r\n            daysLeft: parseInt(days),\r\n            author: author.trim(),\r\n            intention: intention.trim(),\r\n            urlImg: urlImg.trim(),\r\n            type: 'DISENO',\r\n            status: 'DISPONIBLE',\r\n            active: 1\r\n        };\r\n\r\n        saveRequest(data).then(() => {\r\n            window.scrollTo(0, 0);\r\n            setLoading(false);\r\n            setSuccess(true);\r\n        });\r\n    }\r\n\r\n    const checkErrors = () => {\r\n\r\n        let error = (isNameInvalid(name)\r\n            || isAgeInvalid(age)\r\n            || isPhoneInvalid(phone)\r\n            || isEmailInvalid(email)\r\n            || isLinkInvalid(link)\r\n            || isTitleInvalid(title)\r\n            || isAuthorInvalid(author)\r\n            || isIntentionInvalid(intention));\r\n\r\n        // Custom errors\r\n        if (designType.type == 'CR') {\r\n            if (isNaN(days) || days < 0 || days > 10) {\r\n                error = 'Introduce días de lanzamiento válidos';\r\n            }\r\n        }\r\n\r\n        if (error) {\r\n            alert(error);\r\n            return true;\r\n        };\r\n\r\n        return false;\r\n    }\r\n\r\n    const navigateTo = (index) => {\r\n        setActiveIndex(index);\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n        setSuccess(false);\r\n    }, [activeIndex]);\r\n\r\n    return (\r\n        <div>\r\n            <Navbar />\r\n            <HelmetMetaData title=\"Diseños - Temple Luna\" description=\"Estamos dispuestos a ayudarte con aquellas obra que tanto amas. ¡Es gratis!\" />\r\n            <main className='main-body below-navbar colored-background'>\r\n                <section className='container-xl section position-relative z-3'>\r\n                    <h2 className='mb-0'>Pide un diseño</h2>\r\n                    <p className='txt-responsive-form'>Y uno de nuestros artistas te contactará a la brevedad</p>\r\n                </section>\r\n                <section className='container-xl mt-5 position-relative'>\r\n                    <img src={ImgBailando} alt='img-fondo' className='img-fondo-formulario' />\r\n\r\n                    <div className='floating-form'>\r\n                        {\r\n                            success\r\n                                ?\r\n                                <div className='form-container text-align-center'>\r\n                                    <Fade bottom>\r\n                                        <FontAwesomeIcon color={'#3DE58D'} icon={faCheckCircle} style={{ fontSize: '8rem' }} />\r\n                                        <h3 className='mt-1 mb-1'>Listo</h3>\r\n                                    </Fade>\r\n                                    <p className='txt-responsive-form m0-auto'>En unos días te contactaremos</p>\r\n                                    <div className='form-buttons-container mt-3'>\r\n                                        <Link to={'inicio'} className='button button-green m0-auto'>\r\n                                            <FontAwesomeIcon icon={faHome} size='xl' />\r\n                                            {' '}\r\n                                            <span className='d-none d-md-inline'>\r\n                                                Regresar\r\n                                            </span>\r\n                                        </Link>\r\n                                    </div>\r\n                                </div>\r\n                                :\r\n                                <>\r\n                                    <Steps\r\n                                        activeIndex={activeIndex}\r\n                                        navigateTo={navigateTo}\r\n                                        steps={steps} />\r\n                                    <div className='form-container'>\r\n                                        <form>\r\n                                            <StepManager currentIndex={activeIndex}>\r\n                                                <div className='step-1'>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtNombres\">¿Cómo te llamas?</label>\r\n                                                        <input minLength=\"1\" maxLength=\"50\" type=\"text\" value={name} onChange={updName} id=\"txtNombres\" placeholder=\"Ingresa tus nombres\" />\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtEdad\">¿Qué edad tienes?</label>\r\n                                                        <input type=\"number\" min={10} max={99} value={age} onChange={updAge} id=\"txtEdad\" placeholder=\"Ingresa tu edad\" />\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtNumero\">Bríndanos un número para consultas (con código de país)</label>\r\n                                                        <div className='cbo-text'>\r\n                                                            <DropdownImage\r\n                                                                selectedItem={messengerType}\r\n                                                                list={contactTypes}\r\n                                                                select={updMessengerType} />\r\n                                                            <input type=\"text\" value={phone} onChange={updPhone} id=\"txtNumero\" placeholder=\"Ej: +51 999 999 999\" />\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtCorreo\">Bríndanos un correo para enviarte el trabajo</label>\r\n                                                        <input minLength=\"6\" maxLength=\"100\" type=\"email\" value={email} onChange={updEmail} id=\"txtCorreo\" placeholder=\"Ingresa tu correo\" />\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className='step-2'>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtLink\">Tipo de diseño</label>\r\n                                                        <DropdownImage\r\n                                                            stretch\r\n                                                            selectedItem={designType}\r\n                                                            list={designTypes}\r\n                                                            select={updDesignType} />\r\n                                                    </div>\r\n                                                    {\r\n                                                        designType.type == 'CR'\r\n                                                        &&\r\n                                                        <div className='form-group'>\r\n                                                            <label htmlFor=\"txtDaysLeft\">¿En cuántos días lanzarás tu obra?</label>\r\n                                                            <input min=\"0\" max=\"10\" type=\"number\" value={days} onChange={updDays} id=\"txtDaysLeft\" placeholder=\"Máximo 10\" />\r\n                                                        </div>\r\n                                                    }\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtLink\">Link de tu obra</label>\r\n                                                        <input minLength=\"1\" maxLength=\"500\" type=\"text\" value={link} onChange={updLink} id=\"txtLink\" placeholder=\"Ingresa el link\" />\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className='step-3'>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtTitulo\">Resume tu historia a una frase</label>\r\n                                                        <input minLength=\"1\" maxLength=\"100\" type=\"text\" value={title} onChange={updTitle} id=\"txtTitulo\" placeholder=\"Ejemplo: El amor todo lo puede\" />\r\n\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtPseudonimo\">¿Cuál es tu pseudónimo?</label>\r\n                                                        <input minLength=\"1\" maxLength=\"100\" type=\"text\" value={author} onChange={updAuthor} id=\"txtPseudonimo\" placeholder=\"Ejemplo: Atenas\" />\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtIntencion\">¿Qué deseas transmitir con tu diseño?</label>\r\n                                                        <textarea minLength=\"1\" maxLength=\"1000\" rows=\"4\" value={intention} onChange={updIntention} id=\"txtIntencion\" placeholder=\"Ejemplo: Quiero transmitir la idea de un mundo inestable e idealizado por una típica adolescente...\"></textarea>\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"flBoceto\">¿Tienes algún boceto en mente? Súbelo</label>\r\n                                                        {\r\n                                                            imgSample\r\n                                                                ?\r\n                                                                <button onClick={startSelectSample} className={`d-flex justify-content-between align-items-center button button-light-purple button-thin stretch ${imgSample ? 'd-flex' : ''}`}>\r\n                                                                    <span className='clamp clamp-1'>\r\n                                                                        {imgSample.name}\r\n                                                                    </span>\r\n                                                                    <span onClick={deleteSample} className='fa fa-times' style={{ color: 'white' }}></span>\r\n                                                                </button>\r\n                                                                :\r\n                                                                <button onClick={startSelectSample} className={`button button-light-purple button-thin stretch ${imgSample ? 'd-flex' : ''}`}>\r\n                                                                    <span>\r\n                                                                        Subir imagen\r\n                                                                    </span>\r\n                                                                </button>\r\n                                                        }\r\n                                                        <input type=\"file\" onChange={selectSample} accept=\"image/*\" ref={refBoceto} className='d-none' id=\"flBoceto\" />\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"chkPortafolio\">El artista podrá usar el diseño final en su propio portafolio.</label>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </StepManager>\r\n                                            <div className='form-buttons-container'>\r\n                                                {\r\n                                                    canGoBackwards && !loading\r\n                                                    &&\r\n                                                    <button onClick={previous} className='button button-green'>\r\n                                                        <FontAwesomeIcon icon={faAngleLeft} size='xl' />\r\n                                                        {' '}\r\n                                                        <span className='d-none d-md-inline'>\r\n                                                            Anterior\r\n                                                    </span>\r\n                                                    </button>\r\n                                                }\r\n                                                {\r\n                                                    loading\r\n                                                        ?\r\n                                                        <span className='button button-green justify-self-right'>\r\n                                                            Enviando\r\n                                                            {' '}\r\n                                                            <ClipLoader color={'#fff'} loading={true} css={overrideSpinnerInline} size={22} />\r\n                                                        </span>\r\n                                                        :\r\n                                                        isLast\r\n                                                            ?\r\n                                                            <button onClick={send} className='button button-green justify-self-right'>\r\n                                                                <span className='d-none d-md-inline'>\r\n                                                                    Enviar\r\n                                                                </span>\r\n                                                                {' '}\r\n                                                                <FontAwesomeIcon icon={faCheck} size='xl' />\r\n                                                            </button>\r\n                                                            :\r\n                                                            <button onClick={next} className='button button-green justify-self-right'>\r\n                                                                <span className='d-none d-md-inline'>\r\n                                                                    Siguiente\r\n                                                                </span>\r\n                                                                {' '}\r\n                                                                <FontAwesomeIcon icon={faAngleRight} size='xl' />\r\n                                                            </button>\r\n                                                }\r\n                                            </div>\r\n                                        </form>\r\n                                    </div>\r\n                                </>\r\n                        }\r\n                    </div>\r\n\r\n                </section>\r\n            </main>\r\n            <Footer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Solicitud;","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\prep_diseno.js",["270"],"import React, { useRef, useState, useEffect } from 'react'\r\nimport Footer from '../componentes/footer/footer';\r\nimport Navbar from '../componentes/navbar';\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport Fade from 'react-reveal/Fade';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { css } from \"@emotion/core\";\r\nimport { uploadImage, setRequestDone } from '../api';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowLeft, faPaperPlane, faCheckCircle, faHome, faEye } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst overrideSpinnerInline = css`\r\n  display: inline-block;\r\n  vertical-align: middle;\r\n`;\r\n\r\nconst maxFileSize = 5242880;\r\n\r\nconst Preparation = ({ location }) => {\r\n\r\n    const { title, id, type, link } = location.state.data;\r\n\r\n    const refDesign = useRef(null);\r\n\r\n    const [success, setSuccess] = useState(false);\r\n    const [urlResult, setUrlResult] = useState('');\r\n    const [loading, setLoading] = useState(false); // Determina si se está enviando el form\r\n    const [comment, setComment] = useState('');\r\n    const [design, setDesign] = useState(null);\r\n\r\n    const history = useHistory();\r\n\r\n    const updComment = (e) => {\r\n        setComment(e.target.value);\r\n    }\r\n\r\n    const goBackwards = () => {\r\n        history.push('/admin');\r\n    }\r\n\r\n    const startSelectDesign = (e) => {\r\n        e.preventDefault();\r\n        refDesign.current.click();\r\n    }\r\n\r\n    const selectDesign = (e) => {\r\n        e.preventDefault();\r\n        const file = e.target.files[0];\r\n        if (file) {\r\n            if (file.size <= maxFileSize) {\r\n                setDesign(file);\r\n            } else {\r\n                alert('La imagen debe ser menor a 5MB')\r\n            }\r\n        }\r\n    }\r\n\r\n    const deleteDesign = (e) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        setDesign(null);\r\n    }\r\n\r\n    const send = async (e) => {\r\n        e.preventDefault();\r\n        if (!checkErrors()) {\r\n            setLoading(true);\r\n            saveChanges();\r\n        }\r\n    }\r\n\r\n    const saveChanges = () => {\r\n        const data = {\r\n            requestId: id,\r\n            type: type.trim(),\r\n            comment: comment.trim()\r\n        };\r\n\r\n        uploadImage('solicitud-diseno', design)\r\n            .then(url => {\r\n                setRequestDone({ ...data, urlResult: url }).then(result => {\r\n                    window.scrollTo(0, 0);\r\n                    setLoading(false);\r\n                    if (!result.error) {\r\n                        setUrlResult(result.url);\r\n                        setSuccess(true);\r\n                    } else {\r\n                        alert(result.error);\r\n                        setSuccess(false);\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                setLoading(false);\r\n                setSuccess(false);\r\n                alert('Error al subir la imagen. Reintente');\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    const checkErrors = () => {\r\n\r\n        // Comment\r\n        if (comment) {\r\n            if (!(/^(?!\\s*$).{1,1000}/.test(comment))) {\r\n                alert('Tu comentario debe debe tener de 1 a 1000 caracteres');\r\n                return true;\r\n            }\r\n        }\r\n\r\n        // File\r\n        if (!design) {\r\n            alert('Debes subir tu diseño final');\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n        setSuccess(false);\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <Navbar />\r\n            <main className='main-body below-navbar colored-background'>\r\n                <section className='container-xl section prep-req-container'>\r\n                    <div className='flex-align-center mb-2'>\r\n                        <FontAwesomeIcon onClick={goBackwards} className='mr-1' icon={faArrowLeft} size='lg' />\r\n                        <h4 className='request-prep-title m-0 clamp clamp-2'>Diseño: {title}</h4>\r\n                    </div>\r\n                    {\r\n                        success\r\n                            ?\r\n                            <div className='form-container text-align-center'>\r\n                                <Fade bottom>\r\n                                    <FontAwesomeIcon color={'#3DE58D'} icon={faCheckCircle} style={{ fontSize: '8rem' }} />\r\n                                    <h3 className='mt-1 mb-1'>¡Diseño enviado!</h3>\r\n                                </Fade>\r\n                                <p className='txt-responsive-form m0-auto'>Tu experiencia ha aumentado :)</p>\r\n                                <div className='button-container mt-3'>\r\n                                    <button onClick={() => window.open(urlResult, '_blank')} className='button button-light-purple button-option-request ml-auto'>\r\n                                        <FontAwesomeIcon icon={faEye} size='1x' />\r\n                                        {' '}\r\n                                                Ver resultado\r\n                                        </button>\r\n                                    <button onClick={goBackwards} className='button button-blue button-option-request mr-auto'>\r\n                                        <FontAwesomeIcon icon={faHome} size='1x' />\r\n                                        {' '}\r\n                                                Regresar\r\n                                        </button>\r\n                                </div>\r\n                            </div>\r\n                            :\r\n                            <>\r\n                                <div className=''>\r\n                                    <h4>Link de la obra</h4>\r\n                                    {\r\n                                        link\r\n                                            ?\r\n                                            <a className='clamp clamp-1' target='_blank' href={link}>{link}</a>\r\n                                            :\r\n                                            <p>No existe link</p>\r\n                                    }\r\n                                    <div className='form-group'>\r\n                                        <h4>Diseño terminado</h4>\r\n                                        {\r\n                                            design\r\n                                                ?\r\n                                                <button onClick={startSelectDesign} className={`d-flex justify-content-between align-items-center button button-light-purple button-thin stretch ${design ? 'd-flex' : ''}`}>\r\n                                                    <span className='clamp clamp-1'>\r\n                                                        {design.name}\r\n                                                    </span>\r\n                                                    <span onClick={deleteDesign} className='fa fa-times' style={{ color: 'white' }}></span>\r\n                                                </button>\r\n                                                :\r\n                                                <button onClick={startSelectDesign} className={`button button-light-purple button-thin stretch ${design ? 'd-flex' : ''}`}>\r\n                                                    <span>\r\n                                                        Subir diseño\r\n                                        </span>\r\n                                                </button>\r\n                                        }\r\n                                        <input type=\"file\" onChange={selectDesign} accept=\"image/*\" ref={refDesign} className='d-none' id=\"flDiseno\" />\r\n                                    </div>\r\n                                    <div className='form-group'>\r\n                                        <h4>¿Algún comentario o recomendación? (Opcional)</h4>\r\n                                        <textarea minLength=\"1\" maxLength=\"1000\" rows=\"4\" value={comment} onChange={updComment} placeholder=\"Ejemplo: Considero que tiene un enganche bueno, pero no es suficiente. Debería enganchar mucho desde un inicio...\"></textarea>\r\n                                    </div>\r\n                                </div>\r\n                                <div className='form-buttons-container mt-3'>\r\n                                    {\r\n                                        loading\r\n                                            ?\r\n                                            <span className='button button-green justify-self-right'>\r\n                                                Enviando\r\n                                                {' '}\r\n                                                <ClipLoader color={'#fff'} loading={true} css={overrideSpinnerInline} size={22} />\r\n                                            </span>\r\n                                            :\r\n                                            <button onClick={send} className='button button-green justify-self-right'>\r\n                                                <FontAwesomeIcon icon={faPaperPlane} size='1x' />\r\n                                                {' '}\r\n                                                <span className='d-none d-md-inline'>\r\n                                                    Enviar\r\n                                                </span>\r\n                                            </button>\r\n                                    }\r\n                                </div>\r\n                            </>\r\n                    }\r\n                </section>\r\n            </main>\r\n            <Footer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Preparation;","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\prev_resultado.js",["271","272","273","274","275","276","277","278","279","280","281","282","283"],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\customRouter\\publicRoute.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\customRouter\\privateRoute.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\drawer\\index.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\firebase.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\api.js",["284","285"],"//import 'babel-polyfill';\r\nimport firebase from './firebase';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst firestore = firebase.firestore();\r\nconst auth = firebase.auth();\r\nconst storage = firebase.storage();\r\n\r\n// Eventos\r\nexport const saveEvent = async (object) => {\r\n    return firestore.collection('inscripciones').doc().set({ ...object, createdAt: firebase.firestore.FieldValue.serverTimestamp() }, { merge: true });\r\n}\r\n\r\n// Solicitudes\r\n\r\nexport const takeRequest = async (requestId, type) => {\r\n    return request('takeRequest', { requestId, type }, 'POST', true);\r\n}\r\n\r\nexport const saveRequest = async (object) => {\r\n    return firestore.collection('solicitudes').doc().set({ ...object, createdAt: firebase.firestore.FieldValue.serverTimestamp() }, { merge: true });\r\n}\r\n\r\nexport const setRequestDone = async (data) => {\r\n    return request('generateResultRequest', data, 'POST', true);\r\n}\r\n\r\nexport const getRequest = async (requestId, includeDetails) => {\r\n    return firestore.collection('solicitudes').doc(requestId).get()\r\n        .then(async doc => {\r\n            if (doc.exists) {\r\n                const res = await request('getArtistDataByRequestId', { requestId }, 'POST'); // TO BE FIXED, DENORMALIZE!!\r\n                if (!res.error) {\r\n                    return { data: { ...doc.data(), id: doc.id, artist: res.artist } }\r\n                } else {\r\n                    return { error: 'No existe el artista' }\r\n                }\r\n            } else {\r\n                return { error: 'No existe una solicitud con ese id' }\r\n            }\r\n        })\r\n        .catch(error => {\r\n            return { error }\r\n        })\r\n}\r\n\r\nexport const getRequests = async (workerId, type, status, startAfter, limit = 10, order = 'asc') => {\r\n\r\n    let request = firestore.collection('solicitudes').where('type', '==', type).where('status', '==', status).orderBy('createdAt', order);\r\n\r\n    if (startAfter) {\r\n        request = request.startAfter(startAfter);\r\n    }\r\n\r\n    if (workerId) {\r\n        request = request.where('takenBy', '==', workerId);\r\n    }\r\n\r\n    return request.limit(limit + 1).get()\r\n        .then(qsn => {\r\n            let list = [];\r\n            qsn.forEach(doc => list.push({ ...doc.data(), id: doc.id }));\r\n            const isLast = list.length < limit + 1;\r\n            if (!isLast) list.pop();\r\n            return { list, isLast };\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n            return { list: [] };\r\n        });;\r\n}\r\n\r\nexport const likeRequestResult = async (id, direction) => {\r\n    return request('addLove', { id, direction }, 'POST');\r\n}\r\n\r\nexport const addCommentRequestResult = async (id, alias, message) => {\r\n    return request('addComment', { id, alias, message }, 'POST');\r\n}\r\n\r\n/*export const listenRequests = (workerId, type, status, limit = 10, callback) => {\r\n    let request = firestore.collection('solicitudes').where('type', '==', type).where('status', '==', status).orderBy('createdAt', 'desc');\r\n    if (workerId) {\r\n        request.where('takenBy', workerId);\r\n    }\r\n    return request.limit(limit).onSnapshot(qsn => {\r\n        let list = [];\r\n        qsn.forEach(doc => list.push({ ...doc.data(), id: doc.id }));\r\n        callback(list);\r\n    });\r\n}*/\r\n\r\n// Analíticas\r\nexport const addAnalitics = async (id, object) => {\r\n    return firestore.collection('analiticas').doc(id).set({ ...object, createdAt: firebase.firestore.FieldValue.serverTimestamp() }, { merge: true });\r\n}\r\n\r\n// Estadísticas\r\n\r\nexport const getStatistics = async keys => {\r\n    let promises = keys.map(key => {\r\n        return firestore.collection('estadisticas').doc(key).get()\r\n            .then(doc => {\r\n                if (doc.exists) {\r\n                    return { statistics: { ...doc.data() } }\r\n                } else {\r\n                    return { error: 'No se pudo obtener la estadística ' + key }\r\n                }\r\n            })\r\n            .catch(error => {\r\n                return { error }\r\n            })\r\n    });\r\n    return Promise.all(promises);\r\n}\r\n\r\n// Sesión\r\n\r\nexport const getProfile = async (uid) => {\r\n    return firestore.collection('perfiles').doc(uid).get()\r\n        .then(doc => {\r\n            if (doc.exists) {\r\n                return { profile: { ...doc.data() } }\r\n            } else {\r\n                return { error: 'No existe un usuario con ese id' }\r\n            }\r\n        })\r\n        .catch(error => {\r\n            return { error }\r\n        })\r\n}\r\n\r\nexport const login = async (email, password) => {\r\n    return auth.signInWithEmailAndPassword(email, password)\r\n        .then(user => {\r\n            return getProfile(user.user.uid).then(({ profile, error }) => {\r\n                if (!error) {\r\n                    return { user, profile };\r\n                } else {\r\n                    logout();\r\n                    return { error: 'No se pudo obtener el perfil' };\r\n                }\r\n            })\r\n        })\r\n        .catch(error => {\r\n            let errMessage;\r\n            switch (error.code) {\r\n                case 'auth/invalid-email':\r\n                    errMessage = 'El usuario es inválido';\r\n                    break;\r\n                case 'auth/user-disabled':\r\n                    errMessage = 'El usuario ha sido deshabilitado';\r\n                    break;\r\n                case 'auth/user-not-found':\r\n                    errMessage = 'El usuario no ha sido encontrado';\r\n                    break;\r\n                case 'auth/wrong-password':\r\n                    errMessage = 'El usuario es inválido';\r\n                    break;\r\n                case 'auth/too-many-requests':\r\n                    errMessage = 'Ha habido muchos intentos de login. Inténtalo en unos minutos.';\r\n                    break;\r\n                default:\r\n                    //errMessage = 'Error code: ' + error.message\r\n                    errMessage = 'Ha ocurrido un error con el servicio de autenticación';\r\n            }\r\n            return { error: errMessage };\r\n        });\r\n}\r\n\r\nexport const logout = async () => {\r\n    return auth.signOut().then(function () {\r\n        return true;\r\n    }).catch(function (error) {\r\n        console.log(error.message);\r\n    });\r\n}\r\n\r\n// Archivos\r\nexport const uploadImage = async (ruta, archivo) => {\r\n    return new Promise((resolve, reject) => {\r\n        let storageRef = storage.ref();\r\n        let imgRef = storageRef.child(`${ruta}/${uuidv4()}`);\r\n        const task = imgRef.put(archivo);\r\n        task.on('state_changed', function (snapshot) {\r\n            var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n            console.log('Upload is ' + progress + '% done');\r\n            switch (snapshot.state) {\r\n                case firebase.storage.TaskState.PAUSED: // or 'paused'\r\n                    console.log('Upload is paused');\r\n                    break;\r\n                case firebase.storage.TaskState.RUNNING: // or 'running'\r\n                    console.log('Upload is running');\r\n                    break;\r\n            }\r\n        }, function (error) {\r\n            reject(error);\r\n        }, function () {\r\n            task.snapshot.ref.getDownloadURL().then(function (downloadURL) {\r\n                resolve(downloadURL);\r\n            });\r\n        });\r\n    })\r\n}\r\n\r\n// Funciones firestore\r\nexport const getGeneratedId = async (collection) => {\r\n    return firestore.collection(collection).doc().id;\r\n}\r\n\r\n// Api fetch\r\nexport const request = async (path, data, method, authorized) => {\r\n    try {\r\n        const result = await fetch(process.env.REACT_APP_ENDPOINT + path, {\r\n            method: method,\r\n            body: data ? JSON.stringify(data) : null,\r\n            headers: {\r\n                Authorization: authorized ? 'Bearer ' + await auth.currentUser.getIdToken() : null\r\n            }\r\n        });\r\n        if (result.status == '200') {\r\n            return await result.json();\r\n        } else {\r\n            return { error: result.statusText || 'No se encontró el endpoint' };\r\n        }\r\n    } catch (error) {\r\n        return { error };\r\n    }\r\n}","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\helpers\\userStorage.js",["286"],"export const getProfileStorage = () => {\r\n    try {\r\n        return JSON.parse(localStorage.getItem('profile'));\r\n    } catch (error) {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport const setProfileStorage = (profile) => {\r\n    return localStorage.setItem('profile', JSON.stringify(profile));\r\n}\r\n\r\n// Esto guarda los tipos de solicitudes elegidos en la pantalla de admin\r\nexport const getAdminRequestType = (defaultType) => {\r\n    try {\r\n        const type = JSON.parse(localStorage.getItem('adminRequestType'));\r\n        if (Object.keys(type).length == 0) {\r\n            return defaultType;\r\n        }\r\n        return type;\r\n    } catch (error) {\r\n        return defaultType;\r\n    }\r\n}\r\n\r\nexport const setAdminRequestType = (reqType) => {\r\n    return localStorage.setItem('adminRequestType', JSON.stringify(reqType));\r\n}\r\n\r\n// Esto guarda la pestana seleccionada en la pantalla de admin\r\nexport const getAdminMainTabIndex = () => {\r\n    return parseInt(localStorage.getItem('adminMainTabIndex')) || 0;\r\n\r\n}\r\n\r\nexport const setAdminMainTabIndex = (index) => {\r\n    return localStorage.setItem('adminMainTabIndex', index);\r\n}","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\modal\\designDetail.js",["287","288","289","290","291","292","293","294","295","296","297","298","299","300"],"import React, { useContext, useState, useEffect } from 'react';\r\nimport ConfirmationModal from './confirmationModal';\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport Avatar from '../avatar';\r\nimport Zoom from 'react-reveal/Zoom';\r\nimport { getDateText, getExpDateText, getMessengerTypeName, getDesignType, getFormattedPhone, extractLink } from '../../helpers/functions';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { AuthContext } from '../../context/AuthContext';\r\nimport { css } from \"@emotion/core\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faAngleDown, faEye, faHandPaper, faLayerGroup, faPaintBrush, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { getProfileStorage } from '../../helpers/userStorage';\r\nimport './modals.css';\r\nimport { faWhatsapp } from '@fortawesome/free-brands-svg-icons';\r\n\r\nconst iconSize = 20;\r\nconst color = '#756F86';\r\n\r\nconst overrideSpinnerInline = css`\r\n  display: inline-block;\r\n  margin-left: .6rem;\r\n  vertical-align: middle;\r\n`;\r\n\r\nconst Modal = ({ isOpen, data, takeRequest, takingRequest, close }) => {\r\n\r\n    const { logged } = useContext(AuthContext);\r\n\r\n    const [openConfirmationModal, setOpenConfirmationModal] = useState(false);\r\n\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if (isOpen) {\r\n            document.body.style.overflow = 'hidden';\r\n        } else {\r\n            document.body.style.overflow = 'unset';\r\n        }\r\n    }, [isOpen]);\r\n\r\n    useEffect(() => {\r\n        if (isOpen) {\r\n            document.body.style.overflow = 'hidden';\r\n        } else {\r\n            document.body.style.overflow = 'unset';\r\n        }\r\n    }, [isOpen]);\r\n\r\n    let styles = '';\r\n    if (isOpen) {\r\n        styles = 'open';\r\n    } else {\r\n        styles = 'close';\r\n    }\r\n\r\n    const { icon, text } = getDesignType(data?.designType);\r\n\r\n    const confirm = () => {\r\n        setOpenConfirmationModal(false);\r\n        takeRequest(data?.id);\r\n    }\r\n    const isTakenByMe = data?.takenBy == logged.uid;\r\n    const messengerType = data?.messengerType;\r\n    const profile = getProfileStorage();\r\n    const formattedPhone = getFormattedPhone(data?.phone);\r\n    const formattedLink = extractLink(data?.link);\r\n    const artist = {\r\n        fName: profile?.fName || '',\r\n        lName: profile?.lName || '',\r\n        contactEmail: profile?.contactEmail || '',\r\n        networks: profile?.networks || []\r\n    };\r\n    if (data) {\r\n        data.artist = artist;\r\n    }\r\n\r\n    if (isTakenByMe) {\r\n        getExpDateText(data?.takenAt, data?.expDate)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ConfirmationModal\r\n                isOpen={openConfirmationModal}\r\n                title='Casi listo'\r\n                message='Al aceptar, tienes tres días para entregar la crítica o acordar una fecha con la persona interesada. ¿Continuar?'\r\n                confirm={confirm}\r\n                close={() => setOpenConfirmationModal(false)} />\r\n            <div className={'overlay overlay-modal ' + styles} onClick={close}>\r\n            </div>\r\n            <Zoom bottom collapse when={isOpen}>\r\n                <div className={'modal ' + styles}>\r\n                    <div className='modal-container'>\r\n                        <div className='header-container position-relative'>\r\n                            <Avatar clases='modal-avatar' />\r\n                            <div className='title-container'>\r\n                                <h3 className='clamp clamp-2'>{data?.title}</h3>\r\n                                <p>{\r\n                                    data?.status == 'DISPONIBLE' || isTakenByMe && data?.status == 'HECHO'\r\n                                        ?\r\n                                        getDateText(data?.createdAt.seconds * 1000)\r\n                                        :\r\n                                        isTakenByMe && data?.status == 'TOMADO'\r\n                                            ?\r\n                                            getExpDateText(data?.expDate.seconds * 1000)\r\n                                            :\r\n                                            null\r\n                                }</p>\r\n                            </div>\r\n                            <FontAwesomeIcon icon={faAngleDown} onClick={close} className='close-icon' />\r\n                        </div>\r\n                        <div className='description-container'>\r\n                            <h4>Tipo de diseño</h4>\r\n                            <span className={icon} style={{ color, fontSize: iconSize }}>{data?.icon}</span>\r\n                            <p className='d-inline ml-1'>{text}</p>\r\n                            {\r\n                                data?.designType == 'CR'\r\n                                &&\r\n                                <>\r\n                                    <h4>Días para el lanzamiento</h4>\r\n                                    <p>{data?.daysLeft}</p>\r\n                                </>\r\n                            }\r\n                            <h4>¿Qué quiero transmitir?</h4>\r\n                            <p>{data?.intention || 'No hay intención'}</p>\r\n                            <h4>Boceto de referencia</h4>\r\n                            {\r\n                                data?.urlImg\r\n                                    ?\r\n                                    <div>\r\n                                        <a target='_blank' href={data?.urlImg}>\r\n                                            <img src={data?.urlImg} alt='img-boceto' className='sample-design-detail' />\r\n                                        </a>\r\n                                    </div>\r\n                                    :\r\n                                    <p>'No hay boceto de referencia</p>\r\n                            }\r\n                            <h4>Link de la obra</h4>\r\n                            {\r\n                                formattedLink\r\n                                    ?\r\n                                    <a target='_blank' className='clamp clamp-1' href={formattedLink}>{formattedLink}</a>\r\n                                    :\r\n                                    <p>No existe link</p>\r\n                            }\r\n                            <h4>Pseudónimo del autor</h4>\r\n                            <p>{data?.author || 'Sin nombre'}</p>\r\n                            {\r\n                                isTakenByMe\r\n                                &&\r\n                                <>\r\n                                    <h4>Datos de contacto</h4>\r\n                                    <p className=\"m-0\"><b>Nombre:</b> {data?.name}</p>\r\n                                    <p className=\"m-0\"><b>Contacto:</b> {data?.phone} ({getMessengerTypeName(messengerType)})</p>\r\n                                    {\r\n                                        messengerType == 'WSP' && formattedPhone\r\n                                        &&\r\n                                        <button onClick={() => window.open('https://web.whatsapp.com/send?phone=' + formattedPhone)} className='button button-whatsapp button-blue button-option-request my-1'>\r\n                                            <FontAwesomeIcon color={'#fff'} icon={faWhatsapp} className='icon' />\r\n                                                Contactar\r\n                                        </button>\r\n                                    }\r\n                                    <p className=\"m-0 mb-2\"><b>Correo:</b> {data?.email}</p>\r\n                                </>\r\n                            }\r\n                        </div>\r\n                        <div className=\"footer-card-container\">\r\n                            <div className='button-container'>\r\n                                {\r\n                                    takingRequest\r\n                                        ?\r\n                                        <button onClick={() => { }} className='button button-blue button-option-request'>\r\n                                            Cargando\r\n                                                {' '}\r\n                                            <ClipLoader color={'#fff'} loading={true} css={overrideSpinnerInline} size={22} />\r\n                                        </button>\r\n                                        :\r\n                                        <>\r\n                                            <>\r\n                                                {\r\n                                                    data?.status == 'DISPONIBLE'\r\n                                                        ?\r\n                                                        <button onClick={() => setOpenConfirmationModal(true)} className='button button-blue button-option-request'>\r\n                                                            <FontAwesomeIcon color={'#fff'} icon={faHandPaper} className='icon' />\r\n                                                            Tomar pedido\r\n                                                        </button>\r\n                                                        :\r\n                                                        data?.status == 'TOMADO' && isTakenByMe\r\n                                                            ?\r\n                                                            <button onClick={() => history.push('prep_diseno', { data })} className='button button-green button-option-request'>\r\n                                                                <FontAwesomeIcon color={'#fff'} icon={faPaintBrush} className='icon' />\r\n                                                            Iniciar diseño\r\n                                                            </button>\r\n                                                            :\r\n                                                            null\r\n                                                }\r\n                                            </>\r\n                                            {\r\n                                                data?.status == 'HECHO' && isTakenByMe\r\n                                                && (\r\n                                                    <button onClick={() => history.push('prev_resultado', { data })} className='button button-green button-option-request'>\r\n                                                        <FontAwesomeIcon color={'#fff'} icon={faEye} className='icon' />\r\n                                                        Ir a resultado\r\n                                                    </button>\r\n                                                )\r\n                                            }\r\n                                            <button onClick={close} className='button button-red button-option-request'>\r\n                                                <FontAwesomeIcon color={'#fff'} icon={faTimes} className='icon' />\r\n                                                Cerrar\r\n                                            </button>\r\n                                        </>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Zoom>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Modal;","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\modal\\critiqueDetail.js",["301","302","303","304","305","306","307","308","309","310","311","312"],"import React, { useContext, useState, useEffect } from 'react';\r\nimport ConfirmationModal from './confirmationModal';\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport Avatar from '../avatar';\r\nimport Zoom from 'react-reveal/Zoom';\r\nimport { getDateText, getExpDateText, getMessengerTypeName, getFormattedPhone, getAbrevPointName, extractLink } from '../../helpers/functions';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { AuthContext } from '../../context/AuthContext';\r\nimport { css } from \"@emotion/core\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faAngleDown, faEdit, faEye, faHandPaper, faLayerGroup, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { getProfileStorage } from '../../helpers/userStorage';\r\nimport './modals.css';\r\nimport { faWhatsapp } from '@fortawesome/free-brands-svg-icons';\r\n\r\nconst overrideSpinnerInline = css`\r\n  display: inline-block;\r\n  margin-left: .6rem;\r\n  vertical-align: middle;\r\n`;\r\n\r\nconst Modal = ({ isOpen, data, takeRequest, takingRequest, close }) => {\r\n\r\n    const { logged } = useContext(AuthContext);\r\n\r\n    const [openConfirmationModal, setOpenConfirmationModal] = useState(false);\r\n\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if (isOpen) {\r\n            document.body.style.overflow = 'hidden';\r\n        } else {\r\n            document.body.style.overflow = 'unset';\r\n        }\r\n    }, [isOpen]);\r\n\r\n    useEffect(() => {\r\n        if (isOpen) {\r\n            document.body.style.overflow = 'hidden';\r\n        } else {\r\n            document.body.style.overflow = 'unset';\r\n        }\r\n    }, [isOpen]);\r\n\r\n    let styles = '';\r\n    if (isOpen) {\r\n        styles = 'open';\r\n    } else {\r\n        styles = 'close';\r\n    }\r\n\r\n    const confirm = () => {\r\n        setOpenConfirmationModal(false);\r\n        takeRequest(data?.id);\r\n    }\r\n\r\n    const isTakenByMe = data?.takenBy == logged.uid;\r\n    const messengerType = data?.messengerType;\r\n    const profile = getProfileStorage();\r\n    const formattedPhone = getFormattedPhone(data?.phone);\r\n    const formattedLink = extractLink(data?.link);\r\n    const artist = {\r\n        fName: profile?.fName || '',\r\n        lName: profile?.lName || '',\r\n        contactEmail: profile?.contactEmail || '',\r\n        networks: profile?.networks || []\r\n    };\r\n    if (data) {\r\n        data.artist = artist;\r\n    }\r\n    //console.log(formattedPhone)\r\n    return (\r\n        <>\r\n            <ConfirmationModal\r\n                isOpen={openConfirmationModal}\r\n                title='Casi listo'\r\n                message='Al aceptar, tienes tres días para entregar la crítica o acordar una fecha con la persona interesada. ¿Continuar?'\r\n                confirm={confirm}\r\n                close={() => setOpenConfirmationModal(false)} />\r\n            <div className={'overlay overlay-modal ' + styles} onClick={close}>\r\n            </div>\r\n            <Zoom bottom collapse when={isOpen}>\r\n                <div className={'modal ' + styles}>\r\n                    <div className='modal-container'>\r\n                        <div className='header-container position-relative'>\r\n                            <Avatar clases='modal-avatar' />\r\n                            <div className='title-container'>\r\n                                <h3 className='clamp clamp-2'>{data?.title}</h3>\r\n                                <p>{\r\n                                    data?.status == 'DISPONIBLE' || isTakenByMe && data?.status == 'HECHO'\r\n                                        ?\r\n                                        getDateText(data?.createdAt.seconds * 1000)\r\n                                        :\r\n                                        isTakenByMe && data?.status == 'TOMADO'\r\n                                            ?\r\n                                            getExpDateText(data?.expDate.seconds * 1000)\r\n                                            :\r\n                                            null\r\n                                }</p>\r\n                            </div>\r\n                            <FontAwesomeIcon icon={faAngleDown} onClick={close} className='close-icon' />\r\n                        </div>\r\n                        <div className='description-container'>\r\n                            <p>{data?.about || 'No hay descripción'}</p>\r\n                            <h4>Link de la obra</h4>\r\n                            {\r\n                                formattedLink ?\r\n                                    <a target='_blank' className='clamp clamp-1' href={formattedLink}>{formattedLink}</a>\r\n                                    :\r\n                                    <p>No existe link</p>\r\n                            }\r\n                            <h4>¿Qué quiero transmitir?</h4>\r\n                            <p>{data?.intention || 'No hay intención'}</p>\r\n                            <h4>Puntos a criticar</h4>\r\n                            <ul>\r\n                                {\r\n                                    data?.points?.map(point => (\r\n                                        <li key={point}>{getAbrevPointName(point)}</li>\r\n                                    ))\r\n                                }\r\n                            </ul>\r\n                            {\r\n                                (!data?.points || data?.points?.length < 1)\r\n                                &&\r\n                                <p>No se han especificado puntos</p>\r\n                            }\r\n                            {\r\n                                isTakenByMe\r\n                                &&\r\n                                <>\r\n                                    <h4>Datos de contacto</h4>\r\n                                    <p className=\"m-0\"><b>Nombre:</b> {data?.name}</p>\r\n                                    <p className=\"m-0\"><b>Contacto:</b> {data?.phone} ({getMessengerTypeName(messengerType)})</p>\r\n                                    {\r\n                                        messengerType == 'WSP' && formattedPhone\r\n                                        &&\r\n                                        <button onClick={() => window.open('https://web.whatsapp.com/send?phone=' + formattedPhone)} className='button button-whatsapp button-blue button-option-request my-1'>\r\n                                            <FontAwesomeIcon color={'#fff'} icon={faWhatsapp} className='icon' />\r\n                                                Contactar\r\n                                        </button>\r\n                                    }\r\n                                    <p className=\"m-0 mb-2\"><b>Correo:</b> {data?.email}</p>\r\n                                </>\r\n                            }\r\n                        </div>\r\n                        <div className=\"footer-card-container\">\r\n                            <div className='button-container'>\r\n                                {\r\n                                    takingRequest\r\n                                        ?\r\n                                        <button onClick={() => { }} className='button button-blue button-option-request'>\r\n                                            Cargando\r\n                                                {' '}\r\n                                            <ClipLoader color={'#fff'} loading={true} css={overrideSpinnerInline} size={22} />\r\n                                        </button>\r\n                                        :\r\n                                        <>\r\n                                            <>\r\n                                                {\r\n                                                    data?.status == 'DISPONIBLE'\r\n                                                        ?\r\n                                                        <button onClick={() => setOpenConfirmationModal(true)} className='button button-blue button-option-request'>\r\n                                                            <FontAwesomeIcon color={'#fff'} icon={faHandPaper} className='icon' />\r\n                                                            Tomar pedido\r\n                                                        </button>\r\n                                                        :\r\n                                                        data?.status == 'TOMADO' && isTakenByMe\r\n                                                            ?\r\n                                                            <button onClick={() => history.push('prep_critica', { data })} className='button button-green button-option-request'>\r\n                                                                <FontAwesomeIcon color={'#fff'} icon={faEdit} className='icon' />\r\n                                                            Iniciar crítica\r\n                                                            </button>\r\n                                                            :\r\n                                                            null\r\n                                                }\r\n                                            </>\r\n                                            {\r\n                                                data?.status == 'HECHO' && isTakenByMe\r\n                                                && (\r\n                                                    <button onClick={() => history.push('prev_resultado', { data })} className='button button-green button-option-request'>\r\n                                                        <FontAwesomeIcon color={'#fff'} icon={faEye} className='icon' />\r\n                                                        Ir a resultado\r\n                                                    </button>\r\n                                                )\r\n                                            }\r\n                                            <button onClick={close} className='button button-red button-option-request'>\r\n                                                <FontAwesomeIcon color={'#fff'} icon={faTimes} className='icon' />\r\n                                                Cerrar\r\n                                            </button>\r\n                                        </>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </Zoom>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Modal;","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\footer\\footer.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\data\\data.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\hooks\\useStepObserver.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\stories-carrousel\\carrousel.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\home-panorama\\panorama.js",["313","314","315"],"import React, { useState, useEffect } from 'react'\r\nimport Navbar from '../navbar'\r\nimport Fade from 'react-reveal/Fade';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faAngleRight } from '@fortawesome/free-solid-svg-icons';\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport { carrouselData } from '../../data/data';\r\nimport './panorama.css'\r\n\r\nlet interval;\r\n\r\nexport const Panorama = () => {\r\n    const [index, setIndex] = useState(0);\r\n    const [autoScroll, setAutoScroll] = useState(true);\r\n\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if (autoScroll) {\r\n            interval = setInterval(() => {\r\n                if (index < carrouselData.length - 1) {\r\n                    setIndex(index + 1);\r\n                } else {\r\n                    setIndex(0);\r\n                }\r\n            }, 5000)\r\n            return () => {\r\n                clearInterval(interval)\r\n            }\r\n        } else {\r\n            return () => {\r\n                clearInterval(interval)\r\n            }\r\n        }\r\n    }, [index]);\r\n\r\n    const showSlide = (selectedIndex) => {\r\n        setAutoScroll(false);\r\n        setIndex(selectedIndex);\r\n    }\r\n\r\n    const goTo = ({ href, scrollTo, pushTo }) => {\r\n        if (href) {\r\n            window.open(href);\r\n        } else if (pushTo) {\r\n            history.push(pushTo);\r\n        }\r\n        else if (scrollTo) {\r\n            const element = document.getElementById(scrollTo);\r\n            element.scrollIntoView();\r\n        }\r\n    }\r\n\r\n    const slide = carrouselData[index];\r\n\r\n    return (\r\n        <div className='panorama'>\r\n            <Navbar startTransparent={true} />\r\n            <TransitionGroup className='panorama-slide-container'>\r\n\r\n                <CSSTransition\r\n                    classNames={`panorama-slide-reverse`}\r\n                    timeout={{ enter: 1000, exit: 1000 }}\r\n                    key={index}>\r\n\r\n                    <div className={`slide ${slide.orientation}`} style={{ background: slide.bg }}>\r\n                        <div className='slide-content'>\r\n                            <div className='container-controls-header'>\r\n                                <Fade left>\r\n                                    <h1>{slide.text}</h1>\r\n                                </Fade>\r\n                                <Fade left>\r\n                                    {\r\n                                        <a target='_blank' rel=\"noreferrer\" onClick={() => goTo(slide)} className='button button-green'>\r\n                                            {slide.buttonText}\r\n                                            {' '}\r\n                                            <FontAwesomeIcon icon={faAngleRight} size='lg' />\r\n                                        </a>\r\n                                    }\r\n\r\n                                </Fade>\r\n                            </div>\r\n                            <div className='img-container' style={slide.style}>\r\n                                <img src={slide.img} className='img-colaboration' alt='img-colaboracion' />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </CSSTransition>\r\n\r\n            </TransitionGroup>\r\n            <div className='dots-panorama'>\r\n                {\r\n                    carrouselData.map((_, i) => <div key={i + 1} onClick={() => showSlide(i)} className={`dot ${i == index ? 'selected' : ''}`} />)\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\forms\\step-manager\\step-manager.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\navbar\\index.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\request-card\\index.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\dropdown-image\\index.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\drawer\\drawer.js",["316"],"import React, { useEffect, useContext } from 'react'\r\nimport { DrawerContext } from '../../context/DrawerContext'\r\nimport { AuthContext } from '../../context/AuthContext'\r\nimport { useHistory } from \"react-router-dom\"\r\nimport { Link } from \"react-router-dom\"\r\nimport { logout } from '../../api'\r\nimport './drawer.css'\r\n\r\nconst Drawer = () => {\r\n\r\n    const { logged } = useContext(AuthContext);\r\n    const { isOpen, close } = useContext(DrawerContext);\r\n\r\n    let history = useHistory();\r\n\r\n    const logoutUser = (e) => {\r\n        e.preventDefault();\r\n        logout()\r\n            .then(res => {\r\n                if (res) {\r\n                    close();\r\n                    history.push('/login');\r\n                }\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isOpen) {\r\n            document.body.style.overflow = 'hidden';\r\n        } else {\r\n            document.body.style.overflow = 'unset';\r\n        }\r\n    }, [isOpen]);\r\n\r\n    let styles = '';\r\n    if (isOpen) {\r\n        styles = 'open';\r\n    } else {\r\n        styles = 'close';\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={'overlay ' + styles} onClick={close}>\r\n            </div>\r\n            <div className={'drawer ' + styles}>\r\n                {\r\n                    logged\r\n                        ?\r\n                        <a onClick={logoutUser} className='btn-drawer'>\r\n                            Salir\r\n                        </a>\r\n                        :\r\n                        <>\r\n                            <Link to='/sol_critica' onClick={close} className='btn-drawer'>\r\n                                Pide tu crítica\r\n                            </Link>\r\n                            <Link to='/sol_diseno' onClick={close} className='btn-drawer'>\r\n                                Pide tu diseño\r\n                            </Link>\r\n                            <Link to='/login' onClick={close} className='btn-drawer'>\r\n                                Login de creativos\r\n                            </Link>\r\n                        </>\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Drawer;","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\tabs\\index.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\tag\\index.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\forms\\forms-steps\\index.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\loading-screen\\index.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\helpers\\functions.js",["317","318","319","320","321"],"import moment from 'moment';\r\nimport { designTypes, contactTypes, critiquePoints, contributors } from '../data/data';\r\nimport \"moment/locale/es\";\r\n\r\nexport const getPointNameFromKey = (key) => {\r\n    return '';\r\n}\r\n\r\nexport const getDateText = (dateMs) => {\r\n    let dayPortion = '';\r\n    const momentObj = moment(dateMs);\r\n    if (momentObj.isSame(moment(), 'day')) {\r\n        dayPortion = momentObj.format('[Hoy, a las] hh:mma');\r\n    }\r\n    else if (momentObj.isSame(moment().subtract(1, 'days'), 'day')) {\r\n        dayPortion = momentObj.format('[Ayer, a las] hh:mma');\r\n    }\r\n    else {\r\n        dayPortion = momentObj.format('dddd DD/MM/YY hh:mma');\r\n    }\r\n    return toSentence(dayPortion);\r\n}\r\n\r\nexport const getExpDateText = (expDateMs) => {\r\n    let result = 'Vence en ';\r\n    let totalMinutes = moment(expDateMs).diff(moment(), 'minutes', true);\r\n    if (totalMinutes < 0) {\r\n        result = 'Venció hace ';\r\n        totalMinutes *= -1;\r\n    }\r\n\r\n    const totalDays = totalMinutes / 1440;\r\n    const wholeDays = Math.trunc(totalDays);\r\n    const totalHours = (totalDays % 1) * 24;\r\n    const wholeHours = Math.trunc(totalHours);\r\n    const wholeMinutes = Math.trunc((totalHours % 1) * 60);\r\n\r\n    if (wholeDays >= 1) {\r\n        result += wholeDays + ` dia${wholeDays > 1 ? 's' : ''}`;\r\n    }\r\n\r\n    if (wholeHours >= 1) {\r\n        result += ', ' + wholeHours + ` hora${wholeHours > 1 ? 's' : ''}`;\r\n    }\r\n\r\n    if (wholeMinutes >= 1 && wholeDays < 1) {\r\n        result += ', ' + wholeMinutes + ` minuto${wholeMinutes > 1 ? 's' : ''}`;\r\n    }\r\n    return result;\r\n}\r\n\r\nexport const toSentence = (text, limit) => {\r\n    limit = !limit ? text.length : limit;\r\n    if (text && text.length > 0) {\r\n        return (text.substring(0, 1).toUpperCase() + text.substring(1, limit).toLowerCase()).trim();\r\n    } else {\r\n        return '';\r\n    }\r\n}\r\n\r\nexport const toName = (rawName) => {\r\n    let nameArray = rawName.replace(/'.'/g, '').trim().split(' ');\r\n    nameArray = nameArray.filter(name => name != '').map(name => name && toSentence(name.trim()));\r\n    return nameArray.join(' ');\r\n}\r\n\r\nexport const getMessengerTypeName = (type) => {\r\n    const messengerType = contactTypes.find(c => c.type == type);\r\n    if (messengerType) {\r\n        return messengerType.name;\r\n    }\r\n    return '';\r\n}\r\n\r\nexport const getDesignType = (type) => {\r\n    const obj = designTypes.find(e => e.type == type);\r\n    if (obj) {\r\n        return obj;\r\n    }\r\n    return {};\r\n}\r\n\r\nexport const getAbrevPointName = (id) => {\r\n    const obj = critiquePoints.find(e => e.id == id);\r\n    if (obj) {\r\n        return obj.abrev;\r\n    }\r\n    return '';\r\n}\r\n\r\nexport const getFormattedPhone = (rawPhone) => {\r\n    let result = '';\r\n    if (rawPhone) {\r\n        result = rawPhone.trim().replace(/' '/g, '');\r\n        if (result[0] != '+') {\r\n            result = '+' + result;\r\n        }\r\n        return result;\r\n    }\r\n    return null;\r\n}\r\n\r\nexport const extractLink = (rawLink) => {\r\n    if (rawLink) {\r\n        const matchedArray = rawLink.match(/(?:(?:https?|ftp):\\/\\/)?[\\w/\\-?=%.]+\\.[\\w/\\-&?=%.]+/g);\r\n        if (matchedArray) {\r\n            return matchedArray[0];\r\n        }\r\n    }\r\n    return '';\r\n}\r\n\r\nexport const getRandomContributorName = () => {\r\n    const min = Math.ceil(0);\r\n    const max = Math.floor(contributors.length - 1);\r\n    const number = Math.floor(Math.random() * (max - min + 1)) + min;\r\n    return contributors[number];\r\n}","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\modal\\confirmationModal.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\navbar\\navbar.js",["322"],"import React, { useRef, useState, useContext, useEffect } from 'react'\r\nimport Avatar from '../avatar'\r\nimport { useOutsideListener } from '../../hooks/useOutsideListener';\r\nimport { useHistory } from \"react-router-dom\"\r\nimport { logout } from '../../api'\r\nimport { Link } from \"react-router-dom\"\r\nimport { DrawerContext } from '../../context/DrawerContext'\r\nimport { AuthContext } from '../../context/AuthContext'\r\nimport { getProfileStorage } from '../../helpers/userStorage'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faAngleDown } from '@fortawesome/free-solid-svg-icons';\r\nimport Logo from '../../img/logo.png'\r\nimport Sanguchito from '../../img/sanguchito.svg'\r\nimport './navbar.css'\r\n\r\nconst Navbar = ({ startTransparent }) => {\r\n\r\n    const { open, close } = useContext(DrawerContext);\r\n    const { logged } = useContext(AuthContext);\r\n\r\n    const [openOptions, setOpenOptions] = useState(false);\r\n    let history = useHistory();\r\n\r\n    const outsideListenerRef = useRef(null); // Escucha cuando se hace click fuera de\r\n    const arrowTogglerRef = useRef(null);\r\n\r\n    const { outsideListener$ } = useOutsideListener(outsideListenerRef);\r\n    const [scrolled, setScrolled] = useState(false);\r\n    const [width, setWidth] = useState(0);\r\n\r\n    const handleScroll = () => {\r\n        const offset = window.scrollY\r\n        if (offset > 20) {\r\n            setScrolled(true)\r\n        } else {\r\n            setScrolled(false)\r\n        }\r\n    }\r\n\r\n    const logoutUser = (e) => {\r\n        e.preventDefault();\r\n        logout()\r\n            .then(res => {\r\n                if (res) {\r\n                    close();\r\n                    history.push('/login');\r\n                }\r\n            })\r\n    }\r\n\r\n    const toggleOptionsContainer = () => {\r\n        setOpenOptions(!openOptions);\r\n    }\r\n\r\n    const updWith = () => {\r\n        setWidth(window.innerWidth);\r\n    }\r\n\r\n    useEffect(() => {\r\n        outsideListener$.subscribe(event => {\r\n            if (arrowTogglerRef.current && !arrowTogglerRef.current.contains(event.target)) {\r\n                setOpenOptions(false);\r\n            }\r\n        })\r\n    }, [outsideListener$, arrowTogglerRef])\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\", handleScroll)\r\n        return () => window.removeEventListener(\"scroll\", handleScroll)\r\n    }, [scrolled]);\r\n\r\n    useEffect(() => {\r\n        if (width === 0) {\r\n            setWidth(window.innerWidth);\r\n        }\r\n\r\n        if (width < 768) {\r\n            setOpenOptions(false);\r\n        }\r\n\r\n        window.addEventListener('resize', updWith);\r\n        return () => window.removeEventListener('resize', updWith);\r\n    }, [width]);\r\n\r\n    let navClasses = 'main-navbar';\r\n    if (!startTransparent || scrolled) {\r\n        navClasses += ' navbar-scrolled';\r\n    }\r\n    if (logged) {\r\n        navClasses += ' logged';\r\n    }\r\n\r\n    let optionsClasses = 'container-submenu-navbar';\r\n    if (openOptions) {\r\n        optionsClasses += ' open';\r\n    } else {\r\n        optionsClasses += ' close';\r\n    }\r\n\r\n    let fName, lName, urlImg;\r\n    const profile = getProfileStorage();\r\n    if (profile) {\r\n        fName = profile.fName;\r\n        lName = profile.lName;\r\n        urlImg = profile.urlImg;\r\n    }\r\n\r\n    return (\r\n        <nav className={navClasses}>\r\n            <div className='container-xl container-navbar position-relative'>\r\n                <Link to='/' className='logo-header'>\r\n                    <img alt='logo' src={Logo} />\r\n                </Link>\r\n                <div className='navbar-nav'>\r\n                    {\r\n                        logged\r\n                            ?\r\n                            <>\r\n                                <span className='btn-nav clamp clamp-1'>\r\n                                    {fName} {lName}\r\n                                </span>\r\n                                <Avatar clases='img-profile-navbar' />\r\n                                <span ref={arrowTogglerRef} onClick={toggleOptionsContainer} className='btn-nav m-0 pl-1 pr-1'>\r\n                                    <FontAwesomeIcon icon={faAngleDown} size='1x' />\r\n                                </span>\r\n                            </>\r\n                            :\r\n                            <>\r\n                                <Link to='/sol_critica' className='btn-nav'>\r\n                                    Críticas\r\n                                </Link>\r\n                                <Link to='/sol_diseno' className='btn-nav'>\r\n                                    Diseños\r\n                                </Link>\r\n                                <Link to='/login' className='btn-nav'>\r\n                                    Login\r\n                                </Link>\r\n                            </>\r\n                    }\r\n                </div>\r\n                <img alt='sanguchito' onClick={open} src={Sanguchito} className='img-sanguchito' />\r\n            </div>\r\n            <div ref={outsideListenerRef} className={optionsClasses}>\r\n                <ul>\r\n                    <li onClick={logoutUser}>\r\n                        Salir\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;\r\n","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\request-card\\card.js",["323","324","325","326","327","328","329","330","331","332","333"],"import React, { useContext } from 'react';\r\nimport Avatar from '../avatar';\r\nimport { getDateText, getExpDateText } from '../../helpers/functions';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { AuthContext } from '../../context/AuthContext';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faEdit, faPaintBrush, faEye, faBoxOpen } from '@fortawesome/free-solid-svg-icons';\r\nimport { getProfileStorage } from '../../helpers/userStorage';\r\nimport './card.css'\r\n\r\nconst Card = React.forwardRef(({ data, select }, ref) => {\r\n\r\n    const { logged } = useContext(AuthContext);\r\n    const history = useHistory();\r\n\r\n    const isTakenByMe = data?.takenBy == logged.uid;\r\n\r\n    const profile = getProfileStorage();\r\n    const artist = {\r\n        fName: profile.fName || '',\r\n        lName: profile.lName || '',\r\n        contactEmail: profile.contactEmail || '',\r\n        networks: profile.networks || []\r\n    };\r\n    data.artist = artist;\r\n\r\n    return (\r\n        <div ref={ref} className='request-card-container'>\r\n            <div className='header-container'>\r\n                <Avatar clases='request-avatar' />\r\n                <div className='title-container'>\r\n                    <h3 className='clamp clamp-1'>{data?.title}</h3>\r\n                    <p>\r\n                        {\r\n                            data?.status == 'DISPONIBLE' || isTakenByMe && data?.status == 'HECHO'\r\n                                ?\r\n                                getDateText(data?.createdAt.seconds * 1000)\r\n                                :\r\n                                isTakenByMe && data?.status == 'TOMADO'\r\n                                    ?\r\n                                    getExpDateText(data?.expDate.seconds * 1000)\r\n                                    :\r\n                                    null\r\n                        }\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            <div className='description-container'>\r\n                <p className='clamp clamp-2'>\r\n                    {data?.type == 'CRITICA' ? data.about : data.intention}\r\n                </p>\r\n            </div>\r\n            <div className='footer-card-container'>\r\n                <div className='button-container'>\r\n                    {\r\n                        data?.status == 'TOMADO' && isTakenByMe\r\n                        && (\r\n                            data?.type == 'CRITICA'\r\n                                ?\r\n                                <button onClick={() => history.push('prep_critica', { data })} className='button button-green button-option-request'>\r\n                                    <FontAwesomeIcon color={'#fff'} icon={faEdit} className='icon' />\r\n                                    Iniciar crítica\r\n                                </button>\r\n                                :\r\n                                data?.type == 'DISENO'\r\n                                    ?\r\n                                    <button onClick={() => history.push('prep_diseno', { data })} className='button button-green button-option-request'>\r\n                                        <FontAwesomeIcon color={'#fff'} icon={faPaintBrush} className='icon' />\r\n                                    Iniciar diseño\r\n                                </button>\r\n                                    :\r\n                                    null\r\n                        )\r\n                    }\r\n                    {\r\n                        data?.status == 'HECHO' && isTakenByMe\r\n                        && (\r\n                            <button onClick={() => history.push(`prev_resultado?id=${data.id}&origin=tl`)} className='button button-green button-option-request'>\r\n                                <FontAwesomeIcon color={'#fff'} icon={faEye} className='icon' />\r\n                                Ir a resultado\r\n                            </button>\r\n                        )\r\n                    }\r\n                    <button onClick={() => select(data)} className='button button-blue button-option-request'>\r\n                        <FontAwesomeIcon color={'#fff'} icon={faBoxOpen} className='icon' />\r\n                        Abrir\r\n                </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Card;","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\dropdown-image\\dropdown.js",["334"],"import React, { useRef, useState, useEffect } from 'react';\r\nimport { useOutsideListener } from '../../hooks/useOutsideListener';\r\nimport './dropdown.css';\r\n\r\nconst tamanoIcono = 20;\r\nconst color = '#756F86';\r\n\r\nconst Dropdown = ({ list, select, stretch, selectedItem }) => {\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const outsideListenerRef = useRef(null); // Escucha cuando se hace click fuera de\r\n    const { outsideListener$ } = useOutsideListener(outsideListenerRef);\r\n\r\n    useEffect(() => {\r\n        outsideListener$.subscribe(() => {\r\n            setOpen(false);\r\n        })\r\n    }, [outsideListener$]);\r\n\r\n    const toggleDropdown = (e) => {\r\n        e.preventDefault();\r\n        setOpen(!open);\r\n    }\r\n\r\n    const selectItem = (e, item) => {\r\n        e.preventDefault();\r\n        setOpen(false);\r\n        select(item);\r\n    }\r\n\r\n    const tag = (text) => (\r\n        text &&\r\n        <span className='dropdown-list-tag'>\r\n            {text}\r\n        </span>\r\n    )\r\n\r\n    return (\r\n        <div\r\n            ref={outsideListenerRef}\r\n            className='container-select-image'>\r\n            <button className={`select-image position-relative ${stretch ? 'stretch' : ''}`} onClick={toggleDropdown}>\r\n                <span className={selectedItem.icon} style={{ color, marginRight: '1rem', fontSize: tamanoIcono + 'px' }}></span>\r\n                {\r\n                    selectedItem.text\r\n                    &&\r\n                    <span className='mr-1 position-relative' style={{ color }}>\r\n                        {selectedItem.text}\r\n                        {tag(selectedItem.tag)}\r\n                    </span>\r\n                }\r\n                <span className='fa fa-caret-down' style={{ color }}></span>\r\n            </button>\r\n            {\r\n                open\r\n                &&\r\n                <div className={`selectable-list ${stretch ? 'stretch' : ''}`}>\r\n                    {\r\n                        list.map((item, index) => item.displayInDropdown != false && (\r\n                            <div key={index} onClick={(e) => selectItem(e, item)} className='selectable-list-item'>\r\n                                <span className={item.icon} style={{ color, fontSize: tamanoIcono + 'px' }}></span>\r\n                                {\r\n                                    item.text\r\n                                    &&\r\n                                    <span className='ml-1 position-relative' style={{ color }}>\r\n                                        {item.text}\r\n                                        {tag(item.tag)}\r\n                                    </span>\r\n                                }\r\n                            </div>\r\n                        ))\r\n                    }\r\n                </div>\r\n\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dropdown;","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\tabs\\tabs.js",["335"],"import React from 'react'\r\nimport ImgVacio from \"../../img/reading-sitting.svg\";\r\nimport InfiniteScroll from 'react-infinite-scroll-component'\r\nimport './tabs.css'\r\n\r\nconst Tabs = ({ tabs, requestList, requestMoreData, hasMore, loader, activeIndex, select, initialLoading, loadingMore, children }) => {\r\n\r\n    const porcAnchoPestana = 100 / tabs.length;\r\n\r\n    const childrenArray = React.Children.toArray(children);\r\n\r\n    const switchTab = (e, index) => {\r\n        e.preventDefault();\r\n        select(index);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"material-tabs\">\r\n                {\r\n                    tabs.map((pestana, index) => <a key={index} onClick={(e) => switchTab(e, index)} className=\"active\">{pestana}</a>)\r\n                }\r\n                <span className=\"tab-bar\" style={{ width: `${porcAnchoPestana}%`, left: `${porcAnchoPestana * activeIndex}%` }}></span>\r\n            </div>\r\n            {\r\n\r\n                initialLoading\r\n                    ?\r\n                    loader\r\n                    :\r\n                    requestList && requestList.length > 0\r\n                        ?\r\n                        <InfiniteScroll\r\n                            className=\"tab-content\"\r\n                            dataLength={requestList.length}\r\n                            next={requestMoreData}\r\n                            hasMore={hasMore}\r\n                            loader={loader}>\r\n                            {\r\n                                childrenArray\r\n                            }\r\n                        </InfiniteScroll>\r\n                        :\r\n                        <div>\r\n                            <img src={ImgVacio} className=\"img-vacio\" alt=\"img-vacio\" />\r\n                            <h2 className=\"text-align-center m-0 text-empty\">Oops! aún nada por aquí</h2>\r\n                        </div>\r\n            }\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Tabs;\r\n","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\tag\\tag.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\forms\\forms-steps\\form-steps.js",["336"],"import React from 'react'\r\nimport './form-steps.css'\r\n\r\nconst Steps = ({ activeIndex, navigateTo, steps }) => {\r\n\r\n    const chunksPercentage = 100 / (steps.length + 1);\r\n    const totalWidth = chunksPercentage * (steps.length - 1);\r\n\r\n    return (\r\n        <div className='form-steps'>\r\n            <div className='line' style={{ left: chunksPercentage + '%', width: totalWidth + '%' }}></div>\r\n            {\r\n                steps.map((step, index) => (\r\n                    <div key={index + 1} className='step-container'>\r\n                        <div onClick={() => navigateTo(index)} className={`form-step ${index == activeIndex ? 'active' : ''}`}>{index + 1}</div>\r\n                        <div className='step-text'>{step}</div>\r\n                    </div>\r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Steps;","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\avatar\\index.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\loading-screen\\loading-screen.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\story-card\\index.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\hooks\\useOutsideListener.js",["337"],"import React, { useRef, useEffect } from \"react\";\r\nimport { Subject } from 'rxjs';\r\n\r\n/**\r\n * Hook that alerts clicks outside of the passed ref\r\n */\r\nexport const useOutsideListener = (ref) => {\r\n\r\n    const outsideListener = useRef(new Subject());\r\n\r\n    useEffect(() => {\r\n        /**\r\n       * Alert if clicked on outside of element\r\n       */\r\n        function handleClickOutside(event) {\r\n            if (ref.current && !ref.current.contains(event.target)) {\r\n                outsideListener.current.next(event);\r\n            }\r\n        }\r\n\r\n        // Bind the event listener\r\n        document.addEventListener(\"mousedown\", handleClickOutside);\r\n        return () => {\r\n            // Unbind the event listener on clean up\r\n            document.removeEventListener(\"mousedown\", handleClickOutside);\r\n        };\r\n    }, [ref]);\r\n\r\n    return {\r\n        outsideListener$: outsideListener.current\r\n    }\r\n\r\n}\r\n","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\avatar\\avatar.js",["338"],"import React, { useState, useEffect } from 'react'\r\nimport GenericUserImg from '../../img/usuario-generico.svg'\r\nimport './avatar.css';\r\n\r\nconst Avatar = ({ img, clases }) => {\r\n    const [avatarImg, setAvatarImg] = useState(GenericUserImg);\r\n\r\n    useEffect(() => {\r\n        setAvatarImg(avatarImg);\r\n    }, [img])\r\n\r\n    return (\r\n        <div className={clases+' img-avatar-container'}>\r\n            <img className='img-avatar' onError={() => setAvatarImg(GenericUserImg)} alt='img-avatar' src={avatarImg} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Avatar;\r\n","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\story-card\\story_card.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\customRouter\\anyRoute.js",["339"],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\helmet\\index.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\helmet\\helmet-metadata.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\modal\\punctuation.js",["340","341","342","343","344","345","346","347","348","349","350","351"],"import React, { useContext, useState } from 'react';\r\nimport ConfirmationModal from './confirmationModal';\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport Avatar from '../avatar';\r\nimport Zoom from 'react-reveal/Zoom';\r\nimport { contactTypes } from '../../data/data';\r\nimport { getDateText, getExpDateText } from '../../helpers/functions';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { designTypes } from '../../data/data';\r\nimport { addCommentRequestResult } from '../../api';\r\nimport { AuthContext } from '../../context/AuthContext';\r\nimport { css } from \"@emotion/core\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faAngleDown, faCheck, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport './modals.css';\r\n\r\nconst iconSize = 20;\r\nconst color = '#756F86';\r\n\r\nconst overrideSpinnerInline = css`\r\n  display: inline-block;\r\n  margin-left: .6rem;\r\n  vertical-align: middle;\r\n`;\r\n\r\nconst Modal = ({ isOpen, requestId, requestType, close }) => {\r\n\r\n    const { logged } = useContext(AuthContext);\r\n    const [alias, setAlias] = useState('');\r\n    const [feedback, setFeedback] = useState('');\r\n    const [sendingFeedback, setSendingFeedback] = useState(false);\r\n    const [success, setSuccess] = useState(false);\r\n\r\n    let title = '';\r\n    let message = '';\r\n    let messagePlaceholder = '';\r\n    let styles = '';\r\n\r\n    if (isOpen) {\r\n        styles = 'open';\r\n    } else {\r\n        styles = 'close';\r\n    }\r\n\r\n    if (success) {\r\n        styles += ' punctuation-modal';\r\n    }\r\n\r\n    switch (requestType) {\r\n        case 'CRITICA':\r\n            title = '¡Maravilloso!';\r\n            message = 'Has dado amor a esta crítica. ¿Deseas dejarle un mensaje al crítico?';\r\n            messagePlaceholder = 'Me encantó la crítica, tu punto de vista me ayudará en mucho.';\r\n            break;\r\n        case 'DISENO':\r\n            title = '¡Maravilloso!';\r\n            message = 'Has dado amor a este diseño. ¿Deseas dejarle un mensaje al diseñador?';\r\n            messagePlaceholder = 'Me encantó el diseño, aunque pienso que puedes mejorar en...';\r\n            break;\r\n    }\r\n\r\n    const addComment = () => {\r\n        setSendingFeedback(true);\r\n        if (!checkErrors()) {\r\n            addCommentRequestResult(requestId, alias, feedback).then(({ data, error }) => {\r\n                if (!error) {\r\n                    setSendingFeedback(false);\r\n                    setSuccess(true);\r\n                } else {\r\n                    setSendingFeedback(false);\r\n                    alert('No se pudo agregar el mensaje');\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    const checkErrors = () => {\r\n\r\n        if (alias.length > 50) {\r\n            alert('Tu alias debe tener de 1 a 50 caracteres');\r\n            return true;\r\n        }\r\n\r\n        if (feedback.length > 1000) {\r\n            alert('Tu mensaje debe tener de 1 a 1000 caracteres');\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={'overlay overlay-modal ' + styles} onClick={close}>\r\n            </div>\r\n            <Zoom bottom collapse when={isOpen}>\r\n                <div className={'modal modal-fit modal-center ' + styles}>\r\n                    {\r\n                        success\r\n                            ?\r\n                            <div className='modal-container'>\r\n                                <div className='header-container position-relative'>\r\n                                    <div className='title-container'>\r\n                                        <h3 className='clamp clamp-1'>¡Listo!</h3>\r\n                                    </div>\r\n                                    <FontAwesomeIcon icon={faAngleDown} onClick={close} className='close-icon' />\r\n                                </div>\r\n                                <div className=\"footer-card-container\">\r\n                                    <button onClick={close} className='button button-green stretch'>\r\n                                        <FontAwesomeIcon icon={faCheck} size='xl' />\r\n                                        {' '}\r\n                                        Volver\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                            :\r\n                            <div className='modal-container'>\r\n                                <div className='header-container position-relative'>\r\n                                    <div className='title-container'>\r\n                                        <h3 className='clamp clamp-1'>{title}</h3>\r\n                                    </div>\r\n                                    <FontAwesomeIcon icon={faAngleDown} onClick={close} className='close-icon' />\r\n                                </div>\r\n                                <div className='description-container'>\r\n                                    <p>{message}</p>\r\n                                    <form>\r\n                                        <div className='form-group'>\r\n                                            <label htmlFor=\"txtAlias\">Tu alias</label>\r\n                                            <input minLength=\"1\" maxLength=\"50\" type=\"text\" value={alias} onChange={(e) => setAlias(e.target.value)} id=\"txtAlias\" placeholder=\"Ingresa tu alias\" />\r\n                                        </div>\r\n                                        <div className='form-group'>\r\n                                            <label htmlFor=\"txtFeedback\">Mensaje</label>\r\n                                            <textarea minLength=\"1\" maxLength=\"1000\" rows=\"3\" value={feedback} onChange={(e) => setFeedback(e.target.value)} id=\"txtFeedback\" placeholder={messagePlaceholder}></textarea>\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                                <div className=\"footer-card-container\">\r\n                                    {\r\n                                        sendingFeedback\r\n                                            ?\r\n                                            <button className='button button-green stretch'>\r\n                                                <ClipLoader color={'#fff'} loading={true} css={overrideSpinnerInline} size={22} />\r\n                                            </button>\r\n                                            :\r\n                                            <button onClick={addComment} className='button button-green stretch'>\r\n                                                <FontAwesomeIcon icon={faCheck} size='xl' />\r\n                                                {' '}\r\n                                    Enviar\r\n                                    </button>\r\n                                    }\r\n\r\n                                </div>\r\n                            </div>\r\n                    }\r\n\r\n                </div>\r\n            </Zoom>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Modal;","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\componentes\\speech-bubble\\speech-bubble.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\ins_evento.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\ins_evento_LECTURA-VIVO-LACZU-1.js",["352","353","354","355","356"],"import React, { useState, useEffect } from 'react'\r\nimport Footer from '../componentes/footer/footer';\r\nimport Navbar from '../componentes/navbar';\r\nimport DropdownImage from '../componentes/dropdown-image';\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport Steps from '../componentes/forms/forms-steps';\r\nimport StepManager from '../componentes/forms/step-manager/step-manager';\r\nimport Fade from 'react-reveal/Fade';\r\nimport ImgAutor from '../img/laczu.jpg';\r\nimport HelmetMetaData from \"../componentes/helmet\";\r\nimport { toName, extractLink } from '../helpers/functions';\r\nimport { isNameInvalid, isAgeInvalid, isPhoneInvalid, isEmailInvalid, isLinkInvalid } from '../helpers/validators';\r\nimport { saveEvent } from '../api';\r\nimport { useStepObserver } from '../hooks/useStepObserver';\r\nimport { css } from \"@emotion/core\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faAngleDown, faAngleLeft, faAngleRight, faCheck, faCheckCircle, faDotCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { contactTypes, inscriptionTypes } from '../data/data';\r\nimport { faWhatsapp } from '@fortawesome/free-brands-svg-icons';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst steps = ['Inicio', 'Contacto', 'Listo'];\r\nconst chkPoints = [{ id: 'SI', name: 'Sí', abrev: 'Sí' }];\r\n\r\nconst overrideSpinnerInline = css`\r\n  display: inline-block;\r\n  vertical-align: middle;\r\n`;\r\n\r\nconst Inscripcion = () => {\r\n\r\n    const [activeIndex, setActiveIndex] = useState(0);\r\n    const [loading, setLoading] = useState(false); // Determina si se está enviando el form\r\n    const [success, setSuccess] = useState(true); // Determina si se envío el form sin errores\r\n    const { canGoBackwards, isLast } = useStepObserver(activeIndex, steps.length);\r\n\r\n    const [name, setName] = useState('');\r\n    const [age, setAge] = useState('');\r\n    const [phone, setPhone] = useState('');\r\n    const [messengerType, setMessengerType] = useState(contactTypes[0]);\r\n    const [email, setEmail] = useState('');\r\n    const [inscriptionType, setInscriptionType] = useState(inscriptionTypes[0]);\r\n    const [link, setLink] = useState('');\r\n    const [points, setPoints] = useState([]);\r\n\r\n    const history = useHistory();\r\n\r\n    const updName = (e) => {\r\n        setName(e.target.value);\r\n    }\r\n\r\n    const updAge = (e) => {\r\n        setAge(e.target.value);\r\n    }\r\n\r\n    const updPhone = (e) => {\r\n        setPhone(e.target.value);\r\n    }\r\n\r\n    const updMessengerType = (val) => {\r\n        setMessengerType(val);\r\n    }\r\n\r\n    const updInscriptionType = (val) => {\r\n        setInscriptionType(val);\r\n    }\r\n\r\n    const updLink = (e) => {\r\n        setLink(e.target.value);\r\n    }\r\n\r\n    const updEmail = (e) => {\r\n        setEmail(e.target.value);\r\n    }\r\n\r\n    const selectPoint = (id) => {\r\n        if (includesPoint(id)) {\r\n            setPoints(points.filter(p => p != id));\r\n        } else {\r\n            setPoints([...points, id]);\r\n        }\r\n    }\r\n\r\n    const previous = (e) => {\r\n        e.preventDefault();\r\n        navigateTo(activeIndex - 1);\r\n    }\r\n\r\n    const next = (e) => {\r\n        e.preventDefault();\r\n        navigateTo(activeIndex + 1);\r\n    }\r\n\r\n    const send = async (e) => {\r\n        e.preventDefault();\r\n        if (!checkErrors()) {\r\n            setLoading(true);\r\n            saveChanges();\r\n        }\r\n    }\r\n\r\n    const saveChanges = () => {\r\n\r\n        const idEvento = history.location.pathname.toString().replace(/\\//g, '').replace(/ins_evento/g, '');\r\n\r\n        const data = {\r\n            eventId: idEvento,\r\n            eventName: 'Dinámica de lectura en vivo',\r\n            name: toName(name.trim()),\r\n            link: extractLink(link.trim()),\r\n            role: inscriptionType.type,\r\n            age: parseInt(age),\r\n            phone: phone.trim(),\r\n            email: email.trim()\r\n        };\r\n\r\n        saveEvent(data).then(() => {\r\n            window.scrollTo(0, 0);\r\n            setLoading(false);\r\n            setSuccess(true);\r\n        });\r\n    }\r\n\r\n    const checkErrors = () => {\r\n\r\n        let error = (isNameInvalid(name) || isAgeInvalid(age) || isPhoneInvalid(phone) || isEmailInvalid(email) || isLinkInvalid(link, inscriptionType.type != 'AUT'));\r\n\r\n        // Custom errors\r\n        if (!includesPoint('SI')) {\r\n            error = 'Debes confirmar tu asistencia y cumplimiento';\r\n        }\r\n\r\n        if (error) {\r\n            alert(error);\r\n            return true;\r\n        };\r\n\r\n        return false;\r\n    }\r\n\r\n    const includesPoint = (pointId) => {\r\n        return points.find(p => p == pointId);\r\n    }\r\n\r\n    const navigateTo = (index) => {\r\n        setActiveIndex(index);\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n        setSuccess(false);\r\n    }, [activeIndex]);\r\n\r\n    return (\r\n        <div>\r\n            <HelmetMetaData title=\"Leyendo tu obra en vivo - Temple Luna\" description=\"¿Quieres obras buenas? Acompáñanos en esta lectura en vivo y descubre los mejores escritos junto a Laydy Czulewyez.\" />\r\n            <Navbar />\r\n            <main className='main-body below-navbar colored-background'>\r\n                <section className='container-xl section position-relative z-3'>\r\n                    <h2 className='mb-0'>Gran lectura de obras en vivo</h2>\r\n                    <p className='txt-responsive-form w-60 w-md-75'>Con Laydy Czulewyez</p>\r\n                </section>\r\n                <section className='container-xl mt-3 position-relative'>\r\n                    <img src={ImgAutor} alt='img-fondo' className='img-fondo-formulario' />\r\n                    <div className='floating-form'>\r\n                        {\r\n                            success\r\n                                ?\r\n                                <div className='form-container text-align-center'>\r\n                                    <Fade bottom>\r\n                                        <FontAwesomeIcon color={'#3DE58D'} icon={faCheckCircle} style={{ fontSize: '8rem' }} />\r\n                                        <h3 className='mt-1 mb-1'>Listo</h3>\r\n                                    </Fade>\r\n                                    <p className='txt-responsive-form m0-auto'>¡No olvides unirte al grupo! Presiona el botón de abajo</p>\r\n                                    <FontAwesomeIcon icon={faAngleDown} size='2x' />\r\n\r\n                                    <div className='form-buttons-container mt-3'>\r\n                                        <a href=\"https://chat.whatsapp.com/DiLJJ3vkzU9I2yapuWlLvz\" className='button button-green m0-auto'>\r\n                                            <FontAwesomeIcon icon={faWhatsapp} size='1x' />\r\n                                            {' '}\r\n                                            <span>\r\n                                                Unirme\r\n                                            </span>\r\n                                        </a>\r\n                                    </div>\r\n                                </div>\r\n                                :\r\n                                <>\r\n                                    <Steps\r\n                                        activeIndex={activeIndex}\r\n                                        navigateTo={navigateTo}\r\n                                        steps={steps} />\r\n                                    <div className='form-container'>\r\n                                        <form>\r\n                                            <StepManager currentIndex={activeIndex}>\r\n                                                <div className='step-1'>\r\n\r\n                                                    <div className='form-group mb-0'>\r\n                                                        <h2>¡Bienvenido(a) a la dinámica!</h2>\r\n                                                        <p>¿Cansado de tanto cliché allá afuera? Nosotros también.<br /><br />\r\n                                                        Por eso, te invitamos a este espacio <b>en vivo</b> donde haremos <b>lectura y recomendación</b> de obras seleccionadas\r\n                                                            por Laczully, una <b>autora de gran experiencia</b>. Síguela en Wattpad desde <b><a target=\"_blank\" href=\"https://www.wattpad.com/user/Laczuly0711\">aquí</a></b>.<br /><br />\r\n                                                           En esta dinámica, <b>hay dos roles:</b> Puedes participar como <b>audiencia</b> y escuchar la mejor selección de obras, o puedes participar como <b>autor</b> e inscribir tu obra para ser leída.<br /><br />\r\n                                                           Laczully elegirá <b>seis obras para leer</b>, en base a su criterio. Si tu obra es <b>elegida</b> y no te <b>reportas</b> por el grupo, tu obra será <b>reemplazada por otra.</b><br /><br />\r\n                                                            Al final de tu inscripción, te aparecerá un botón para ingresar al <b>grupo de Whatsapp</b>. Inscríbete <b>solamente</b> si vas a asistir a la dinámica.<br /><br />\r\n\r\n                                                            <b>*Si te inscribes e incumples, ya no serás tenido en cuenta en otras dinámicas de Temple Luna.</b><br /><br />\r\n                                                        </p>\r\n                                                    </div>\r\n\r\n                                                    <div className='form-group'>\r\n                                                        <ul>\r\n                                                            <li><b>Número de obras a leer:</b> 6</li>\r\n                                                            <li><b>Autora:</b> Laydy Czulewyez</li>\r\n                                                            <li><b>Plataforma:</b> Google Meets</li>\r\n                                                            <li><b>Horarios:</b> Viernes 23 abril a las 4pm (Hora Lima - Colombia)</li>\r\n                                                        </ul>\r\n                                                    </div>\r\n\r\n                                                    <div className='form-group'>\r\n                                                        <p>Presiona siguiente para continuar.</p>\r\n                                                    </div>\r\n\r\n                                                </div>\r\n                                                <div className='step-2'>\r\n\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtNombres\">¿Cómo te llamas?</label>\r\n                                                        <input minLength=\"1\" maxLength=\"50\" type=\"text\" value={name} onChange={updName} id=\"txtNombres\" placeholder=\"Ingresa tus nombres\" />\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtEdad\">¿Qué edad tienes?</label>\r\n                                                        <input type=\"number\" min={10} max={99} value={age} onChange={updAge} id=\"txtEdad\" placeholder=\"Ingresa tu edad\" />\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtNumero\">¿Con qué número entrarás? (con código de país)</label>\r\n                                                        <div className='cbo-text'>\r\n                                                            <DropdownImage\r\n                                                                selectedItem={messengerType}\r\n                                                                list={[contactTypes[0]]}\r\n                                                                select={updMessengerType} />\r\n                                                            <input type=\"text\" value={phone} onChange={updPhone} id=\"txtNumero\" placeholder=\"Ej: +51 999 999 999\" />\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtCorreo\">Bríndanos tu correo de contacto</label>\r\n                                                        <input minLength=\"6\" maxLength=\"100\" type=\"email\" value={email} onChange={updEmail} id=\"txtCorreo\" placeholder=\"Ingresa tu correo\" />\r\n                                                    </div>\r\n\r\n                                                </div>\r\n                                                <div className='step-3'>\r\n\r\n                                                    <div className='form-group'>\r\n                                                        <div className='form-group'>\r\n                                                            <label htmlFor=\"txtLink\">¿Qué rol eliges?</label>\r\n                                                            <DropdownImage\r\n                                                                stretch\r\n                                                                selectedItem={inscriptionType}\r\n                                                                list={inscriptionTypes}\r\n                                                                select={updInscriptionType} />\r\n                                                        </div>\r\n                                                        {\r\n                                                            inscriptionType.type == 'AUT'\r\n                                                            &&\r\n                                                            <div className='form-group'>\r\n                                                                <label htmlFor=\"txtLink\">Link de tu obra</label>\r\n                                                                <input minLength=\"1\" maxLength=\"500\" type=\"text\" value={link} onChange={updLink} id=\"txtLink\" placeholder=\"Ingresa el link\" />\r\n                                                            </div>\r\n                                                        }\r\n                                                        <div className='form-group'>\r\n                                                            <label htmlFor=\"txtLink\">Confirmo mi asistencia a la lectura en vivo.</label>\r\n                                                            {\r\n                                                                chkPoints.map(point => {\r\n                                                                    const included = includesPoint(point.id);\r\n                                                                    return (\r\n                                                                        <div key={point.id} onClick={() => selectPoint(point.id)} className={`chkTag ${included ? 'active' : ''}`}>\r\n                                                                            {\r\n                                                                                included\r\n                                                                                    ?\r\n                                                                                    <FontAwesomeIcon color={'white'} icon={faCheck} style={{ fontSize: '1.6rem' }} />\r\n                                                                                    :\r\n                                                                                    <FontAwesomeIcon color={'#adadad'} icon={faDotCircle} style={{ fontSize: '1.6rem' }} />\r\n                                                                            }\r\n                                                                            {' '}\r\n                                                                            {point.name}\r\n                                                                        </div>\r\n                                                                    )\r\n                                                                })\r\n                                                            }\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </StepManager>\r\n                                            <div className='form-buttons-container'>\r\n                                                {\r\n                                                    canGoBackwards && !loading\r\n                                                    &&\r\n                                                    <button onClick={previous} className='button button-green'>\r\n                                                        <FontAwesomeIcon icon={faAngleLeft} size='xl' />\r\n                                                        {' '}\r\n                                                        <span className='d-none d-md-inline'>\r\n                                                            Anterior\r\n                                                    </span>\r\n                                                    </button>\r\n                                                }\r\n                                                {\r\n                                                    loading\r\n                                                        ?\r\n                                                        <span className='button button-green justify-self-right'>\r\n                                                            Enviando\r\n                                                            {' '}\r\n                                                            <ClipLoader color={'#fff'} loading={true} css={overrideSpinnerInline} size={22} />\r\n                                                        </span>\r\n                                                        :\r\n                                                        isLast\r\n                                                            ?\r\n                                                            <button onClick={send} className='button button-green justify-self-right'>\r\n                                                                <span className='d-none d-md-inline'>\r\n                                                                    Enviar\r\n                                                    </span>\r\n                                                                {' '}\r\n                                                                <FontAwesomeIcon icon={faCheck} size='xl' />\r\n                                                            </button>\r\n                                                            :\r\n                                                            <button onClick={next} className='button button-green justify-self-right'>\r\n                                                                <span className='d-none d-md-inline'>\r\n                                                                    Siguiente\r\n                                                    </span>\r\n                                                                {' '}\r\n                                                                <FontAwesomeIcon icon={faAngleRight} size='xl' />\r\n                                                            </button>\r\n                                                }\r\n                                            </div>\r\n                                        </form>\r\n                                    </div>\r\n                                </>\r\n                        }\r\n                    </div>\r\n\r\n                </section>\r\n            </main>\r\n            <Footer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Inscripcion;","C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\pages\\ins_evento_OBRA-PROFESIONAL-CCADENA-1.js",["357","358","359","360","361"],"C:\\Users\\Gricardov\\Desktop\\Temple Luna\\tlweb\\src\\helpers\\validators.js",["362"],"import { extractLink } from './functions';\r\n\r\nexport const isNameInvalid = (name, notRequired) => {\r\n    if (!name && !notRequired) {\r\n        return 'El nombre está vacío';\r\n    }\r\n    else if (!name && notRequired) {\r\n        return null;\r\n    }\r\n    else if (!(/^(?!\\s*$).{1,50}/.test(name))) {\r\n        return 'Tu nombre debe tener de 1 a 50 caracteres';\r\n    }\r\n    else if (!(/^[a-zA-Z\\sáéíóúñÑ]*$/.test(name))) {\r\n        return 'Tu nombre no puede tener caracteres especiales';\r\n    }\r\n}\r\n\r\nexport const isAgeInvalid = (age, notRequired) => {\r\n    if (!age && !notRequired) {\r\n        return 'La edad está vacía';\r\n    }\r\n    else if (!age && notRequired) {\r\n        return null;\r\n    }\r\n    else if (age < 10 || age > 99) {\r\n        return 'Introduce una edad válida';\r\n    }\r\n}\r\n\r\nexport const isPhoneInvalid = (phone, notRequired) => {\r\n    if (!phone && !notRequired) {\r\n        return 'El teléfono está vacío';\r\n    }\r\n    else if (!phone && notRequired) {\r\n        return null;\r\n    }\r\n    else if (!(/(^\\s*$)|(^[+]?[0-9 ]{7,20}$)/).test(phone)) {\r\n        return 'Introduce un teléfono válido';\r\n    }\r\n}\r\n\r\nexport const isEmailInvalid = (email, notRequired) => {\r\n    if (!email && !notRequired) {\r\n        return 'El correo está vacío';\r\n    }\r\n    else if (!email && notRequired) {\r\n        return null;\r\n    }\r\n    else if (!(/^(?!\\s*$).{6,100}/.test(email))) {\r\n        return 'Tu correo debe tener de 6 a 100 caracteres';\r\n    }\r\n    else if (!(/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/).test(email)) {\r\n        return 'Introduce un correo válido';\r\n    }\r\n}\r\n\r\nexport const isLinkInvalid = (link, notRequired) => {\r\n    if (!link && !notRequired) {\r\n        return 'El link está vacío';\r\n    }\r\n    else if (!link && notRequired) {\r\n        return null;\r\n    }\r\n    else if (!(/^(?!\\s*$).{1,500}/.test(link))) {\r\n        return 'Tu link debe tener de 1 a 500 caracteres';\r\n    } else if (!extractLink(link.trim())) {\r\n        return 'Parece que ese link no es válido. Revísalo bien';\r\n    }\r\n}\r\n\r\nexport const isTitleInvalid = (title, notRequired) => {\r\n    if (!title && !notRequired) {\r\n        return 'El título está vacío';\r\n    }\r\n    else if (!title && notRequired) {\r\n        return null;\r\n    }\r\n    else if (!(/^(?!\\s*$).{1,100}/.test(title))) {\r\n        return 'Tu título debe tener de 1 a 100 caracteres';\r\n    }\r\n}\r\n\r\nexport const isAuthorInvalid = (author, notRequired) => {\r\n    if (!author && !notRequired) {\r\n        return 'El autor está vacío';\r\n    }\r\n    else if (!author && notRequired) {\r\n        return null;\r\n    }\r\n    else if (!(/^(?!\\s*$).{1,100}/.test(author))) {\r\n        return 'Tu pseudónimo debe tener de 1 a 100 caracteres';\r\n    }\r\n}\r\n\r\nexport const isIntentionInvalid = (intention, notRequired) => {\r\n    if (!intention && !notRequired) {\r\n        return 'La intención está vacía';\r\n    }\r\n    else if (!intention && notRequired) {\r\n        return null;\r\n    }\r\n    else if (!(/^(?!\\s*$).{1,1000}/.test(intention))) {\r\n        return 'Lo que quieres transmitir debe tener de 1 a 1000 caracteres';\r\n    }\r\n}\r\n\r\nexport const isAboutInvalid = (about, notRequired) => {\r\n    if (!about && !notRequired) {\r\n        return 'El resumen de tu historía está vacío';\r\n    }\r\n    else if (!about && notRequired) {\r\n        return null;\r\n    }\r\n    else if (!(/^(?!\\s*$).{1,1000}/.test(about))) {\r\n        return 'El resumen de tu historia debe contener de 1 a 1000 caracteres';\r\n    }\r\n}",{"ruleId":"363","replacedBy":"364"},{"ruleId":"365","replacedBy":"366"},{"ruleId":"367","severity":1,"message":"368","line":47,"column":9,"nodeType":"369","messageId":"370","endLine":54,"endColumn":10},{"ruleId":"371","severity":1,"message":"372","line":72,"column":23,"nodeType":"373","messageId":"374","endLine":72,"endColumn":25},{"ruleId":"371","severity":1,"message":"372","line":96,"column":151,"nodeType":"373","messageId":"374","endLine":96,"endColumn":153},{"ruleId":"371","severity":1,"message":"372","line":96,"column":180,"nodeType":"373","messageId":"374","endLine":96,"endColumn":182},{"ruleId":"371","severity":1,"message":"372","line":113,"column":129,"nodeType":"373","messageId":"374","endLine":113,"endColumn":131},{"ruleId":"371","severity":1,"message":"372","line":113,"column":158,"nodeType":"373","messageId":"374","endLine":113,"endColumn":160},{"ruleId":"375","severity":1,"message":"376","line":156,"column":8,"nodeType":"377","endLine":156,"endColumn":42,"suggestions":"378"},{"ruleId":"379","severity":1,"message":"380","line":45,"column":26,"nodeType":"381","messageId":"382","endLine":45,"endColumn":27,"suggestions":"383"},{"ruleId":"371","severity":1,"message":"384","line":85,"column":20,"nodeType":"373","messageId":"374","endLine":85,"endColumn":22},{"ruleId":"371","severity":1,"message":"384","line":86,"column":48,"nodeType":"373","messageId":"374","endLine":86,"endColumn":50},{"ruleId":"371","severity":1,"message":"372","line":155,"column":35,"nodeType":"373","messageId":"374","endLine":155,"endColumn":37},{"ruleId":"385","severity":1,"message":"386","line":169,"column":45,"nodeType":"387","endLine":169,"endColumn":102},{"ruleId":"371","severity":1,"message":"372","line":187,"column":29,"nodeType":"373","messageId":"374","endLine":187,"endColumn":31},{"ruleId":"371","severity":1,"message":"372","line":285,"column":73,"nodeType":"373","messageId":"374","endLine":285,"endColumn":75},{"ruleId":"385","severity":1,"message":"386","line":163,"column":45,"nodeType":"387","endLine":163,"endColumn":102},{"ruleId":"388","severity":1,"message":"389","line":31,"column":12,"nodeType":"390","messageId":"391","endLine":31,"endColumn":19},{"ruleId":"388","severity":1,"message":"392","line":38,"column":12,"nodeType":"390","messageId":"391","endLine":38,"endColumn":18},{"ruleId":"371","severity":1,"message":"372","line":84,"column":20,"nodeType":"373","messageId":"374","endLine":84,"endColumn":22},{"ruleId":"375","severity":1,"message":"393","line":125,"column":8,"nodeType":"377","endLine":125,"endColumn":29,"suggestions":"394"},{"ruleId":"371","severity":1,"message":"372","line":197,"column":64,"nodeType":"373","messageId":"374","endLine":197,"endColumn":66},{"ruleId":"371","severity":1,"message":"372","line":197,"column":99,"nodeType":"373","messageId":"374","endLine":197,"endColumn":101},{"ruleId":"371","severity":1,"message":"372","line":199,"column":64,"nodeType":"373","messageId":"374","endLine":199,"endColumn":66},{"ruleId":"371","severity":1,"message":"372","line":199,"column":113,"nodeType":"373","messageId":"374","endLine":199,"endColumn":115},{"ruleId":"371","severity":1,"message":"372","line":209,"column":54,"nodeType":"373","messageId":"374","endLine":209,"endColumn":56},{"ruleId":"371","severity":1,"message":"372","line":209,"column":131,"nodeType":"373","messageId":"374","endLine":209,"endColumn":133},{"ruleId":"371","severity":1,"message":"372","line":221,"column":47,"nodeType":"373","messageId":"374","endLine":221,"endColumn":49},{"ruleId":"371","severity":1,"message":"372","line":239,"column":51,"nodeType":"373","messageId":"374","endLine":239,"endColumn":53},{"ruleId":"395","severity":1,"message":"396","line":246,"column":41,"nodeType":"387","endLine":246,"endColumn":121},{"ruleId":"367","severity":1,"message":"368","line":188,"column":13,"nodeType":"369","messageId":"370","endLine":195,"endColumn":14},{"ruleId":"371","severity":1,"message":"372","line":221,"column":27,"nodeType":"373","messageId":"374","endLine":221,"endColumn":29},{"ruleId":"371","severity":1,"message":"372","line":17,"column":38,"nodeType":"373","messageId":"374","endLine":17,"endColumn":40},{"ruleId":"388","severity":1,"message":"397","line":11,"column":43,"nodeType":"390","messageId":"391","endLine":11,"endColumn":55},{"ruleId":"371","severity":1,"message":"372","line":62,"column":39,"nodeType":"373","messageId":"374","endLine":62,"endColumn":41},{"ruleId":"371","severity":1,"message":"372","line":99,"column":50,"nodeType":"373","messageId":"374","endLine":99,"endColumn":52},{"ruleId":"398","severity":1,"message":"399","line":99,"column":66,"nodeType":"400","messageId":"401","endLine":99,"endColumn":68},{"ruleId":"398","severity":1,"message":"399","line":99,"column":81,"nodeType":"400","messageId":"401","endLine":99,"endColumn":83},{"ruleId":"371","severity":1,"message":"372","line":99,"column":97,"nodeType":"373","messageId":"374","endLine":99,"endColumn":99},{"ruleId":"371","severity":1,"message":"372","line":103,"column":69,"nodeType":"373","messageId":"374","endLine":103,"endColumn":71},{"ruleId":"371","severity":1,"message":"372","line":117,"column":50,"nodeType":"373","messageId":"374","endLine":117,"endColumn":52},{"ruleId":"385","severity":1,"message":"386","line":131,"column":41,"nodeType":"387","endLine":131,"endColumn":80},{"ruleId":"385","severity":1,"message":"386","line":142,"column":37,"nodeType":"387","endLine":142,"endColumn":103},{"ruleId":"371","severity":1,"message":"372","line":156,"column":55,"nodeType":"373","messageId":"374","endLine":156,"endColumn":57},{"ruleId":"371","severity":1,"message":"372","line":181,"column":66,"nodeType":"373","messageId":"374","endLine":181,"endColumn":68},{"ruleId":"371","severity":1,"message":"372","line":188,"column":70,"nodeType":"373","messageId":"374","endLine":188,"endColumn":72},{"ruleId":"371","severity":1,"message":"372","line":199,"column":62,"nodeType":"373","messageId":"374","endLine":199,"endColumn":64},{"ruleId":"388","severity":1,"message":"397","line":11,"column":51,"nodeType":"390","messageId":"391","endLine":11,"endColumn":63},{"ruleId":"371","severity":1,"message":"372","line":58,"column":39,"nodeType":"373","messageId":"374","endLine":58,"endColumn":41},{"ruleId":"371","severity":1,"message":"372","line":91,"column":50,"nodeType":"373","messageId":"374","endLine":91,"endColumn":52},{"ruleId":"398","severity":1,"message":"399","line":91,"column":66,"nodeType":"400","messageId":"401","endLine":91,"endColumn":68},{"ruleId":"398","severity":1,"message":"399","line":91,"column":81,"nodeType":"400","messageId":"401","endLine":91,"endColumn":83},{"ruleId":"371","severity":1,"message":"372","line":91,"column":97,"nodeType":"373","messageId":"374","endLine":91,"endColumn":99},{"ruleId":"371","severity":1,"message":"372","line":95,"column":69,"nodeType":"373","messageId":"374","endLine":95,"endColumn":71},{"ruleId":"385","severity":1,"message":"386","line":109,"column":37,"nodeType":"387","endLine":109,"endColumn":103},{"ruleId":"371","severity":1,"message":"372","line":136,"column":55,"nodeType":"373","messageId":"374","endLine":136,"endColumn":57},{"ruleId":"371","severity":1,"message":"372","line":161,"column":66,"nodeType":"373","messageId":"374","endLine":161,"endColumn":68},{"ruleId":"371","severity":1,"message":"372","line":168,"column":70,"nodeType":"373","messageId":"374","endLine":168,"endColumn":72},{"ruleId":"371","severity":1,"message":"372","line":179,"column":62,"nodeType":"373","messageId":"374","endLine":179,"endColumn":64},{"ruleId":"375","severity":1,"message":"402","line":36,"column":8,"nodeType":"377","endLine":36,"endColumn":15,"suggestions":"403"},{"ruleId":"404","severity":1,"message":"405","line":75,"column":41,"nodeType":"387","endLine":75,"endColumn":137},{"ruleId":"371","severity":1,"message":"372","line":94,"column":115,"nodeType":"373","messageId":"374","endLine":94,"endColumn":117},{"ruleId":"404","severity":1,"message":"405","line":50,"column":25,"nodeType":"387","endLine":50,"endColumn":72},{"ruleId":"371","severity":1,"message":"384","line":63,"column":47,"nodeType":"373","messageId":"374","endLine":63,"endColumn":49},{"ruleId":"371","severity":1,"message":"372","line":68,"column":57,"nodeType":"373","messageId":"374","endLine":68,"endColumn":59},{"ruleId":"371","severity":1,"message":"372","line":76,"column":46,"nodeType":"373","messageId":"374","endLine":76,"endColumn":48},{"ruleId":"371","severity":1,"message":"372","line":84,"column":47,"nodeType":"373","messageId":"374","endLine":84,"endColumn":49},{"ruleId":"371","severity":1,"message":"384","line":95,"column":23,"nodeType":"373","messageId":"374","endLine":95,"endColumn":25},{"ruleId":"388","severity":1,"message":"406","line":105,"column":9,"nodeType":"390","messageId":"391","endLine":105,"endColumn":15},{"ruleId":"371","severity":1,"message":"372","line":16,"column":39,"nodeType":"373","messageId":"374","endLine":16,"endColumn":41},{"ruleId":"371","severity":1,"message":"372","line":35,"column":42,"nodeType":"373","messageId":"374","endLine":35,"endColumn":44},{"ruleId":"398","severity":1,"message":"399","line":35,"column":58,"nodeType":"400","messageId":"401","endLine":35,"endColumn":60},{"ruleId":"398","severity":1,"message":"399","line":35,"column":73,"nodeType":"400","messageId":"401","endLine":35,"endColumn":75},{"ruleId":"371","severity":1,"message":"372","line":35,"column":89,"nodeType":"373","messageId":"374","endLine":35,"endColumn":91},{"ruleId":"371","severity":1,"message":"372","line":39,"column":61,"nodeType":"373","messageId":"374","endLine":39,"endColumn":63},{"ruleId":"371","severity":1,"message":"372","line":50,"column":33,"nodeType":"373","messageId":"374","endLine":50,"endColumn":35},{"ruleId":"371","severity":1,"message":"372","line":56,"column":38,"nodeType":"373","messageId":"374","endLine":56,"endColumn":40},{"ruleId":"371","severity":1,"message":"372","line":58,"column":40,"nodeType":"373","messageId":"374","endLine":58,"endColumn":42},{"ruleId":"371","severity":1,"message":"372","line":65,"column":44,"nodeType":"373","messageId":"374","endLine":65,"endColumn":46},{"ruleId":"371","severity":1,"message":"372","line":76,"column":38,"nodeType":"373","messageId":"374","endLine":76,"endColumn":40},{"ruleId":"371","severity":1,"message":"384","line":59,"column":74,"nodeType":"373","messageId":"374","endLine":59,"endColumn":76},{"ruleId":"404","severity":1,"message":"405","line":21,"column":50,"nodeType":"387","endLine":21,"endColumn":121},{"ruleId":"371","severity":1,"message":"372","line":15,"column":94,"nodeType":"373","messageId":"374","endLine":15,"endColumn":96},{"ruleId":"388","severity":1,"message":"407","line":1,"column":8,"nodeType":"390","messageId":"391","endLine":1,"endColumn":13},{"ruleId":"375","severity":1,"message":"408","line":10,"column":8,"nodeType":"377","endLine":10,"endColumn":13,"suggestions":"409"},{"ruleId":"388","severity":1,"message":"410","line":4,"column":10,"nodeType":"390","messageId":"391","endLine":4,"endColumn":18},{"ruleId":"388","severity":1,"message":"411","line":2,"column":8,"nodeType":"390","messageId":"391","endLine":2,"endColumn":25},{"ruleId":"388","severity":1,"message":"412","line":4,"column":8,"nodeType":"390","messageId":"391","endLine":4,"endColumn":14},{"ruleId":"388","severity":1,"message":"413","line":6,"column":10,"nodeType":"390","messageId":"391","endLine":6,"endColumn":22},{"ruleId":"388","severity":1,"message":"414","line":7,"column":10,"nodeType":"390","messageId":"391","endLine":7,"endColumn":21},{"ruleId":"388","severity":1,"message":"415","line":7,"column":23,"nodeType":"390","messageId":"391","endLine":7,"endColumn":37},{"ruleId":"388","severity":1,"message":"416","line":8,"column":10,"nodeType":"390","messageId":"391","endLine":8,"endColumn":20},{"ruleId":"388","severity":1,"message":"417","line":9,"column":10,"nodeType":"390","messageId":"391","endLine":9,"endColumn":21},{"ruleId":"388","severity":1,"message":"418","line":14,"column":32,"nodeType":"390","messageId":"391","endLine":14,"endColumn":39},{"ruleId":"388","severity":1,"message":"419","line":17,"column":7,"nodeType":"390","messageId":"391","endLine":17,"endColumn":15},{"ruleId":"388","severity":1,"message":"420","line":18,"column":7,"nodeType":"390","messageId":"391","endLine":18,"endColumn":12},{"ruleId":"388","severity":1,"message":"421","line":28,"column":13,"nodeType":"390","messageId":"391","endLine":28,"endColumn":19},{"ruleId":"367","severity":1,"message":"368","line":49,"column":5,"nodeType":"369","messageId":"370","endLine":60,"endColumn":6},{"ruleId":"371","severity":1,"message":"384","line":78,"column":44,"nodeType":"373","messageId":"374","endLine":78,"endColumn":46},{"ruleId":"371","severity":1,"message":"384","line":126,"column":157,"nodeType":"373","messageId":"374","endLine":126,"endColumn":159},{"ruleId":"371","severity":1,"message":"372","line":142,"column":35,"nodeType":"373","messageId":"374","endLine":142,"endColumn":37},{"ruleId":"385","severity":1,"message":"386","line":202,"column":142,"nodeType":"387","endLine":202,"endColumn":209},{"ruleId":"371","severity":1,"message":"372","line":263,"column":82,"nodeType":"373","messageId":"374","endLine":263,"endColumn":84},{"ruleId":"371","severity":1,"message":"384","line":68,"column":44,"nodeType":"373","messageId":"374","endLine":68,"endColumn":46},{"ruleId":"371","severity":1,"message":"372","line":129,"column":35,"nodeType":"373","messageId":"374","endLine":129,"endColumn":37},{"ruleId":"385","severity":1,"message":"386","line":201,"column":126,"nodeType":"387","endLine":201,"endColumn":237},{"ruleId":"385","severity":1,"message":"386","line":202,"column":139,"nodeType":"387","endLine":202,"endColumn":248},{"ruleId":"385","severity":1,"message":"386","line":203,"column":109,"nodeType":"387","endLine":203,"endColumn":201},{"ruleId":"379","severity":1,"message":"380","line":52,"column":22,"nodeType":"381","messageId":"382","endLine":52,"endColumn":23,"suggestions":"422"},"no-native-reassign",["423"],"no-negated-in-lhs",["424"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'requestData'. Either include it or remove the dependency array.","ArrayExpression",["425"],"no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["426","427"],"Expected '!==' and instead saw '!='.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","no-unused-vars","'success' is assigned a value but never used.","Identifier","unusedVar","'author' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'checkScroll'. Either include it or remove the dependency array.",["428"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'faLayerGroup' is defined but never used.","no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator","React Hook useEffect has a missing dependency: 'autoScroll'. Either include it or remove the dependency array.",["429"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'urlImg' is assigned a value but never used.","'React' is defined but never used.","React Hook useEffect has a missing dependency: 'avatarImg'. Either include it or remove the dependency array. You can also do a functional update 'setAvatarImg(a => ...)' if you only need 'avatarImg' in the 'setAvatarImg' call.",["430"],"'Redirect' is defined but never used.","'ConfirmationModal' is defined but never used.","'Avatar' is defined but never used.","'contactTypes' is defined but never used.","'getDateText' is defined but never used.","'getExpDateText' is defined but never used.","'useHistory' is defined but never used.","'designTypes' is defined but never used.","'faTimes' is defined but never used.","'iconSize' is assigned a value but never used.","'color' is assigned a value but never used.","'logged' is assigned a value but never used.",["431","432"],"no-global-assign","no-unsafe-negation",{"desc":"433","fix":"434"},{"messageId":"435","fix":"436","desc":"437"},{"messageId":"438","fix":"439","desc":"440"},{"desc":"441","fix":"442"},{"desc":"443","fix":"444"},{"desc":"445","fix":"446"},{"messageId":"435","fix":"447","desc":"437"},{"messageId":"438","fix":"448","desc":"440"},"Update the dependencies array to be: [activeTabIndex, requestData, requestType.type]",{"range":"449","text":"450"},"removeEscape",{"range":"451","text":"452"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"453","text":"454"},"Replace the `\\` with `\\\\` to include the actual backslash character.","Update the dependencies array to be: [checkScroll, hasScrolledToOffset]",{"range":"455","text":"456"},"Update the dependencies array to be: [autoScroll, index]",{"range":"457","text":"458"},"Update the dependencies array to be: [avatarImg, img]",{"range":"459","text":"460"},{"range":"461","text":"452"},{"range":"462","text":"454"},[6560,6594],"[activeTabIndex, requestData, requestType.type]",[1446,1447],"",[1446,1446],"\\",[4624,4645],"[checkScroll, hasScrolledToOffset]",[1144,1151],"[autoScroll, index]",[309,314],"[avatarImg, img]",[1472,1473],[1472,1472]]