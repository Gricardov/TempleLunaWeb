[{"C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\index.js":"1","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\TLApp.js":"2","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\navbar\\index.js":"3","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\navbar\\navbar.js":"4","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\footer\\footer.js":"5","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\tag\\index.js":"6","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\tag\\tag.js":"7","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\context\\DrawerContext.js":"8","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\pages\\Inicio.js":"9","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\drawer\\index.js":"10","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\drawer\\drawer.js":"11","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\pages\\inicio.js":"12","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\pages\\login.js":"13","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\pages\\solicitud-critica.js":"14","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\pages\\solicitud-diseno.js":"15","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\hooks\\useOutsideListener.js":"16","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\forms\\forms-steps\\index.js":"17","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\forms\\forms-steps\\form-steps.js":"18","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\hooks\\useStepObserver.js":"19","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\forms\\step-manager\\step-manager.js":"20","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\api.js":"21","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\firebase.js":"22","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\pages\\admin.js":"23","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\customRouter\\privateRoute.js":"24","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\context\\AuthContext.js":"25","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\customRouter\\publicRoute.js":"26","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\story-card\\index.js":"27","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\story-card\\story_card.js":"28","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\home-panorama\\panorama.js":"29","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\stories-carrousel\\carrousel.js":"30","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\dropdown-image\\index.js":"31","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\dropdown-image\\dropdown.js":"32","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\loading-screen\\index.js":"33","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\loading-screen\\loading-screen.js":"34","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\request-card\\index.js":"35","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\request-card\\card.js":"36","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\avatar\\index.js":"37","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\avatar\\avatar.js":"38","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\modal\\designDetail.js":"39","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\data\\data.js":"40","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\tabs\\index.js":"41","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\tabs\\tabs.js":"42","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\modal\\critiqueDetail.js":"43","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\modal\\confirmationModal.js":"44"},{"size":358,"mtime":1612154583817,"results":"45","hashOfConfig":"46"},{"size":1125,"mtime":1612501717976,"results":"47","hashOfConfig":"46"},{"size":35,"mtime":1610169602941,"results":"48","hashOfConfig":"46"},{"size":2745,"mtime":1612648808268,"results":"49","hashOfConfig":"46"},{"size":1689,"mtime":1611974876703,"results":"50","hashOfConfig":"46"},{"size":32,"mtime":1610813286511,"results":"51","hashOfConfig":"46"},{"size":251,"mtime":1610819468986,"results":"52","hashOfConfig":"46"},{"size":924,"mtime":1612329952620,"results":"53","hashOfConfig":"46"},{"size":4743,"mtime":1611790444545,"results":"54","hashOfConfig":"46"},{"size":35,"mtime":1611783381168,"results":"55","hashOfConfig":"46"},{"size":2143,"mtime":1612647679304,"results":"56","hashOfConfig":"46"},{"size":4926,"mtime":1612489601931,"results":"57","hashOfConfig":"46"},{"size":3681,"mtime":1612327140010,"results":"58","hashOfConfig":"46"},{"size":18902,"mtime":1612743192326,"results":"59","hashOfConfig":"46"},{"size":20370,"mtime":1612742036089,"results":"60","hashOfConfig":"46"},{"size":912,"mtime":1611959484976,"results":"61","hashOfConfig":"46"},{"size":39,"mtime":1611877771633,"results":"62","hashOfConfig":"46"},{"size":834,"mtime":1611881968391,"results":"63","hashOfConfig":"46"},{"size":651,"mtime":1611963889219,"results":"64","hashOfConfig":"46"},{"size":230,"mtime":1611891779839,"results":"65","hashOfConfig":"46"},{"size":4384,"mtime":1612847094677,"results":"66","hashOfConfig":"46"},{"size":659,"mtime":1612134803982,"results":"67","hashOfConfig":"46"},{"size":5155,"mtime":1612756678434,"results":"68","hashOfConfig":"46"},{"size":573,"mtime":1612489837260,"results":"69","hashOfConfig":"46"},{"size":749,"mtime":1612492920141,"results":"70","hashOfConfig":"46"},{"size":572,"mtime":1612489840982,"results":"71","hashOfConfig":"46"},{"size":39,"mtime":1610293845546,"results":"72","hashOfConfig":"46"},{"size":746,"mtime":1610429606771,"results":"73","hashOfConfig":"46"},{"size":1358,"mtime":1612829661812,"results":"74","hashOfConfig":"46"},{"size":3936,"mtime":1612489526320,"results":"75","hashOfConfig":"46"},{"size":37,"mtime":1611812649805,"results":"76","hashOfConfig":"46"},{"size":2439,"mtime":1611957928645,"results":"77","hashOfConfig":"46"},{"size":43,"mtime":1612489867120,"results":"78","hashOfConfig":"46"},{"size":596,"mtime":1612492857705,"results":"79","hashOfConfig":"46"},{"size":33,"mtime":1612493180152,"results":"80","hashOfConfig":"46"},{"size":1187,"mtime":1612738704182,"results":"81","hashOfConfig":"46"},{"size":35,"mtime":1612494927695,"results":"82","hashOfConfig":"46"},{"size":459,"mtime":1612495138270,"results":"83","hashOfConfig":"46"},{"size":4807,"mtime":1612762426122,"results":"84","hashOfConfig":"46"},{"size":879,"mtime":1612846586058,"results":"85","hashOfConfig":"46"},{"size":32,"mtime":1612743758990,"results":"86","hashOfConfig":"46"},{"size":1524,"mtime":1612743778810,"results":"87","hashOfConfig":"46"},{"size":4270,"mtime":1612762232694,"results":"88","hashOfConfig":"46"},{"size":1384,"mtime":1612762018626,"results":"89","hashOfConfig":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},"1y5mdia",{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"92"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"92"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"92"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"92"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"92"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"92"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"92"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"92"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"92"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"92"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"92"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"92"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"92"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"92"},"C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\index.js",[],["193","194"],"C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\TLApp.js",["195"],"import React from 'react'\nimport Inicio from './pages/inicio'\nimport Login from './pages/login'\nimport Admin from './pages/admin'\nimport SolicitudCritica from './pages/solicitud-critica'\nimport SolicitudDiseno from './pages/solicitud-diseno'\nimport Drawer from './componentes/drawer'\nimport { AuthProvider } from './context/AuthContext'\nimport { PrivateRoute } from './componentes/customRouter/privateRoute'\nimport { PublicRoute } from './componentes/customRouter/publicRoute'\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\"\n\nconst App = () => {\n\n  return (\n    <AuthProvider>\n      <Router>\n        <Drawer />\n        <Switch>\n          <PublicRoute exact path=\"/\" component={Inicio} />\n          <PublicRoute exact path=\"/sol_critica\" component={SolicitudCritica} />\n          <PublicRoute exact path=\"/sol_diseno\" component={SolicitudDiseno} />\n          <PublicRoute exact path=\"/login\" component={Login} />\n          <PrivateRoute exact path=\"/admin\" component={Admin} />\n          <Redirect to=\"/\" />\n        </Switch>\n      </Router>\n    </AuthProvider>\n  );\n}\n\nexport default App;\n","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\navbar\\index.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\navbar\\navbar.js",["196"],"import React, { useContext, useEffect } from 'react'\r\nimport { useHistory } from \"react-router-dom\"\r\nimport { logout } from '../../api'\r\nimport { Link } from \"react-router-dom\"\r\nimport { DrawerContext } from '../../context/DrawerContext'\r\nimport { AuthContext } from '../../context/AuthContext'\r\nimport Logo from '../../img/logo.png'\r\nimport Sanguchito from '../../img/sanguchito.svg'\r\nimport './navbar.css'\r\n\r\nconst Navbar = ({ startTransparent }) => {\r\n\r\n    const { open, close } = useContext(DrawerContext);\r\n    const { logged } = useContext(AuthContext);\r\n    let history = useHistory();\r\n\r\n    const [scrolled, setScrolled] = React.useState(false);\r\n\r\n    const handleScroll = () => {\r\n        const offset = window.scrollY\r\n        if (offset > 20) {\r\n            setScrolled(true)\r\n        } else {\r\n            setScrolled(false)\r\n        }\r\n    }\r\n\r\n    const logoutUser = (e) => {\r\n        e.preventDefault();\r\n        logout()\r\n            .then(res => {\r\n                if (res) {\r\n                    close();\r\n                    history.push('/login');\r\n                }\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\", handleScroll)\r\n        return () => window.removeEventListener(\"scroll\", handleScroll)\r\n    }, [scrolled]);\r\n\r\n    let clasesNav = 'main-navbar';\r\n    if (!startTransparent || scrolled) {\r\n        clasesNav += ' navbar-scrolled';\r\n    }\r\n\r\n    return (\r\n        <nav className={clasesNav}>\r\n            <div className='container-xl container-navbar'>\r\n                <Link to='/' className='logo-header'>\r\n                    <img alt='logo' src={Logo} />\r\n                </Link>\r\n                <img alt='sanguchito' onClick={open} src={Sanguchito} className='img-sanguchito' />\r\n                <div className='navbar-nav'>\r\n                    {\r\n                        logged\r\n                            ?\r\n                            <a onClick={logoutUser} className='btn-nav'>\r\n                                Salir\r\n                            </a>\r\n                            :\r\n                            <>\r\n                                <Link to='/sol_critica' className='btn-nav'>\r\n                                    Críticas\r\n                                </Link>\r\n                                <Link to='/sol_diseno' className='btn-nav'>\r\n                                    Diseños\r\n                                </Link>\r\n                                <Link to='/login' className='btn-nav'>\r\n                                    Login\r\n                                </Link>\r\n                            </>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;\r\n","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\footer\\footer.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\tag\\index.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\tag\\tag.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\context\\DrawerContext.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\pages\\Inicio.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\drawer\\index.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\drawer\\drawer.js",["197"],"import React, { useEffect, useContext } from 'react'\r\nimport { DrawerContext } from '../../context/DrawerContext'\r\nimport { AuthContext } from '../../context/AuthContext'\r\nimport { useHistory } from \"react-router-dom\"\r\nimport { Link } from \"react-router-dom\"\r\nimport { logout } from '../../api'\r\nimport './drawer.css'\r\n\r\nconst Drawer = () => {\r\n\r\n    const { logged } = useContext(AuthContext);\r\n    const { isOpen, close } = useContext(DrawerContext);\r\n    let history = useHistory();\r\n\r\n    const logoutUser = (e) => {\r\n        e.preventDefault();\r\n        logout()\r\n            .then(res => {\r\n                if (res) {\r\n                    close();\r\n                    history.push('/login');\r\n                }\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isOpen) {\r\n            document.body.style.overflow = 'hidden';\r\n        } else {\r\n            document.body.style.overflow = 'unset';\r\n        }\r\n    }, [isOpen]);\r\n\r\n    let styles = '';\r\n    if (isOpen) {\r\n        styles = 'open';\r\n    } else {\r\n        styles = 'close';\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={'overlay ' + styles} onClick={close}>\r\n            </div>\r\n            <div className={'drawer ' + styles}>\r\n                {\r\n                    logged\r\n                        ?\r\n                        <a onClick={logoutUser} className='btn-drawer'>\r\n                            Salir\r\n                        </a>\r\n                        :\r\n                        <>\r\n                            <Link to='/sol_critica' onClick={close} className='btn-drawer'>\r\n                                Pide tu crítica\r\n                            </Link>\r\n                            <Link to='/sol_diseno' onClick={close} className='btn-drawer'>\r\n                                Pide tu diseño\r\n                            </Link>\r\n                            <Link to='/login' onClick={close} className='btn-drawer'>\r\n                                Login de creativos\r\n                            </Link>\r\n                        </>\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Drawer;","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\pages\\inicio.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\pages\\login.js",["198","199"],"import React, { useState, useEffect } from 'react'\r\nimport Navbar from '../componentes/navbar';\r\nimport Footer from '../componentes/footer/footer';\r\nimport ImgColumpio from '../img/swinging.svg';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { login } from '../api';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSignInAlt } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst Login = () => {\r\n\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    let history = useHistory();\r\n\r\n    const updEmail = (e) => {\r\n        setEmail(e.target.value);\r\n    }\r\n\r\n    const updPassword = (e) => {\r\n        setPassword(e.target.value);\r\n    }\r\n\r\n    const loginUser = (e) => {\r\n        e.preventDefault();\r\n        if (!checkErrors()) {\r\n            login(email, password)\r\n                .then(({ user, error }) => {\r\n                    if (user) {\r\n                        history.push('/admin');\r\n                    } else {\r\n                        alert(error);\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n    const checkErrors = () => {\r\n        if (!(/^(?!\\s*$).{1,50}/.test(email))) {\r\n            alert('Tu correo debe tener de 1 a 50 caracteres');\r\n            return true;\r\n        }\r\n        else if (!(/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/).test(email)) {\r\n            alert('Introduce un correo válido');\r\n            return true;\r\n        }\r\n\r\n        if (!(/^(?!\\s*$).{1,50}/.test(password))) {\r\n            alert('Tu contraseña debe tener de 1 a 50 caracteres');\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Navbar />\r\n            <main className='main-body below-navbar colored-background'>\r\n                <section className='container-xl mt-5'>\r\n                    <div className='login-container position-relative'>\r\n                        <img src={ImgColumpio} alt='img-fondo' className='img-fondo-login d-none d-md-block' />\r\n                        <div className='floating-form'>\r\n                            <h2 className='m-0'>Ingresa a Temple Luna</h2>\r\n                            <p className='mb-3'>Si quieres pertenecer a nosotros, escríbenos por el grupo</p>\r\n                            <form>\r\n                                <div className='form-group'>\r\n                                    <label htmlFor=\"txtUsuario\">Correo</label>\r\n                                    <input minLength=\"1\" maxLength=\"50\" type=\"email\" value={email} onChange={updEmail} id=\"txtUsuario\" placeholder=\"Ingresa tu correo\" />\r\n                                </div>\r\n                                <div className='form-group'>\r\n                                    <label htmlFor=\"txtContrasena\">Contraseña</label>\r\n                                    <input minLength=\"1\" maxLength=\"50\" type=\"password\" value={password} onChange={updPassword} id=\"txtContrasena\" placeholder=\"****************\" />\r\n                                </div>\r\n                                <button onClick={loginUser} className='button button-green stretch'>\r\n                                    <span className='d-inline'>\r\n                                        Entrar\r\n                                    </span>\r\n                                    {' '}\r\n                                    <FontAwesomeIcon icon={faSignInAlt} size='xl' />\r\n                                </button>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            </main>\r\n            <Footer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\pages\\solicitud-critica.js",["200","201","202","203"],"import React, { useState, useEffect } from 'react'\r\nimport Footer from '../componentes/footer/footer';\r\nimport Navbar from '../componentes/navbar';\r\nimport DropdownImage from '../componentes/dropdown-image';\r\nimport ImgLeyendo from '../img/sitting-reading.svg';\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport Steps from '../componentes/forms/forms-steps';\r\nimport StepManager from '../componentes/forms/step-manager/step-manager';\r\nimport Fade from 'react-reveal/Fade';\r\nimport { Link } from 'react-router-dom';\r\nimport { critiquePoints } from '../data/data';\r\nimport { getGeneratedId, saveRequest } from '../api';\r\nimport { useStepObserver } from '../hooks/useStepObserver';\r\nimport { css } from \"@emotion/core\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faAngleLeft, faAngleRight, faCheck, faCheckCircle, faHome, faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { contactTypes } from '../data/data';\r\n\r\nconst steps = ['Contacto', 'Obra', 'Contenido'];\r\nconst chkPoints = critiquePoints;\r\n\r\nconst overrideSpinnerInline = css`\r\n  display: inline-block;\r\n`;\r\n\r\nconst Solicitud = () => {\r\n\r\n    const [activeIndex, setActiveIndex] = useState(0);\r\n    const [loading, setLoading] = useState(false); // Determina si se está enviando el form\r\n    const [success, setSuccess] = useState(true); // Determina si se envío el form sin errores\r\n    const { canGoBackwards, isLast } = useStepObserver(activeIndex, steps.length);\r\n\r\n    const [name, setName] = useState('');\r\n    const [age, setAge] = useState('');\r\n    const [phone, setPhone] = useState('');\r\n    const [messengerType, setMessengerType] = useState('WSP');\r\n    const [email, setEmail] = useState('');\r\n    const [link, setLink] = useState('');\r\n    const [title, setTitle] = useState('');\r\n    const [about, setAbout] = useState('');\r\n    const [intention, setIntention] = useState('');\r\n    const [points, setPoints] = useState(['INTENCION']);\r\n\r\n    const updName = (e) => {\r\n        setName(e.target.value);\r\n    }\r\n\r\n    const updAge = (e) => {\r\n        setAge(e.target.value);\r\n    }\r\n\r\n    const updPhone = (e) => {\r\n        setPhone(e.target.value);\r\n    }\r\n\r\n    const updMessengerType = (val) => {\r\n        setMessengerType(val);\r\n    }\r\n\r\n    const updEmail = (e) => {\r\n        setEmail(e.target.value);\r\n    }\r\n\r\n    const updLink = (e) => {\r\n        setLink(e.target.value);\r\n    }\r\n\r\n    const updTitle = (e) => {\r\n        setTitle(e.target.value);\r\n    }\r\n\r\n    const updAbout = (e) => {\r\n        setAbout(e.target.value);\r\n    }\r\n\r\n    const updIntention = (e) => {\r\n        setIntention(e.target.value);\r\n    }\r\n\r\n    const selectPoint = (id) => {\r\n        if (includesPoint(id)) {\r\n            if (id != 'INTENCION') {\r\n                setPoints(points.filter(p => p != id));\r\n            }\r\n        } else {\r\n            setPoints([...points, id]);\r\n        }\r\n    }\r\n\r\n    const previous = (e) => {\r\n        e.preventDefault();\r\n        navigateTo(activeIndex - 1);\r\n    }\r\n\r\n    const next = (e) => {\r\n        e.preventDefault();\r\n        navigateTo(activeIndex + 1);\r\n    }\r\n\r\n    const send = (e) => {\r\n        e.preventDefault();\r\n        if (!checkErrors()) {\r\n            const generatedId = getGeneratedId('solicitudes');\r\n            setLoading(true);\r\n            saveChanges(generatedId);\r\n        }\r\n    }\r\n\r\n    const saveChanges = (generatedId) => {\r\n        const data = {\r\n            name: name.trim(),\r\n            age: parseInt(age),\r\n            phone: phone.trim(),\r\n            messengerType,\r\n            email: email.trim(),\r\n            title: title.trim(),\r\n            link: link.trim(),\r\n            about: about.trim(),\r\n            intention: intention.trim(),\r\n            points,\r\n            type: 'CRITICA',\r\n            status: 'DISPONIBLE'\r\n        };\r\n\r\n        saveRequest(generatedId, { ...data, active: 1 }).then(() => {\r\n            window.scrollTo(0, 0);\r\n            setLoading(false);\r\n            setSuccess(true);\r\n        })\r\n    }\r\n\r\n    const checkErrors = () => {\r\n\r\n        // Name\r\n        if (!(/^(?!\\s*$).{1,50}/.test(name))) {\r\n            alert('Tu nombre debe tener de 1 a 50 caracteres');\r\n            return true;\r\n        }\r\n        else if (!(/^[a-zA-Z\\sáéíóúñÑ]*$/.test(name))) {\r\n            alert('Tu nombre no puede tener caracteres especiales');\r\n            return true;\r\n        }\r\n\r\n        // Age\r\n        if (!age || age < 10 || age > 99) {\r\n            alert('Introduce una edad válida');\r\n            return true;\r\n        }\r\n\r\n        // Phone\r\n        if (!(/(^\\s*$)|(^[+]?[0-9 ]{7,20}$)/).test(phone)) {\r\n            alert('Introduce un teléfono válido');\r\n            return true;\r\n        }\r\n\r\n        if (!(/^(?!\\s*$).{6,100}/.test(email))) {\r\n            alert('Tu correo debe tener de 6 a 100 caracteres');\r\n            return true;\r\n        }\r\n        else if (!(/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/).test(email)) {\r\n            alert('Introduce un correo válido');\r\n            return true;\r\n        }\r\n\r\n        // Link\r\n        if (!(/^(?!\\s*$).{1,500}/.test(link))) {\r\n            alert('Tu link debe tener de 1 a 500 caracteres');\r\n            return true;\r\n        }\r\n\r\n        // Title\r\n        if (!(/^(?!\\s*$).{1,100}/.test(title))) {\r\n            alert('Tu título debe tener de 1 a 100 caracteres');\r\n            return true;\r\n        }\r\n\r\n        // About\r\n        if (!(/^(?!\\s*$).{1,1000}/.test(about))) {\r\n            alert('El resumen de tu historia debe contener de 1 a 1000 caracteres');\r\n            return true;\r\n        }\r\n\r\n        // Intention\r\n        if (!(/^(?!\\s*$).{1,1000}/.test(intention))) {\r\n            alert('Lo que quieres transmitir debe tener de 1 a 1000 caracteres');\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    const includesPoint = (pointId) => {\r\n        return points.find(p => p == pointId);\r\n    }\r\n\r\n    const navigateTo = (index) => {\r\n        setActiveIndex(index);\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n        setSuccess(false);\r\n    }, [activeIndex])\r\n\r\n    return (\r\n        <div>\r\n            <Navbar />\r\n            <main className='main-body below-navbar colored-background'>\r\n                <section className='container-xl section'>\r\n                    <h2 className='mb-0'>Pide una crítica</h2>\r\n                    <p className='txt-responsive-form'>Y serás contactado(a) por un gran intelectual</p>\r\n                </section>\r\n                <section className='container-xl mt-5 position-relative'>\r\n                    <img src={ImgLeyendo} alt='img-fondo' className='img-fondo-formulario' />\r\n\r\n                    <div className='floating-form'>\r\n                        {\r\n                            success\r\n                                ?\r\n                                <div className='form-container text-align-center'>\r\n                                    <Fade bottom>\r\n                                        <FontAwesomeIcon color={'#3DE58D'} icon={faCheckCircle} style={{ fontSize: '8rem' }} />\r\n                                        <h3 className='mt-1 mb-1'>Listo</h3>\r\n                                    </Fade>\r\n                                    <p className='txt-responsive-form m0-auto'>En menos de 3 días te contactaremos</p>\r\n                                    <div className='form-buttons-container mt-3'>\r\n                                        <Link to={'inicio'} className='button button-green m0-auto'>\r\n                                            <FontAwesomeIcon icon={faHome} size='xl' />\r\n                                            {' '}\r\n                                            <span className='d-none d-md-inline'>\r\n                                                Regresar\r\n                                            </span>\r\n                                        </Link>\r\n                                    </div>\r\n                                </div>\r\n                                :\r\n                                <>\r\n                                    <Steps\r\n                                        activeIndex={activeIndex}\r\n                                        navigateTo={navigateTo}\r\n                                        steps={steps} />\r\n                                    <div className='form-container'>\r\n                                        <form>\r\n                                            <StepManager currentIndex={activeIndex}>\r\n                                                <div className='step-1'>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtNombres\">¿Cómo te llamas?</label>\r\n                                                        <input minLength=\"1\" maxLength=\"50\" type=\"text\" value={name} onChange={updName} id=\"txtNombres\" placeholder=\"Ingresa tus nombres\" />\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtEdad\">¿Qué edad tienes?</label>\r\n                                                        <input type=\"number\" min={10} max={99} value={age} onChange={updAge} id=\"txtEdad\" placeholder=\"Ingresa tu edad\" />\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtNumero\">Bríndanos un número si hay consultas</label>\r\n                                                        <div className='cbo-text'>\r\n                                                            <DropdownImage\r\n                                                                list={contactTypes}\r\n                                                                select={updMessengerType} />\r\n                                                            <input type=\"text\" value={phone} onChange={updPhone} id=\"txtNumero\" placeholder=\"Ej: +51 999 999 999\" />\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtCorreo\">Bríndanos un correo para enviarte el trabajo</label>\r\n                                                        <input minLength=\"6\" maxLength=\"100\" type=\"email\" value={email} onChange={updEmail} id=\"txtCorreo\" placeholder=\"Ingresa tu correo\" />\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className='step-2'>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtTitulo\">Título de tu obra</label>\r\n                                                        <input minLength=\"1\" maxLength=\"100\" type=\"text\" value={title} onChange={updTitle} id=\"txtTitulo\" placeholder=\"Ejemplo: La gran infidelidad\" />\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtLink\">Link de tu obra</label>\r\n                                                        <input minLength=\"1\" maxLength=\"500\" type=\"text\" value={link} onChange={updLink} id=\"txtLink\" placeholder=\"Ingresa el link\" />\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className='step-3'>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtAcerca\">En general ¿De qué trata tu obra?</label>\r\n                                                        <textarea minLength=\"1\" maxLength=\"1000\" rows=\"4\" value={about} onChange={updAbout} id=\"txtAcerca\" placeholder=\"Ejemplo: Mi obra trata sobre las ocurrencias vividas con mi primer amor y el dolor causado por su posterior traición...\"></textarea>                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtIntencion\">¿Qué intención deseas transmitir?</label>\r\n                                                        <textarea minLength=\"1\" maxLength=\"1000\" rows=\"4\" value={intention} onChange={updIntention} id=\"txtIntencion\" placeholder=\"Ejemplo: Deseo transmitir miedo e incertidumbre, por medio de una historia ambientada en una pandemia mundial...\"></textarea>\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtLink\">¿Qué puntos tocamos en la crítica?</label>\r\n                                                        {\r\n                                                            chkPoints.map(point => {\r\n                                                                const included = includesPoint(point.id);\r\n                                                                return (\r\n                                                                    <div key={point.id} onClick={() => selectPoint(point.id)} className={`chkTag ${included ? 'active' : ''}`}>\r\n                                                                        {\r\n                                                                            included\r\n                                                                                ?\r\n                                                                                <FontAwesomeIcon color={'white'} icon={faCheck} style={{ fontSize: '1.6rem' }} />\r\n                                                                                :\r\n                                                                                <FontAwesomeIcon color={'#adadad'} icon={faPlus} style={{ fontSize: '1.6rem' }} />\r\n                                                                        }\r\n                                                                        {' '}\r\n                                                                        {point.name}\r\n                                                                    </div>\r\n                                                                )\r\n                                                            })\r\n                                                        }\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"chkPortafolio\">Si tu obra es muy larga, el crítico acordará contigo hasta donde llegará. El artista podrá usar la crítica en su propio portafolio.</label>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </StepManager>\r\n                                            <div className='form-buttons-container'>\r\n                                                {\r\n                                                    canGoBackwards && !loading\r\n                                                    &&\r\n                                                    <button onClick={previous} className='button button-green'>\r\n                                                        <FontAwesomeIcon icon={faAngleLeft} size='xl' />\r\n                                                        {' '}\r\n                                                        <span className='d-none d-md-inline'>\r\n                                                            Anterior\r\n                                                    </span>\r\n                                                    </button>\r\n                                                }\r\n                                                {\r\n                                                    loading\r\n                                                        ?\r\n                                                        <span className='button button-green justify-self-right'>\r\n                                                            Enviando\r\n                                                            {' '}\r\n                                                            <ClipLoader color={'#fff'} loading={true} css={overrideSpinnerInline} size={22} />\r\n                                                        </span>\r\n                                                        :\r\n                                                        isLast\r\n                                                            ?\r\n                                                            <button onClick={send} className='button button-green justify-self-right'>\r\n                                                                <span className='d-none d-md-inline'>\r\n                                                                    Enviar\r\n                                                    </span>\r\n                                                                {' '}\r\n                                                                <FontAwesomeIcon icon={faCheck} size='xl' />\r\n                                                            </button>\r\n                                                            :\r\n                                                            <button onClick={next} className='button button-green justify-self-right'>\r\n                                                                <span className='d-none d-md-inline'>\r\n                                                                    Siguiente\r\n                                                    </span>\r\n                                                                {' '}\r\n                                                                <FontAwesomeIcon icon={faAngleRight} size='xl' />\r\n                                                            </button>\r\n                                                }\r\n                                            </div>\r\n                                        </form>\r\n                                    </div>\r\n                                </>\r\n                        }\r\n                    </div>\r\n\r\n                </section>\r\n            </main>\r\n            <Footer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Solicitud;","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\pages\\solicitud-diseno.js",["204"],"import React, { useRef, useState, useEffect } from 'react'\r\nimport Footer from '../componentes/footer/footer';\r\nimport Navbar from '../componentes/navbar';\r\nimport DropdownImage from '../componentes/dropdown-image';\r\nimport ImgBailando from '../img/dancing.svg';\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport Steps from '../componentes/forms/forms-steps';\r\nimport StepManager from '../componentes/forms/step-manager/step-manager';\r\nimport Fade from 'react-reveal/Fade';\r\nimport { Link } from 'react-router-dom';\r\nimport { getGeneratedId, uploadImage, saveRequest } from '../api';\r\nimport { useStepObserver } from '../hooks/useStepObserver';\r\nimport { css } from \"@emotion/core\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faAngleLeft, faAngleRight, faCheck, faCheckCircle, faHome } from '@fortawesome/free-solid-svg-icons';\r\nimport { designTypes, contactTypes } from '../data/data';\r\n\r\nconst steps = ['Contacto', 'Tipo', 'Trasfondo'];\r\nconst maxFileSize = 5242880;\r\n\r\nconst overrideSpinnerInline = css`\r\n  display: inline-block;\r\n`;\r\n\r\nconst Solicitud = () => {\r\n\r\n    const refBoceto = useRef(null);\r\n\r\n    const [activeIndex, setActiveIndex] = useState(0);\r\n    const [loading, setLoading] = useState(false); // Determina si se está enviando el form\r\n    const [success, setSuccess] = useState(true); // Determina si se envío el form sin errores\r\n    const { canGoBackwards, isLast } = useStepObserver(activeIndex, steps.length);\r\n\r\n    const [name, setName] = useState('');\r\n    const [age, setAge] = useState('');\r\n    const [phone, setPhone] = useState('');\r\n    const [messengerType, setMessengerType] = useState('WSP');\r\n    const [email, setEmail] = useState('');\r\n    const [designType, setDesignType] = useState('POR');\r\n    const [link, setLink] = useState('');\r\n    const [title, setTitle] = useState('');\r\n    const [author, setAuthor] = useState('');\r\n    const [intention, setIntention] = useState('');\r\n    const [imgSample, setImgSample] = useState(null);\r\n\r\n    const updName = (e) => {\r\n        setName(e.target.value);\r\n    }\r\n\r\n    const updAge = (e) => {\r\n        setAge(e.target.value);\r\n    }\r\n\r\n    const updPhone = (e) => {\r\n        setPhone(e.target.value);\r\n    }\r\n\r\n    const updMessengerType = (val) => {\r\n        setMessengerType(val);\r\n    }\r\n\r\n    const updEmail = (e) => {\r\n        setEmail(e.target.value);\r\n    }\r\n\r\n    const updDesignType = (val) => {\r\n        setDesignType(val);\r\n    }\r\n\r\n    const updLink = (e) => {\r\n        setLink(e.target.value);\r\n    }\r\n\r\n    const updTitle = (e) => {\r\n        setTitle(e.target.value);\r\n    }\r\n\r\n    const updAuthor = (e) => {\r\n        setAuthor(e.target.value);\r\n    }\r\n\r\n    const updIntention = (e) => {\r\n        setIntention(e.target.value);\r\n    }\r\n\r\n    const startSelectSample = (e) => {\r\n        e.preventDefault();\r\n        refBoceto.current.click();\r\n    }\r\n\r\n    const selectSample = (e) => {\r\n        e.preventDefault();\r\n        const archivo = e.target.files[0];\r\n        if (archivo) {\r\n            if (archivo.size <= maxFileSize) {\r\n                setImgSample(archivo);\r\n            } else {\r\n                alert('La imagen debe ser menor a 5MB')\r\n            }\r\n        }\r\n    }\r\n\r\n    const deleteSample = (e) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        setImgSample(null);\r\n    }\r\n\r\n    const previous = (e) => {\r\n        e.preventDefault();\r\n        navigateTo(activeIndex - 1);\r\n    }\r\n\r\n    const next = (e) => {\r\n        e.preventDefault();\r\n        navigateTo(activeIndex + 1);\r\n    }\r\n\r\n    const send = (e) => {\r\n        e.preventDefault();\r\n        if (!checkErrors()) {\r\n            const generatedId = getGeneratedId('solicitudes');\r\n            setLoading(true);\r\n            if (imgSample) {\r\n                uploadImage('solicitud-diseno', generatedId, imgSample)\r\n                    .then(url => {\r\n                        saveChanges(url, generatedId);\r\n                    })\r\n                    .catch(error => {\r\n                        setLoading(false);\r\n                        setSuccess(false);\r\n                        alert('Error al subir la imagen. Reintente');\r\n                        console.log(error);\r\n                    })\r\n            } else {\r\n                saveChanges('', generatedId);\r\n            }\r\n        }\r\n    }\r\n\r\n    const saveChanges = (urlImg, generatedId) => {\r\n        const data = {\r\n            name: name.trim(),\r\n            age: parseInt(age),\r\n            phone: phone.trim(),\r\n            messengerType,\r\n            email: email.trim(),\r\n            designType,\r\n            link: link.trim(),\r\n            title: title.trim(),\r\n            author: author.trim(),\r\n            intention: intention.trim(),\r\n            urlImg: urlImg.trim(),\r\n            type: 'DISENO',\r\n            status: 'DISPONIBLE'\r\n        };\r\n\r\n        saveRequest(generatedId, { ...data, active: 1 }).then(() => {\r\n            window.scrollTo(0, 0);\r\n            setLoading(false);\r\n            setSuccess(true);\r\n        })\r\n    }\r\n\r\n    const checkErrors = () => {\r\n\r\n        // Name\r\n        if (!(/^(?!\\s*$).{1,50}/.test(name))) {\r\n            alert('Tu nombre debe tener de 1 a 50 caracteres');\r\n            return true;\r\n        }\r\n        else if (!(/^[a-zA-Z\\sáéíóúñÑ]*$/.test(name))) {\r\n            alert('Tu nombre no puede tener caracteres especiales');\r\n            return true;\r\n        }\r\n\r\n        // Age\r\n        if (!age || age < 10 || age > 99) {\r\n            alert('Introduce una edad válida');\r\n            return true;\r\n        }\r\n\r\n        // Phone\r\n        if (!(/(^\\s*$)|(^[+]?[0-9 ]{7,20}$)/).test(phone)) {\r\n            alert('Introduce un teléfono válido');\r\n            return true;\r\n        }\r\n\r\n        if (!(/^(?!\\s*$).{6,100}/.test(email))) {\r\n            alert('Tu correo debe tener de 6 a 100 caracteres');\r\n            return true;\r\n        }\r\n        else if (!(/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/).test(email)) {\r\n            alert('Introduce un correo válido');\r\n            return true;\r\n        }\r\n\r\n        // Link (optional)\r\n        if (link) {\r\n            if (!(/^(?!\\s*$).{1,500}/.test(link))) {\r\n                alert('Tu link debe tener de 1 a 500 caracteres');\r\n                return true;\r\n            }\r\n        }\r\n\r\n        // Title\r\n        if (!(/^(?!\\s*$).{1,100}/.test(title))) {\r\n            alert('Tu título debe tener de 1 a 100 caracteres');\r\n            return true;\r\n        }\r\n\r\n        // Author\r\n        if (!(/^(?!\\s*$).{1,100}/.test(author))) {\r\n            alert('Tu pseudónimo debe tener de 1 a 100 caracteres');\r\n            return true;\r\n        }\r\n\r\n        // Intention\r\n        if (!(/^(?!\\s*$).{1,1000}/.test(intention))) {\r\n            alert('Lo que quieres transmitir debe tener de 1 a 1000 caracteres');\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    const navigateTo = (index) => {\r\n        setActiveIndex(index);\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n        setSuccess(false);\r\n    }, [activeIndex])\r\n\r\n    return (\r\n        <div>\r\n            <Navbar />\r\n            <main className='main-body below-navbar colored-background'>\r\n                <section className='container-xl section'>\r\n                    <h2 className='mb-0'>Pide un diseño</h2>\r\n                    <p className='txt-responsive-form'>Y uno de nuestros artistas te contactará a la brevedad</p>\r\n                </section>\r\n                <section className='container-xl mt-5 position-relative'>\r\n                    <img src={ImgBailando} alt='img-fondo' className='img-fondo-formulario' />\r\n\r\n                    <div className='floating-form'>\r\n                        {\r\n                            success\r\n                                ?\r\n                                <div className='form-container text-align-center'>\r\n                                    <Fade bottom>\r\n                                        <FontAwesomeIcon color={'#3DE58D'} icon={faCheckCircle} style={{ fontSize: '8rem' }} />\r\n                                        <h3 className='mt-1 mb-1'>Listo</h3>\r\n                                    </Fade>\r\n                                    <p className='txt-responsive-form m0-auto'>En menos de 3 días te contactaremos</p>\r\n                                    <div className='form-buttons-container mt-3'>\r\n                                        <Link to={'inicio'} className='button button-green m0-auto'>\r\n                                            <FontAwesomeIcon icon={faHome} size='xl' />\r\n                                            {' '}\r\n                                            <span className='d-none d-md-inline'>\r\n                                                Regresar\r\n                                            </span>\r\n                                        </Link>\r\n                                    </div>\r\n                                </div>\r\n                                :\r\n                                <>\r\n                                    <Steps\r\n                                        activeIndex={activeIndex}\r\n                                        navigateTo={navigateTo}\r\n                                        steps={steps} />\r\n                                    <div className='form-container'>\r\n                                        <form>\r\n                                            <StepManager currentIndex={activeIndex}>\r\n                                                <div className='step-1'>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtNombres\">¿Cómo te llamas?</label>\r\n                                                        <input minLength=\"1\" maxLength=\"50\" type=\"text\" value={name} onChange={updName} id=\"txtNombres\" placeholder=\"Ingresa tus nombres\" />\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtEdad\">¿Qué edad tienes?</label>\r\n                                                        <input type=\"number\" min={10} max={99} value={age} onChange={updAge} id=\"txtEdad\" placeholder=\"Ingresa tu edad\" />\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtNumero\">Bríndanos un número si hay consultas</label>\r\n                                                        <div className='cbo-text'>\r\n                                                            <DropdownImage\r\n                                                                list={contactTypes}\r\n                                                                select={updMessengerType} />\r\n                                                            <input type=\"text\" value={phone} onChange={updPhone} id=\"txtNumero\" placeholder=\"Ej: +51 999 999 999\" />\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtCorreo\">Bríndanos un correo para enviarte el trabajo</label>\r\n                                                        <input minLength=\"6\" maxLength=\"100\" type=\"email\" value={email} onChange={updEmail} id=\"txtCorreo\" placeholder=\"Ingresa tu correo\" />\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className='step-2'>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtLink\">Tipo de diseño</label>\r\n                                                        <DropdownImage\r\n                                                            stretch\r\n                                                            list={designTypes}\r\n                                                            select={updDesignType} />\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtLink\">Link de tu obra (Opcional)</label>\r\n                                                        <input minLength=\"1\" maxLength=\"500\" type=\"text\" value={link} onChange={updLink} id=\"txtLink\" placeholder=\"Ingresa el link\" />\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className='step-3'>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtTitulo\">Título o frase principal</label>\r\n                                                        <input minLength=\"1\" maxLength=\"100\" type=\"text\" value={title} onChange={updTitle} id=\"txtTitulo\" placeholder=\"Ejemplo: El amor todo lo puede\" />\r\n\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtPseudonimo\">¿Cuál es tu pseudónimo?</label>\r\n                                                        <input minLength=\"1\" maxLength=\"100\" type=\"text\" value={author} onChange={updAuthor} id=\"txtPseudonimo\" placeholder=\"Ejemplo: Atenas\" />\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"txtIntencion\">¿Qué deseas transmitir con tu diseño?</label>\r\n                                                        <textarea minLength=\"1\" maxLength=\"1000\" rows=\"4\" value={intention} onChange={updIntention} id=\"txtIntencion\" placeholder=\"Ejemplo: Quiero transmitir la idea de un mundo inestable e idealizado por una típica adolescente...\"></textarea>\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"flBoceto\">¿Tienes algún boceto en imagen? (Opcional)</label>\r\n                                                        {\r\n                                                            imgSample\r\n                                                                ?\r\n                                                                <button onClick={startSelectSample} className={`d-flex justify-content-between align-items-center button button-light-purple button-thin stretch ${imgSample ? 'd-flex' : ''}`}>\r\n                                                                    <span className='clamp clamp-1'>\r\n                                                                        {imgSample.name}\r\n                                                                    </span>\r\n                                                                    <span onClick={deleteSample} className='fa fa-times' style={{ color: 'white' }}></span>\r\n                                                                </button>\r\n                                                                :\r\n                                                                <button onClick={startSelectSample} className={`button button-light-purple button-thin stretch ${imgSample ? 'd-flex' : ''}`}>\r\n                                                                    <span>\r\n                                                                        Subir imagen\r\n                                                                    </span>\r\n                                                                </button>\r\n                                                        }\r\n                                                        <input type=\"file\" onChange={selectSample} accept=\"image/*\" ref={refBoceto} className='d-none' id=\"flBoceto\" />\r\n                                                    </div>\r\n                                                    <div className='form-group'>\r\n                                                        <label htmlFor=\"chkPortafolio\">El artista podrá usar el diseño final en su propio portafolio.</label>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </StepManager>\r\n                                            <div className='form-buttons-container'>\r\n                                                {\r\n                                                    canGoBackwards && !loading\r\n                                                    &&\r\n                                                    <button onClick={previous} className='button button-green'>\r\n                                                        <FontAwesomeIcon icon={faAngleLeft} size='xl' />\r\n                                                        {' '}\r\n                                                        <span className='d-none d-md-inline'>\r\n                                                            Anterior\r\n                                                    </span>\r\n                                                    </button>\r\n                                                }\r\n                                                {\r\n                                                    loading\r\n                                                        ?\r\n                                                        <span className='button button-green justify-self-right'>\r\n                                                            Enviando\r\n                                                            {' '}\r\n                                                            <ClipLoader color={'#fff'} loading={true} css={overrideSpinnerInline} size={22} />\r\n                                                        </span>\r\n                                                        :\r\n                                                        isLast\r\n                                                            ?\r\n                                                            <button onClick={send} className='button button-green justify-self-right'>\r\n                                                                <span className='d-none d-md-inline'>\r\n                                                                    Enviar\r\n                                                    </span>\r\n                                                                {' '}\r\n                                                                <FontAwesomeIcon icon={faCheck} size='xl' />\r\n                                                            </button>\r\n                                                            :\r\n                                                            <button onClick={next} className='button button-green justify-self-right'>\r\n                                                                <span className='d-none d-md-inline'>\r\n                                                                    Siguiente\r\n                                                    </span>\r\n                                                                {' '}\r\n                                                                <FontAwesomeIcon icon={faAngleRight} size='xl' />\r\n                                                            </button>\r\n                                                }\r\n                                            </div>\r\n                                        </form>\r\n                                    </div>\r\n                                </>\r\n                        }\r\n                    </div>\r\n\r\n                </section>\r\n            </main>\r\n            <Footer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Solicitud;","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\hooks\\useOutsideListener.js",["205"],"import React, { useRef, useEffect } from \"react\";\r\nimport { Subject } from 'rxjs';\r\n\r\n/**\r\n * Hook that alerts clicks outside of the passed ref\r\n */\r\nexport const useOutsideListener = (ref) => {\r\n\r\n    const outsideListener = useRef(new Subject());\r\n\r\n    useEffect(() => {\r\n        /**\r\n         * Alert if clicked on outside of element\r\n         */\r\n        function handleClickOutside(event) {\r\n            if (ref.current && !ref.current.contains(event.target)) {\r\n                outsideListener.current.next();\r\n            }\r\n        }\r\n\r\n        // Bind the event listener\r\n        document.addEventListener(\"mousedown\", handleClickOutside);\r\n        return () => {\r\n            // Unbind the event listener on clean up\r\n            document.removeEventListener(\"mousedown\", handleClickOutside);\r\n        };\r\n    }, [ref]);\r\n\r\n    return {\r\n        outsideListener$: outsideListener.current\r\n    }\r\n\r\n}\r\n","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\forms\\forms-steps\\index.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\forms\\forms-steps\\form-steps.js",["206"],"import React from 'react'\r\nimport './form-steps.css'\r\n\r\nconst Steps = ({ activeIndex, navigateTo, steps }) => {\r\n\r\n    const chunksPercentage = 100 / (steps.length + 1);\r\n    const totalWidth = chunksPercentage * (steps.length - 1);\r\n\r\n    return (\r\n        <div className='form-steps'>\r\n            <div className='line' style={{ left: chunksPercentage + '%', width: totalWidth + '%' }}></div>\r\n            {\r\n                steps.map((step, index) => (\r\n                    <div className='step-container'>\r\n                        <div onClick={() => navigateTo(index)} className={`form-step ${index == activeIndex ? 'active' : ''}`}>{index + 1}</div>\r\n                        <div className='step-text'>{step}</div>\r\n                    </div>\r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Steps;","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\hooks\\useStepObserver.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\forms\\step-manager\\step-manager.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\api.js",["207"],"C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\firebase.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\pages\\admin.js",["208","209","210"],"import React, { useRef, useState, useEffect } from 'react';\r\nimport DropdownImage from '../componentes/dropdown-image';\r\nimport Navbar from '../componentes/navbar';\r\nimport DesignDetailModal from '../componentes/modal/designDetail';\r\nimport CritiqueDetailModal from '../componentes/modal/critiqueDetail';\r\nimport RequestCard from '../componentes/request-card';\r\nimport Tabs from '../componentes/tabs';\r\nimport Footer from '../componentes/footer/footer';\r\nimport PuffLoader from \"react-spinners/PuffLoader\";\r\nimport { css } from \"@emotion/core\";\r\nimport { requestStatuses, requestTypes } from '../data/data';\r\nimport { getRequests } from '../api';\r\n\r\nconst override = css`\r\n  display: block;\r\n  margin: 5rem auto;\r\n`;\r\n\r\nconst requestTypeList = requestTypes;\r\nconst tabList = requestStatuses;\r\nconst limit = 3;\r\n\r\nconst Admin = () => {\r\n\r\n    const [activeTabIndex, setActiveTabIndex] = useState(0);\r\n    const [requestType, setRequestType] = useState('DISENO');\r\n    const [requestList, setRequestList] = useState([]);\r\n    const [isLast, setIsLast] = useState(false);\r\n    const [loadingRequestList, setLoadingRequestList] = useState(false);\r\n    const [isOpenDesignModal, setOpenDesignModal] = useState(false);\r\n    const [isOpenCritiqueModal, setOpenCritiqueModal] = useState(false);\r\n    const [registry, setRegistry] = useState(null);\r\n\r\n    const openModal = (request) => {\r\n        setRegistry(request);\r\n        switch (request.type) {\r\n            case 'CRITICA':\r\n                setOpenCritiqueModal(true);\r\n                break;\r\n            case 'DISENO':\r\n                setOpenDesignModal(true);\r\n                break;\r\n        }\r\n    }\r\n\r\n    const updRequestType = (val) => {\r\n        setRequestType(val);\r\n    }\r\n\r\n    const getLastElement = (field) => {\r\n        return requestList[requestList.length - 1] ? requestList[requestList.length - 1][field] : undefined;\r\n    }\r\n\r\n    const requestMoreData = () => {\r\n        if (!loadingRequestList) {\r\n            setLoadingRequestList(true);\r\n            getRequests(undefined, requestType, tabList[activeTabIndex].id, getLastElement('updatedAt'), limit)\r\n                .then(data => {\r\n                    setLoadingRequestList(false);\r\n                    setIsLast(data.isLast);\r\n                    setRequestList((state) => ([...state, ...data.list]));\r\n                })\r\n                .catch(error => {\r\n                    setLoadingRequestList(false);\r\n                    alert('Ha ocurrido un error. Vuelve a intentarlo más tarde');\r\n                });\r\n        }\r\n    }\r\n\r\n    const requestData = () => {\r\n        if (!loadingRequestList) {\r\n            setLoadingRequestList(true);\r\n            getRequests(undefined, requestType, tabList[activeTabIndex].id, undefined, limit)\r\n                .then(data => {\r\n                    setLoadingRequestList(false);\r\n                    setIsLast(data.isLast);\r\n                    setRequestList(data.list);\r\n                })\r\n                .catch(error => {\r\n                    setLoadingRequestList(false);\r\n                    alert('Ha ocurrido un error. Vuelve a intentarlo más tarde');\r\n                });\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        requestData(true);\r\n    }, [activeTabIndex, requestType]);\r\n\r\n    return (\r\n        <div>\r\n            <Navbar />\r\n            <DesignDetailModal data={registry} isOpen={isOpenDesignModal} close={() => setOpenDesignModal(false)} />\r\n            <CritiqueDetailModal data={registry} isOpen={isOpenCritiqueModal} close={() => setOpenCritiqueModal(false)} />\r\n\r\n            <main className='main-body below-navbar colored-background'>\r\n                <section className='container-xl section'>\r\n                    <div className='title-admin-container'>\r\n                        <h2 className='m-0'>¿Cuál tomamos hoy?</h2>\r\n                        <div className='dropdown-container'>\r\n                            <DropdownImage\r\n                                stretch\r\n                                list={requestTypeList}\r\n                                select={updRequestType} />\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n                <section className='container-xl section'>\r\n                    <Tabs\r\n                        loading={false}\r\n                        requestList={requestList}\r\n                        requestMoreData={requestMoreData}\r\n                        hasMore={!isLast}\r\n                        loader={<PuffLoader color={'#8B81EC'} loading={loadingRequestList} css={override} size={100} />}\r\n                        activeIndex={activeTabIndex}\r\n                        select={setActiveTabIndex}\r\n                        tabs={tabList.map(e => e.name)}>\r\n                        <div>\r\n                            {requestList.map(request => (\r\n                                <RequestCard key={request.id} data={request} select={openModal} />\r\n                            ))}\r\n                        </div>\r\n                    </Tabs>\r\n                </section>\r\n            </main>\r\n            <Footer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Admin;","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\customRouter\\privateRoute.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\context\\AuthContext.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\customRouter\\publicRoute.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\story-card\\index.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\story-card\\story_card.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\home-panorama\\panorama.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\stories-carrousel\\carrousel.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\dropdown-image\\index.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\dropdown-image\\dropdown.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\loading-screen\\index.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\loading-screen\\loading-screen.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\request-card\\index.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\request-card\\card.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\avatar\\index.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\avatar\\avatar.js",["211"],"import React, { useState, useEffect } from 'react'\r\nimport GenericUserImg from '../../img/usuario-generico.svg'\r\n\r\nconst Avatar = ({ img, clases }) => {\r\n    const [avatarImg, setAvatarImg] = useState(GenericUserImg);\r\n\r\n    useEffect(() => {\r\n        setAvatarImg(avatarImg);\r\n    }, [img])\r\n\r\n    return (\r\n        <img onError={() => setAvatarImg(GenericUserImg)} alt='img-avatar' src={avatarImg} className={clases} />\r\n    )\r\n}\r\n\r\nexport default Avatar;\r\n","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\modal\\designDetail.js",["212","213"],"import React, { useEffect } from 'react';\r\nimport Avatar from '../avatar';\r\nimport Zoom from 'react-reveal/Zoom';\r\nimport { critiquePoints } from '../../data/data';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faAngleDown, faHandPaper, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport './designDetail.css';\r\n\r\nconst Modal = ({ isOpen, data, close }) => {\r\n\r\n    useEffect(() => {\r\n        if (isOpen) {\r\n            document.body.style.overflow = 'hidden';\r\n        } else {\r\n            document.body.style.overflow = 'unset';\r\n        }\r\n    }, [isOpen]);\r\n\r\n    let styles = '';\r\n    if (isOpen) {\r\n        styles = 'open';\r\n    } else {\r\n        styles = 'close';\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isOpen) {\r\n            document.body.style.overflow = 'hidden';\r\n        } else {\r\n            document.body.style.overflow = 'unset';\r\n        }\r\n    }, [isOpen]);\r\n\r\n    const getAbrevPointName = (id) => {\r\n        const obj = critiquePoints.find(e => e.id == id);\r\n        if (obj) {\r\n            return obj.abrev;\r\n        }\r\n        return '';\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={'overlay overlay-modal ' + styles} onClick={close}>\r\n            </div>\r\n            <Zoom bottom collapse when={isOpen}>\r\n                <div className={'modal ' + styles}>\r\n                    <div className='request-modal-container'>\r\n                        <div className='header-container position-relative'>\r\n                            <Avatar clases='request-modal-avatar' />\r\n                            <div className='title-container'>\r\n                                <h3 className='clamp clamp-1'>{data?.title}</h3>\r\n                                <p>Ayer a las 5:35 - Expira en 3 días</p>\r\n                            </div>\r\n                            <FontAwesomeIcon icon={faAngleDown} onClick={close} className='close-icon' />\r\n                        </div>\r\n                        <div className='description-container'>\r\n                            <p>{data?.about || 'No hay descripción'}</p>\r\n                            <h4>Link de la obra d</h4>\r\n                            {\r\n                                data?.link\r\n                                    ?\r\n                                    <a target='_blank' href={data?.link}>{data?.link}</a>\r\n                                    :\r\n                                    <p>No existe link</p>\r\n                            }\r\n                            <h4>¿Qué quiero transmitir?</h4>                            \r\n                            <p>{data?.intention || 'No hay intención'}</p>                            \r\n                            <h4>Puntos a criticar</h4>\r\n                            <ul>\r\n                                {\r\n                                    data?.points?.map(point => (\r\n                                        <li>{getAbrevPointName(point)}</li>\r\n                                    ))\r\n                                }\r\n                            </ul>\r\n                            {\r\n                                (!data?.points || data?.points?.length < 1)\r\n                                &&\r\n                                <p>No se han especificado puntos</p>\r\n                            }\r\n                        </div>\r\n                        <div className=\"footer-card-container\">\r\n                            <div className='button-container'>\r\n                                <button onClick={() => { }} className='button button-blue button-option-request'>\r\n                                    <FontAwesomeIcon color={'#fff'} icon={faHandPaper} className='icon' />\r\n                                    Tomar pedido\r\n                                </button>\r\n                                <button onClick={close} className='button button-red button-option-request'>\r\n                                    <FontAwesomeIcon color={'#fff'} icon={faTimes} className='icon' />\r\n                                    Cerrar\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </Zoom>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Modal;","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\data\\data.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\tabs\\index.js",[],"C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\tabs\\tabs.js",["214","215","216"],"import React, { useRef, useEffect } from 'react'\r\nimport InfiniteScroll from 'react-infinite-scroll-component'\r\nimport './tabs.css'\r\n\r\nconst Tabs = ({ tabs, requestList, requestMoreData, hasMore, loader, activeIndex, select, loading, children }) => {\r\n\r\n    const porcAnchoPestana = 100 / tabs.length;\r\n\r\n    const childrenArray = React.Children.toArray(children);\r\n\r\n    const switchTab = (e, index) => {\r\n        e.preventDefault();\r\n        select(index);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"material-tabs\">\r\n                {\r\n                    tabs.map((pestana, index) => (\r\n                        <a key={index} onClick={(e) => switchTab(e, index)} className=\"active\">{pestana}</a>\r\n                    ))\r\n                }\r\n                <span className=\"tab-bar\" style={{ width: `${porcAnchoPestana}%`, left: `${porcAnchoPestana * activeIndex}%` }}></span>\r\n            </div>\r\n            {\r\n                loading\r\n                    ?\r\n                    'Cargando...'\r\n                    :\r\n                    <InfiniteScroll\r\n                        className=\"tab-content\"\r\n                        dataLength={requestList.length}\r\n                        next={requestMoreData}\r\n                        hasMore={hasMore}\r\n                        loader={loader}>\r\n                        {\r\n                            childrenArray\r\n                        }\r\n                    </InfiniteScroll>\r\n\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tabs;\r\n","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\modal\\critiqueDetail.js",["217","218"],"import React, { useEffect } from 'react';\r\nimport Avatar from '../avatar';\r\nimport Zoom from 'react-reveal/Zoom';\r\nimport { critiquePoints } from '../../data/data';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faAngleDown, faHandPaper, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport './designDetail.css';\r\n\r\nconst Modal = ({ isOpen, data, close }) => {\r\n\r\n    useEffect(() => {\r\n        if (isOpen) {\r\n            document.body.style.overflow = 'hidden';\r\n        } else {\r\n            document.body.style.overflow = 'unset';\r\n        }\r\n    }, [isOpen]);\r\n\r\n    let styles = '';\r\n    if (isOpen) {\r\n        styles = 'open';\r\n    } else {\r\n        styles = 'close';\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isOpen) {\r\n            document.body.style.overflow = 'hidden';\r\n        } else {\r\n            document.body.style.overflow = 'unset';\r\n        }\r\n    }, [isOpen]);\r\n\r\n    const getAbrevPointName = (id) => {\r\n        const obj = critiquePoints.find(e => e.id == id);\r\n        if (obj) {\r\n            return obj.abrev;\r\n        }\r\n        return '';\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={'overlay overlay-modal ' + styles} onClick={close}>\r\n            </div>\r\n            <Zoom bottom collapse when={isOpen}>\r\n                <div className={'modal ' + styles}>\r\n                    <div className='request-modal-container'>\r\n                        <div className='header-container position-relative'>\r\n                            <Avatar clases='request-modal-avatar' />\r\n                            <div className='title-container'>\r\n                                <h3 className='clamp clamp-1'>{data?.title}</h3>\r\n                                <p>Ayer a las 5:35 - Expira en 3 días</p>\r\n                            </div>\r\n                            <FontAwesomeIcon icon={faAngleDown} onClick={close} className='close-icon' />\r\n                        </div>\r\n                        <div className='description-container'>\r\n                            <p>{data?.about || 'No hay descripción'}</p>\r\n                            <h4>Link de la obra c</h4>\r\n                            {\r\n                                data?.link\r\n                                    ?\r\n                                    <a target='_blank' href={data?.link}>{data?.link}</a>\r\n                                    :\r\n                                    <p>No existe link</p>\r\n                            }\r\n                            <h4>¿Qué quiero transmitir?</h4>                            \r\n                            <p>{data?.intention || 'No hay intención'}</p>                            \r\n                            <h4>Puntos a criticar</h4>\r\n                            <ul>\r\n                                {\r\n                                    data?.points?.map(point => (\r\n                                        <li>{getAbrevPointName(point)}</li>\r\n                                    ))\r\n                                }\r\n                            </ul>\r\n                            {\r\n                                (!data?.points || data?.points?.length < 1)\r\n                                &&\r\n                                <p>No se han especificado puntos</p>\r\n                            }\r\n                        </div>\r\n                        <div className=\"footer-card-container\">\r\n                            <div className='button-container'>\r\n                                <button onClick={() => { }} className='button button-blue button-option-request'>\r\n                                    <FontAwesomeIcon color={'#fff'} icon={faHandPaper} className='icon' />\r\n                                    Tomar pedido\r\n                                </button>\r\n                                <button onClick={close} className='button button-red button-option-request'>\r\n                                    <FontAwesomeIcon color={'#fff'} icon={faTimes} className='icon' />\r\n                                    Cerrar\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </Zoom>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Modal;","C:\\Users\\Gricardov\\Desktop\\Temple Luna Web\\tlweb\\src\\componentes\\modal\\confirmationModal.js",["219","220","221","222","223","224"],"import React, { useEffect } from 'react';\r\nimport Avatar from '../avatar';\r\nimport Zoom from 'react-reveal/Zoom';\r\nimport { critiquePoints } from '../../data/data';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faAngleDown, faHandPaper, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport './requestDetail.css';\r\n\r\nconst Modal = ({ isOpen, close }) => {\r\n\r\n    useEffect(() => {\r\n        if (isOpen) {\r\n            document.body.style.overflow = 'hidden';\r\n        } else {\r\n            document.body.style.overflow = 'unset';\r\n        }\r\n    }, [isOpen]);\r\n\r\n    let styles = '';\r\n    if (isOpen) {\r\n        styles = 'open';\r\n    } else {\r\n        styles = 'close';\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isOpen) {\r\n            document.body.style.overflow = 'hidden';\r\n        } else {\r\n            document.body.style.overflow = 'unset';\r\n        }\r\n    }, [isOpen]);\r\n\r\n   \r\n    return (\r\n        <>\r\n            <Zoom bottom collapse when={isOpen}>\r\n                <div className={'modal ' + styles}>\r\n                    <div className='request-modal-container'>\r\n                        {'Confirmación'}\r\n                    </div>\r\n                </div>\r\n\r\n            </Zoom>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Modal;",{"ruleId":"225","replacedBy":"226"},{"ruleId":"227","replacedBy":"228"},{"ruleId":"229","severity":1,"message":"230","line":11,"column":43,"nodeType":"231","messageId":"232","endLine":11,"endColumn":48},{"ruleId":"233","severity":1,"message":"234","line":60,"column":29,"nodeType":"235","endLine":60,"endColumn":73},{"ruleId":"233","severity":1,"message":"234","line":49,"column":25,"nodeType":"235","endLine":49,"endColumn":72},{"ruleId":"229","severity":1,"message":"236","line":1,"column":27,"nodeType":"231","messageId":"232","endLine":1,"endColumn":36},{"ruleId":"237","severity":1,"message":"238","line":43,"column":26,"nodeType":"239","messageId":"240","endLine":43,"endColumn":27,"suggestions":"241"},{"ruleId":"242","severity":1,"message":"243","line":82,"column":20,"nodeType":"244","messageId":"245","endLine":82,"endColumn":22},{"ruleId":"242","severity":1,"message":"243","line":83,"column":48,"nodeType":"244","messageId":"245","endLine":83,"endColumn":50},{"ruleId":"237","severity":1,"message":"238","line":160,"column":26,"nodeType":"239","messageId":"240","endLine":160,"endColumn":27,"suggestions":"246"},{"ruleId":"242","severity":1,"message":"247","line":193,"column":35,"nodeType":"244","messageId":"245","endLine":193,"endColumn":37},{"ruleId":"237","severity":1,"message":"238","line":193,"column":26,"nodeType":"239","messageId":"240","endLine":193,"endColumn":27,"suggestions":"248"},{"ruleId":"229","severity":1,"message":"249","line":1,"column":8,"nodeType":"231","messageId":"232","endLine":1,"endColumn":13},{"ruleId":"242","severity":1,"message":"247","line":15,"column":94,"nodeType":"244","messageId":"245","endLine":15,"endColumn":96},{"ruleId":"250","severity":1,"message":"251","line":105,"column":13,"nodeType":"252","messageId":"253","endLine":112,"endColumn":14},{"ruleId":"229","severity":1,"message":"254","line":1,"column":17,"nodeType":"231","messageId":"232","endLine":1,"endColumn":23},{"ruleId":"250","severity":1,"message":"251","line":36,"column":9,"nodeType":"252","messageId":"253","endLine":43,"endColumn":10},{"ruleId":"255","severity":1,"message":"256","line":88,"column":8,"nodeType":"257","endLine":88,"endColumn":37,"suggestions":"258"},{"ruleId":"255","severity":1,"message":"259","line":9,"column":8,"nodeType":"257","endLine":9,"endColumn":13,"suggestions":"260"},{"ruleId":"242","severity":1,"message":"247","line":35,"column":51,"nodeType":"244","messageId":"245","endLine":35,"endColumn":53},{"ruleId":"261","severity":1,"message":"262","line":63,"column":37,"nodeType":"235","endLine":63,"endColumn":74},{"ruleId":"229","severity":1,"message":"254","line":1,"column":17,"nodeType":"231","messageId":"232","endLine":1,"endColumn":23},{"ruleId":"229","severity":1,"message":"236","line":1,"column":25,"nodeType":"231","messageId":"232","endLine":1,"endColumn":34},{"ruleId":"233","severity":1,"message":"234","line":21,"column":25,"nodeType":"235","endLine":21,"endColumn":96},{"ruleId":"242","severity":1,"message":"247","line":35,"column":51,"nodeType":"244","messageId":"245","endLine":35,"endColumn":53},{"ruleId":"261","severity":1,"message":"262","line":63,"column":37,"nodeType":"235","endLine":63,"endColumn":74},{"ruleId":"229","severity":1,"message":"263","line":2,"column":8,"nodeType":"231","messageId":"232","endLine":2,"endColumn":14},{"ruleId":"229","severity":1,"message":"264","line":4,"column":10,"nodeType":"231","messageId":"232","endLine":4,"endColumn":24},{"ruleId":"229","severity":1,"message":"265","line":5,"column":10,"nodeType":"231","messageId":"232","endLine":5,"endColumn":25},{"ruleId":"229","severity":1,"message":"266","line":6,"column":10,"nodeType":"231","messageId":"232","endLine":6,"endColumn":21},{"ruleId":"229","severity":1,"message":"267","line":6,"column":23,"nodeType":"231","messageId":"232","endLine":6,"endColumn":34},{"ruleId":"229","severity":1,"message":"268","line":6,"column":36,"nodeType":"231","messageId":"232","endLine":6,"endColumn":43},"no-native-reassign",["269"],"no-negated-in-lhs",["270"],"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useEffect' is defined but never used.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["271","272"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["273","274"],"Expected '===' and instead saw '=='.",["275","276"],"'React' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'useRef' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'requestData'. Either include it or remove the dependency array.","ArrayExpression",["277"],"React Hook useEffect has a missing dependency: 'avatarImg'. Either include it or remove the dependency array. You can also do a functional update 'setAvatarImg(a => ...)' if you only need 'avatarImg' in the 'setAvatarImg' call.",["278"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","'Avatar' is defined but never used.","'critiquePoints' is defined but never used.","'FontAwesomeIcon' is defined but never used.","'faAngleDown' is defined but never used.","'faHandPaper' is defined but never used.","'faTimes' is defined but never used.","no-global-assign","no-unsafe-negation",{"messageId":"279","fix":"280","desc":"281"},{"messageId":"282","fix":"283","desc":"284"},{"messageId":"279","fix":"285","desc":"281"},{"messageId":"282","fix":"286","desc":"284"},{"messageId":"279","fix":"287","desc":"281"},{"messageId":"282","fix":"288","desc":"284"},{"desc":"289","fix":"290"},{"desc":"291","fix":"292"},"removeEscape",{"range":"293","text":"294"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"295","text":"296"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"297","text":"294"},{"range":"298","text":"296"},{"range":"299","text":"294"},{"range":"300","text":"296"},"Update the dependencies array to be: [activeTabIndex, requestData, requestType]",{"range":"301","text":"302"},"Update the dependencies array to be: [avatarImg, img]",{"range":"303","text":"304"},[1323,1324],"",[1323,1323],"\\",[4884,4885],[4884,4884],[5926,5927],[5926,5926],[3230,3259],"[activeTabIndex, requestData, requestType]",[285,290],"[avatarImg, img]"]